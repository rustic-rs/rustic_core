pub mod rustic_core
pub use rustic_core::compression_level_range
pub mod rustic_core::archiver
pub mod rustic_core::archiver::file_archiver
pub struct rustic_core::archiver::file_archiver::FileArchiver<BE: rustic_core::backend::decrypt::DecryptWriteBackend, I: rustic_core::index::IndexedBackend>
pub rustic_core::archiver::file_archiver::FileArchiver::data_packer: rustic_core::blob::packer::Packer<BE>
pub rustic_core::archiver::file_archiver::FileArchiver::index: I
pub rustic_core::archiver::file_archiver::FileArchiver::rabin: rustic_core::cdc::rolling_hash::Rabin64
impl<BE: rustic_core::backend::decrypt::DecryptWriteBackend, I: rustic_core::index::IndexedBackend> rustic_core::archiver::file_archiver::FileArchiver<BE, I>
pub fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::backup_reader(&self, r: impl std::io::Read + core::marker::Send + 'static, node: rustic_core::backend::node::Node, p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<(rustic_core::backend::node::Node, u64)>
pub fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::finalize(self) -> rustic_core::error::RusticResult<rustic_core::blob::packer::PackerStats>
pub fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::new(be: BE, index: I, indexer: alloc::sync::Arc<std::sync::rwlock::RwLock<rustic_core::index::indexer::Indexer<BE>>>, config: &rustic_core::repofile::configfile::ConfigFile) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::process<O: rustic_core::backend::ReadSourceOpen>(&self, item: rustic_core::archiver::tree::TreeType<(core::option::Option<O>, rustic_core::archiver::parent::ParentResult<()>), rustic_core::archiver::parent::ParentResult<rustic_core::id::Id>>, p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<rustic_core::archiver::tree::TreeType<(rustic_core::archiver::parent::ParentResult<()>, u64), rustic_core::archiver::parent::ParentResult<rustic_core::id::Id>>>
impl<BE: core::clone::Clone + rustic_core::backend::decrypt::DecryptWriteBackend, I: core::clone::Clone + rustic_core::index::IndexedBackend> core::clone::Clone for rustic_core::archiver::file_archiver::FileArchiver<BE, I>
pub fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::clone(&self) -> rustic_core::archiver::file_archiver::FileArchiver<BE, I>
impl<BE, I> core::marker::Send for rustic_core::archiver::file_archiver::FileArchiver<BE, I>
impl<BE, I> core::marker::Sync for rustic_core::archiver::file_archiver::FileArchiver<BE, I>
impl<BE, I> core::marker::Unpin for rustic_core::archiver::file_archiver::FileArchiver<BE, I> where I: core::marker::Unpin
impl<BE, I> core::panic::unwind_safe::RefUnwindSafe for rustic_core::archiver::file_archiver::FileArchiver<BE, I> where I: core::panic::unwind_safe::RefUnwindSafe
impl<BE, I> core::panic::unwind_safe::UnwindSafe for rustic_core::archiver::file_archiver::FileArchiver<BE, I> where I: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::archiver::file_archiver::FileArchiver<BE, I> where U: core::convert::From<T>
pub fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::archiver::file_archiver::FileArchiver<BE, I> where U: core::convert::Into<T>
pub type rustic_core::archiver::file_archiver::FileArchiver<BE, I>::Error = core::convert::Infallible
pub fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::archiver::file_archiver::FileArchiver<BE, I> where U: core::convert::TryFrom<T>
pub type rustic_core::archiver::file_archiver::FileArchiver<BE, I>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::archiver::file_archiver::FileArchiver<BE, I> where T: core::clone::Clone
pub type rustic_core::archiver::file_archiver::FileArchiver<BE, I>::Owned = T
pub fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::clone_into(&self, target: &mut T)
pub fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::archiver::file_archiver::FileArchiver<BE, I> where T: 'static + core::marker::Sized
pub fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::archiver::file_archiver::FileArchiver<BE, I> where T: core::marker::Sized
pub fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::archiver::file_archiver::FileArchiver<BE, I> where T: core::marker::Sized
pub fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::archiver::file_archiver::FileArchiver<BE, I>
pub fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::archiver::file_archiver::FileArchiver<BE, I>
pub type rustic_core::archiver::file_archiver::FileArchiver<BE, I>::Init = T
pub const rustic_core::archiver::file_archiver::FileArchiver<BE, I>::ALIGN: usize
pub unsafe fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::drop(ptr: usize)
pub unsafe fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::archiver::file_archiver::FileArchiver<BE, I>
impl<T> tracing::instrument::WithSubscriber for rustic_core::archiver::file_archiver::FileArchiver<BE, I>
impl<T> typenum::type_operators::Same<T> for rustic_core::archiver::file_archiver::FileArchiver<BE, I>
pub type rustic_core::archiver::file_archiver::FileArchiver<BE, I>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::archiver::file_archiver::FileArchiver<BE, I> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::archiver::file_archiver::FileArchiver<BE, I>::vzip(self) -> V
pub mod rustic_core::archiver::parent
pub enum rustic_core::archiver::parent::ParentResult<T>
pub rustic_core::archiver::parent::ParentResult::Matched(T)
pub rustic_core::archiver::parent::ParentResult::NotFound
pub rustic_core::archiver::parent::ParentResult::NotMatched
impl<T> rustic_core::archiver::parent::ParentResult<T>
pub fn rustic_core::archiver::parent::ParentResult<T>::map<R>(self, f: impl core::ops::function::FnOnce(T) -> R) -> rustic_core::archiver::parent::ParentResult<R>
impl<T: core::clone::Clone> core::clone::Clone for rustic_core::archiver::parent::ParentResult<T>
pub fn rustic_core::archiver::parent::ParentResult<T>::clone(&self) -> rustic_core::archiver::parent::ParentResult<T>
impl<T: core::fmt::Debug> core::fmt::Debug for rustic_core::archiver::parent::ParentResult<T>
pub fn rustic_core::archiver::parent::ParentResult<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T> core::marker::Send for rustic_core::archiver::parent::ParentResult<T> where T: core::marker::Send
impl<T> core::marker::Sync for rustic_core::archiver::parent::ParentResult<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for rustic_core::archiver::parent::ParentResult<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for rustic_core::archiver::parent::ParentResult<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for rustic_core::archiver::parent::ParentResult<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::archiver::parent::ParentResult<T> where U: core::convert::From<T>
pub fn rustic_core::archiver::parent::ParentResult<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::archiver::parent::ParentResult<T> where U: core::convert::Into<T>
pub type rustic_core::archiver::parent::ParentResult<T>::Error = core::convert::Infallible
pub fn rustic_core::archiver::parent::ParentResult<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::archiver::parent::ParentResult<T> where U: core::convert::TryFrom<T>
pub type rustic_core::archiver::parent::ParentResult<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::archiver::parent::ParentResult<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::archiver::parent::ParentResult<T> where T: core::clone::Clone
pub type rustic_core::archiver::parent::ParentResult<T>::Owned = T
pub fn rustic_core::archiver::parent::ParentResult<T>::clone_into(&self, target: &mut T)
pub fn rustic_core::archiver::parent::ParentResult<T>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::archiver::parent::ParentResult<T> where T: 'static + core::marker::Sized
pub fn rustic_core::archiver::parent::ParentResult<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::archiver::parent::ParentResult<T> where T: core::marker::Sized
pub fn rustic_core::archiver::parent::ParentResult<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::archiver::parent::ParentResult<T> where T: core::marker::Sized
pub fn rustic_core::archiver::parent::ParentResult<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::archiver::parent::ParentResult<T>
pub fn rustic_core::archiver::parent::ParentResult<T>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::archiver::parent::ParentResult<T>
pub type rustic_core::archiver::parent::ParentResult<T>::Init = T
pub const rustic_core::archiver::parent::ParentResult<T>::ALIGN: usize
pub unsafe fn rustic_core::archiver::parent::ParentResult<T>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::archiver::parent::ParentResult<T>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::archiver::parent::ParentResult<T>::drop(ptr: usize)
pub unsafe fn rustic_core::archiver::parent::ParentResult<T>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::archiver::parent::ParentResult<T>
impl<T> tracing::instrument::WithSubscriber for rustic_core::archiver::parent::ParentResult<T>
impl<T> typenum::type_operators::Same<T> for rustic_core::archiver::parent::ParentResult<T>
pub type rustic_core::archiver::parent::ParentResult<T>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::archiver::parent::ParentResult<T> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::archiver::parent::ParentResult<T>::vzip(self) -> V
pub struct rustic_core::archiver::parent::Parent
pub rustic_core::archiver::parent::Parent::ignore_ctime: bool
pub rustic_core::archiver::parent::Parent::ignore_inode: bool
pub rustic_core::archiver::parent::Parent::node_idx: usize
pub rustic_core::archiver::parent::Parent::stack: alloc::vec::Vec<(core::option::Option<rustic_core::blob::tree::Tree>, usize)>
pub rustic_core::archiver::parent::Parent::tree: core::option::Option<rustic_core::blob::tree::Tree>
pub rustic_core::archiver::parent::Parent::tree_id: core::option::Option<rustic_core::id::Id>
impl rustic_core::archiver::parent::Parent
pub fn rustic_core::archiver::parent::Parent::finish_dir(&mut self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::archiver::parent::Parent::is_parent(&mut self, node: &rustic_core::backend::node::Node, name: &std::ffi::os_str::OsStr) -> rustic_core::archiver::parent::ParentResult<&rustic_core::backend::node::Node>
pub fn rustic_core::archiver::parent::Parent::new<BE: rustic_core::index::IndexedBackend>(be: &BE, tree_id: core::option::Option<rustic_core::id::Id>, ignore_ctime: bool, ignore_inode: bool) -> Self
pub fn rustic_core::archiver::parent::Parent::p_node(&mut self, name: &std::ffi::os_str::OsStr) -> core::option::Option<&rustic_core::backend::node::Node>
pub fn rustic_core::archiver::parent::Parent::process<BE: rustic_core::index::IndexedBackend, O>(&mut self, be: &BE, item: rustic_core::archiver::tree::TreeType<O, std::ffi::os_str::OsString>) -> rustic_core::error::RusticResult<rustic_core::archiver::tree::TreeType<(O, rustic_core::archiver::parent::ParentResult<()>), rustic_core::archiver::parent::ParentResult<rustic_core::id::Id>>>
pub fn rustic_core::archiver::parent::Parent::set_dir<BE: rustic_core::index::IndexedBackend>(&mut self, be: &BE, name: &std::ffi::os_str::OsStr)
pub fn rustic_core::archiver::parent::Parent::tree_id(&self) -> core::option::Option<rustic_core::id::Id>
impl core::fmt::Debug for rustic_core::archiver::parent::Parent
pub fn rustic_core::archiver::parent::Parent::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::archiver::parent::Parent
impl core::marker::Sync for rustic_core::archiver::parent::Parent
impl core::marker::Unpin for rustic_core::archiver::parent::Parent
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::archiver::parent::Parent
impl core::panic::unwind_safe::UnwindSafe for rustic_core::archiver::parent::Parent
impl<T, U> core::convert::Into<U> for rustic_core::archiver::parent::Parent where U: core::convert::From<T>
pub fn rustic_core::archiver::parent::Parent::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::archiver::parent::Parent where U: core::convert::Into<T>
pub type rustic_core::archiver::parent::Parent::Error = core::convert::Infallible
pub fn rustic_core::archiver::parent::Parent::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::archiver::parent::Parent where U: core::convert::TryFrom<T>
pub type rustic_core::archiver::parent::Parent::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::archiver::parent::Parent::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::archiver::parent::Parent where T: 'static + core::marker::Sized
pub fn rustic_core::archiver::parent::Parent::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::archiver::parent::Parent where T: core::marker::Sized
pub fn rustic_core::archiver::parent::Parent::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::archiver::parent::Parent where T: core::marker::Sized
pub fn rustic_core::archiver::parent::Parent::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::archiver::parent::Parent
pub fn rustic_core::archiver::parent::Parent::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::archiver::parent::Parent
pub type rustic_core::archiver::parent::Parent::Init = T
pub const rustic_core::archiver::parent::Parent::ALIGN: usize
pub unsafe fn rustic_core::archiver::parent::Parent::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::archiver::parent::Parent::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::archiver::parent::Parent::drop(ptr: usize)
pub unsafe fn rustic_core::archiver::parent::Parent::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::archiver::parent::Parent
impl<T> tracing::instrument::WithSubscriber for rustic_core::archiver::parent::Parent
impl<T> typenum::type_operators::Same<T> for rustic_core::archiver::parent::Parent
pub type rustic_core::archiver::parent::Parent::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::archiver::parent::Parent where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::archiver::parent::Parent::vzip(self) -> V
pub type rustic_core::archiver::parent::ItemWithParent<O> = rustic_core::archiver::tree::TreeType<(O, rustic_core::archiver::parent::ParentResult<()>), rustic_core::archiver::parent::ParentResult<rustic_core::id::Id>>
pub mod rustic_core::archiver::tree
pub enum rustic_core::archiver::tree::TreeType<T, U>
pub rustic_core::archiver::tree::TreeType::EndTree
pub rustic_core::archiver::tree::TreeType::NewTree((std::path::PathBuf, rustic_core::backend::node::Node, U))
pub rustic_core::archiver::tree::TreeType::Other((std::path::PathBuf, rustic_core::backend::node::Node, T))
impl<T: core::fmt::Debug, U: core::fmt::Debug> core::fmt::Debug for rustic_core::archiver::tree::TreeType<T, U>
pub fn rustic_core::archiver::tree::TreeType<T, U>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T, U> core::marker::Send for rustic_core::archiver::tree::TreeType<T, U> where T: core::marker::Send, U: core::marker::Send
impl<T, U> core::marker::Sync for rustic_core::archiver::tree::TreeType<T, U> where T: core::marker::Sync, U: core::marker::Sync
impl<T, U> core::marker::Unpin for rustic_core::archiver::tree::TreeType<T, U> where T: core::marker::Unpin, U: core::marker::Unpin
impl<T, U> core::panic::unwind_safe::RefUnwindSafe for rustic_core::archiver::tree::TreeType<T, U> where T: core::panic::unwind_safe::RefUnwindSafe, U: core::panic::unwind_safe::RefUnwindSafe
impl<T, U> core::panic::unwind_safe::UnwindSafe for rustic_core::archiver::tree::TreeType<T, U> where T: core::panic::unwind_safe::UnwindSafe, U: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::archiver::tree::TreeType<T, U> where U: core::convert::From<T>
pub fn rustic_core::archiver::tree::TreeType<T, U>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::archiver::tree::TreeType<T, U> where U: core::convert::Into<T>
pub type rustic_core::archiver::tree::TreeType<T, U>::Error = core::convert::Infallible
pub fn rustic_core::archiver::tree::TreeType<T, U>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::archiver::tree::TreeType<T, U> where U: core::convert::TryFrom<T>
pub type rustic_core::archiver::tree::TreeType<T, U>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::archiver::tree::TreeType<T, U>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::archiver::tree::TreeType<T, U> where T: 'static + core::marker::Sized
pub fn rustic_core::archiver::tree::TreeType<T, U>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::archiver::tree::TreeType<T, U> where T: core::marker::Sized
pub fn rustic_core::archiver::tree::TreeType<T, U>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::archiver::tree::TreeType<T, U> where T: core::marker::Sized
pub fn rustic_core::archiver::tree::TreeType<T, U>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::archiver::tree::TreeType<T, U>
pub fn rustic_core::archiver::tree::TreeType<T, U>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::archiver::tree::TreeType<T, U>
pub type rustic_core::archiver::tree::TreeType<T, U>::Init = T
pub const rustic_core::archiver::tree::TreeType<T, U>::ALIGN: usize
pub unsafe fn rustic_core::archiver::tree::TreeType<T, U>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::archiver::tree::TreeType<T, U>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::archiver::tree::TreeType<T, U>::drop(ptr: usize)
pub unsafe fn rustic_core::archiver::tree::TreeType<T, U>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::archiver::tree::TreeType<T, U>
impl<T> tracing::instrument::WithSubscriber for rustic_core::archiver::tree::TreeType<T, U>
impl<T> typenum::type_operators::Same<T> for rustic_core::archiver::tree::TreeType<T, U>
pub type rustic_core::archiver::tree::TreeType<T, U>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::archiver::tree::TreeType<T, U> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::archiver::tree::TreeType<T, U>::vzip(self) -> V
pub struct rustic_core::archiver::tree::TreeIterator<T, I>
pub rustic_core::archiver::tree::TreeIterator::item: core::option::Option<T>
pub rustic_core::archiver::tree::TreeIterator::iter: I
pub rustic_core::archiver::tree::TreeIterator::path: std::path::PathBuf
impl<T, I> rustic_core::archiver::tree::TreeIterator<T, I> where I: core::iter::traits::iterator::Iterator<Item = T>
pub fn rustic_core::archiver::tree::TreeIterator<T, I>::new(iter: I) -> Self
impl<I, O> core::iter::traits::iterator::Iterator for rustic_core::archiver::tree::TreeIterator<(std::path::PathBuf, rustic_core::backend::node::Node, O), I> where I: core::iter::traits::iterator::Iterator<Item = (std::path::PathBuf, rustic_core::backend::node::Node, O)>
pub type rustic_core::archiver::tree::TreeIterator<(std::path::PathBuf, rustic_core::backend::node::Node, O), I>::Item = rustic_core::archiver::tree::TreeType<O, std::ffi::os_str::OsString>
pub fn rustic_core::archiver::tree::TreeIterator<(std::path::PathBuf, rustic_core::backend::node::Node, O), I>::next(&mut self) -> core::option::Option<Self::Item>
impl<T, I> core::marker::Send for rustic_core::archiver::tree::TreeIterator<T, I> where I: core::marker::Send, T: core::marker::Send
impl<T, I> core::marker::Sync for rustic_core::archiver::tree::TreeIterator<T, I> where I: core::marker::Sync, T: core::marker::Sync
impl<T, I> core::marker::Unpin for rustic_core::archiver::tree::TreeIterator<T, I> where I: core::marker::Unpin, T: core::marker::Unpin
impl<T, I> core::panic::unwind_safe::RefUnwindSafe for rustic_core::archiver::tree::TreeIterator<T, I> where I: core::panic::unwind_safe::RefUnwindSafe, T: core::panic::unwind_safe::RefUnwindSafe
impl<T, I> core::panic::unwind_safe::UnwindSafe for rustic_core::archiver::tree::TreeIterator<T, I> where I: core::panic::unwind_safe::UnwindSafe, T: core::panic::unwind_safe::UnwindSafe
impl<I> core::iter::traits::collect::IntoIterator for rustic_core::archiver::tree::TreeIterator<T, I> where I: core::iter::traits::iterator::Iterator
pub type rustic_core::archiver::tree::TreeIterator<T, I>::IntoIter = I
pub type rustic_core::archiver::tree::TreeIterator<T, I>::Item = <I as core::iter::traits::iterator::Iterator>::Item
pub fn rustic_core::archiver::tree::TreeIterator<T, I>::into_iter(self) -> I
impl<I> pariter::IteratorExt for rustic_core::archiver::tree::TreeIterator<T, I> where I: core::iter::traits::iterator::Iterator
impl<I> rand::seq::IteratorRandom for rustic_core::archiver::tree::TreeIterator<T, I> where I: core::iter::traits::iterator::Iterator
impl<T, U> core::convert::Into<U> for rustic_core::archiver::tree::TreeIterator<T, I> where U: core::convert::From<T>
pub fn rustic_core::archiver::tree::TreeIterator<T, I>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::archiver::tree::TreeIterator<T, I> where U: core::convert::Into<T>
pub type rustic_core::archiver::tree::TreeIterator<T, I>::Error = core::convert::Infallible
pub fn rustic_core::archiver::tree::TreeIterator<T, I>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::archiver::tree::TreeIterator<T, I> where U: core::convert::TryFrom<T>
pub type rustic_core::archiver::tree::TreeIterator<T, I>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::archiver::tree::TreeIterator<T, I>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::archiver::tree::TreeIterator<T, I> where T: 'static + core::marker::Sized
pub fn rustic_core::archiver::tree::TreeIterator<T, I>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::archiver::tree::TreeIterator<T, I> where T: core::marker::Sized
pub fn rustic_core::archiver::tree::TreeIterator<T, I>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::archiver::tree::TreeIterator<T, I> where T: core::marker::Sized
pub fn rustic_core::archiver::tree::TreeIterator<T, I>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::archiver::tree::TreeIterator<T, I>
pub fn rustic_core::archiver::tree::TreeIterator<T, I>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::archiver::tree::TreeIterator<T, I>
pub type rustic_core::archiver::tree::TreeIterator<T, I>::Init = T
pub const rustic_core::archiver::tree::TreeIterator<T, I>::ALIGN: usize
pub unsafe fn rustic_core::archiver::tree::TreeIterator<T, I>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::archiver::tree::TreeIterator<T, I>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::archiver::tree::TreeIterator<T, I>::drop(ptr: usize)
pub unsafe fn rustic_core::archiver::tree::TreeIterator<T, I>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> itertools::Itertools for rustic_core::archiver::tree::TreeIterator<T, I> where T: core::iter::traits::iterator::Iterator + core::marker::Sized
impl<T> tracing::instrument::Instrument for rustic_core::archiver::tree::TreeIterator<T, I>
impl<T> tracing::instrument::WithSubscriber for rustic_core::archiver::tree::TreeIterator<T, I>
impl<T> typenum::type_operators::Same<T> for rustic_core::archiver::tree::TreeIterator<T, I>
pub type rustic_core::archiver::tree::TreeIterator<T, I>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::archiver::tree::TreeIterator<T, I> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::archiver::tree::TreeIterator<T, I>::vzip(self) -> V
pub mod rustic_core::archiver::tree_archiver
pub struct rustic_core::archiver::tree_archiver::TreeArchiver<BE: rustic_core::backend::decrypt::DecryptWriteBackend, I: rustic_core::index::IndexedBackend>
pub rustic_core::archiver::tree_archiver::TreeArchiver::index: I
pub rustic_core::archiver::tree_archiver::TreeArchiver::stack: alloc::vec::Vec<(std::path::PathBuf, rustic_core::backend::node::Node, rustic_core::archiver::parent::ParentResult<rustic_core::id::Id>, rustic_core::blob::tree::Tree)>
pub rustic_core::archiver::tree_archiver::TreeArchiver::summary: rustic_core::repofile::snapshotfile::SnapshotSummary
pub rustic_core::archiver::tree_archiver::TreeArchiver::tree: rustic_core::blob::tree::Tree
pub rustic_core::archiver::tree_archiver::TreeArchiver::tree_packer: rustic_core::blob::packer::Packer<BE>
impl<BE: rustic_core::backend::decrypt::DecryptWriteBackend, I: rustic_core::index::IndexedBackend> rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>
pub fn rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::add(&mut self, item: rustic_core::archiver::tree::TreeType<(rustic_core::archiver::parent::ParentResult<()>, u64), rustic_core::archiver::parent::ParentResult<rustic_core::id::Id>>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::add_file(&mut self, path: &std::path::Path, node: rustic_core::backend::node::Node, parent: &rustic_core::archiver::parent::ParentResult<()>, size: u64)
pub fn rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::backup_tree(&mut self, path: &std::path::Path, parent: &rustic_core::archiver::parent::ParentResult<rustic_core::id::Id>) -> rustic_core::error::RusticResult<rustic_core::id::Id>
pub fn rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::finalize(self, parent_tree: core::option::Option<rustic_core::id::Id>) -> rustic_core::error::RusticResult<(rustic_core::id::Id, rustic_core::repofile::snapshotfile::SnapshotSummary)>
pub fn rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::new(be: BE, index: I, indexer: alloc::sync::Arc<std::sync::rwlock::RwLock<rustic_core::index::indexer::Indexer<BE>>>, config: &rustic_core::repofile::configfile::ConfigFile, summary: rustic_core::repofile::snapshotfile::SnapshotSummary) -> rustic_core::error::RusticResult<Self>
impl<BE, I> core::marker::Send for rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>
impl<BE, I> core::marker::Sync for rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>
impl<BE, I> core::marker::Unpin for rustic_core::archiver::tree_archiver::TreeArchiver<BE, I> where I: core::marker::Unpin
impl<BE, I> core::panic::unwind_safe::RefUnwindSafe for rustic_core::archiver::tree_archiver::TreeArchiver<BE, I> where I: core::panic::unwind_safe::RefUnwindSafe
impl<BE, I> core::panic::unwind_safe::UnwindSafe for rustic_core::archiver::tree_archiver::TreeArchiver<BE, I> where I: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::archiver::tree_archiver::TreeArchiver<BE, I> where U: core::convert::From<T>
pub fn rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::archiver::tree_archiver::TreeArchiver<BE, I> where U: core::convert::Into<T>
pub type rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::Error = core::convert::Infallible
pub fn rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::archiver::tree_archiver::TreeArchiver<BE, I> where U: core::convert::TryFrom<T>
pub type rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::archiver::tree_archiver::TreeArchiver<BE, I> where T: 'static + core::marker::Sized
pub fn rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::archiver::tree_archiver::TreeArchiver<BE, I> where T: core::marker::Sized
pub fn rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::archiver::tree_archiver::TreeArchiver<BE, I> where T: core::marker::Sized
pub fn rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>
pub fn rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>
pub type rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::Init = T
pub const rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::ALIGN: usize
pub unsafe fn rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::drop(ptr: usize)
pub unsafe fn rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>
impl<T> tracing::instrument::WithSubscriber for rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>
impl<T> typenum::type_operators::Same<T> for rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>
pub type rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::archiver::tree_archiver::TreeArchiver<BE, I> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>::vzip(self) -> V
pub type rustic_core::archiver::tree_archiver::TreeItem = rustic_core::archiver::tree::TreeType<(rustic_core::archiver::parent::ParentResult<()>, u64), rustic_core::archiver::parent::ParentResult<rustic_core::id::Id>>
pub struct rustic_core::archiver::Archiver<BE: rustic_core::backend::decrypt::DecryptWriteBackend, I: rustic_core::index::IndexedBackend>
pub rustic_core::archiver::Archiver::be: BE
pub rustic_core::archiver::Archiver::file_archiver: rustic_core::archiver::file_archiver::FileArchiver<BE, I>
pub rustic_core::archiver::Archiver::indexer: alloc::sync::Arc<std::sync::rwlock::RwLock<rustic_core::index::indexer::Indexer<BE>>>
pub rustic_core::archiver::Archiver::parent: rustic_core::archiver::parent::Parent
pub rustic_core::archiver::Archiver::snap: rustic_core::repofile::snapshotfile::SnapshotFile
pub rustic_core::archiver::Archiver::tree_archiver: rustic_core::archiver::tree_archiver::TreeArchiver<BE, I>
impl<BE: rustic_core::backend::decrypt::DecryptWriteBackend, I: rustic_core::index::IndexedBackend> rustic_core::archiver::Archiver<BE, I>
pub fn rustic_core::archiver::Archiver<BE, I>::archive<R>(self, index: &I, src: R, backup_path: &std::path::Path, as_path: core::option::Option<&std::path::PathBuf>, p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<rustic_core::repofile::snapshotfile::SnapshotFile> where R: rustic_core::backend::ReadSource + 'static, <R as rustic_core::backend::ReadSource>::Open: core::marker::Send, <R as rustic_core::backend::ReadSource>::Iter: core::marker::Send
pub fn rustic_core::archiver::Archiver<BE, I>::new(be: BE, index: I, config: &rustic_core::repofile::configfile::ConfigFile, parent: rustic_core::archiver::parent::Parent, snap: rustic_core::repofile::snapshotfile::SnapshotFile) -> rustic_core::error::RusticResult<Self>
impl<BE, I> core::marker::Send for rustic_core::archiver::Archiver<BE, I>
impl<BE, I> core::marker::Sync for rustic_core::archiver::Archiver<BE, I>
impl<BE, I> core::marker::Unpin for rustic_core::archiver::Archiver<BE, I> where BE: core::marker::Unpin, I: core::marker::Unpin
impl<BE, I> core::panic::unwind_safe::RefUnwindSafe for rustic_core::archiver::Archiver<BE, I> where BE: core::panic::unwind_safe::RefUnwindSafe, I: core::panic::unwind_safe::RefUnwindSafe
impl<BE, I> core::panic::unwind_safe::UnwindSafe for rustic_core::archiver::Archiver<BE, I> where BE: core::panic::unwind_safe::UnwindSafe, I: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::archiver::Archiver<BE, I> where U: core::convert::From<T>
pub fn rustic_core::archiver::Archiver<BE, I>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::archiver::Archiver<BE, I> where U: core::convert::Into<T>
pub type rustic_core::archiver::Archiver<BE, I>::Error = core::convert::Infallible
pub fn rustic_core::archiver::Archiver<BE, I>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::archiver::Archiver<BE, I> where U: core::convert::TryFrom<T>
pub type rustic_core::archiver::Archiver<BE, I>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::archiver::Archiver<BE, I>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::archiver::Archiver<BE, I> where T: 'static + core::marker::Sized
pub fn rustic_core::archiver::Archiver<BE, I>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::archiver::Archiver<BE, I> where T: core::marker::Sized
pub fn rustic_core::archiver::Archiver<BE, I>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::archiver::Archiver<BE, I> where T: core::marker::Sized
pub fn rustic_core::archiver::Archiver<BE, I>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::archiver::Archiver<BE, I>
pub fn rustic_core::archiver::Archiver<BE, I>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::archiver::Archiver<BE, I>
pub type rustic_core::archiver::Archiver<BE, I>::Init = T
pub const rustic_core::archiver::Archiver<BE, I>::ALIGN: usize
pub unsafe fn rustic_core::archiver::Archiver<BE, I>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::archiver::Archiver<BE, I>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::archiver::Archiver<BE, I>::drop(ptr: usize)
pub unsafe fn rustic_core::archiver::Archiver<BE, I>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::archiver::Archiver<BE, I>
impl<T> tracing::instrument::WithSubscriber for rustic_core::archiver::Archiver<BE, I>
impl<T> typenum::type_operators::Same<T> for rustic_core::archiver::Archiver<BE, I>
pub type rustic_core::archiver::Archiver<BE, I>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::archiver::Archiver<BE, I> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::archiver::Archiver<BE, I>::vzip(self) -> V
pub mod rustic_core::backend
pub mod rustic_core::backend::cache
pub struct rustic_core::backend::cache::Cache
pub rustic_core::backend::cache::Cache::path: std::path::PathBuf
impl rustic_core::backend::cache::Cache
pub fn rustic_core::backend::cache::Cache::dir(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> std::path::PathBuf
pub fn rustic_core::backend::cache::Cache::list_with_size(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<std::collections::hash::map::HashMap<rustic_core::id::Id, u32>>
pub fn rustic_core::backend::cache::Cache::location(&self) -> &str
pub fn rustic_core::backend::cache::Cache::new(id: rustic_core::id::Id, path: core::option::Option<std::path::PathBuf>) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::backend::cache::Cache::path(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> std::path::PathBuf
pub fn rustic_core::backend::cache::Cache::read_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::cache::Cache::read_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, offset: u32, length: u32) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::cache::Cache::remove(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::cache::Cache::remove_not_in_list(&self, tpe: rustic_core::backend::FileType, list: &alloc::vec::Vec<(rustic_core::id::Id, u32)>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::cache::Cache::write_bytes(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, buf: bytes::bytes::Bytes) -> rustic_core::error::RusticResult<()>
impl core::clone::Clone for rustic_core::backend::cache::Cache
pub fn rustic_core::backend::cache::Cache::clone(&self) -> rustic_core::backend::cache::Cache
impl core::fmt::Debug for rustic_core::backend::cache::Cache
pub fn rustic_core::backend::cache::Cache::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::backend::cache::Cache
impl core::marker::Sync for rustic_core::backend::cache::Cache
impl core::marker::Unpin for rustic_core::backend::cache::Cache
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::cache::Cache
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::cache::Cache
impl<T, U> core::convert::Into<U> for rustic_core::backend::cache::Cache where U: core::convert::From<T>
pub fn rustic_core::backend::cache::Cache::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::cache::Cache where U: core::convert::Into<T>
pub type rustic_core::backend::cache::Cache::Error = core::convert::Infallible
pub fn rustic_core::backend::cache::Cache::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::cache::Cache where U: core::convert::TryFrom<T>
pub type rustic_core::backend::cache::Cache::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::cache::Cache::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::cache::Cache where T: core::clone::Clone
pub type rustic_core::backend::cache::Cache::Owned = T
pub fn rustic_core::backend::cache::Cache::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::cache::Cache::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::cache::Cache where T: 'static + core::marker::Sized
pub fn rustic_core::backend::cache::Cache::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::cache::Cache where T: core::marker::Sized
pub fn rustic_core::backend::cache::Cache::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::cache::Cache where T: core::marker::Sized
pub fn rustic_core::backend::cache::Cache::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::cache::Cache
pub fn rustic_core::backend::cache::Cache::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::cache::Cache
pub type rustic_core::backend::cache::Cache::Init = T
pub const rustic_core::backend::cache::Cache::ALIGN: usize
pub unsafe fn rustic_core::backend::cache::Cache::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::cache::Cache::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::cache::Cache::drop(ptr: usize)
pub unsafe fn rustic_core::backend::cache::Cache::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::backend::cache::Cache
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::cache::Cache
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::cache::Cache
pub type rustic_core::backend::cache::Cache::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::cache::Cache where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::cache::Cache::vzip(self) -> V
pub struct rustic_core::backend::cache::CachedBackend<BE: rustic_core::backend::WriteBackend>
pub rustic_core::backend::cache::CachedBackend::be: BE
pub rustic_core::backend::cache::CachedBackend::cache: core::option::Option<rustic_core::backend::cache::Cache>
impl<BE: rustic_core::backend::WriteBackend> rustic_core::backend::cache::CachedBackend<BE>
pub fn rustic_core::backend::cache::CachedBackend<BE>::new(be: BE, cache: core::option::Option<rustic_core::backend::cache::Cache>) -> Self
impl<BE: rustic_core::backend::WriteBackend> rustic_core::backend::ReadBackend for rustic_core::backend::cache::CachedBackend<BE>
pub fn rustic_core::backend::cache::CachedBackend<BE>::list_with_size(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::id::Id, u32)>>
pub fn rustic_core::backend::cache::CachedBackend<BE>::location(&self) -> alloc::string::String
pub fn rustic_core::backend::cache::CachedBackend<BE>::read_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::cache::CachedBackend<BE>::read_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, offset: u32, length: u32) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::cache::CachedBackend<BE>::set_option(&mut self, option: &str, value: &str) -> rustic_core::error::RusticResult<()>
impl<BE: rustic_core::backend::WriteBackend> rustic_core::backend::WriteBackend for rustic_core::backend::cache::CachedBackend<BE>
pub fn rustic_core::backend::cache::CachedBackend<BE>::create(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::cache::CachedBackend<BE>::remove(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::cache::CachedBackend<BE>::write_bytes(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> rustic_core::error::RusticResult<()>
impl<BE: core::clone::Clone + rustic_core::backend::WriteBackend> core::clone::Clone for rustic_core::backend::cache::CachedBackend<BE>
pub fn rustic_core::backend::cache::CachedBackend<BE>::clone(&self) -> rustic_core::backend::cache::CachedBackend<BE>
impl<BE: core::fmt::Debug + rustic_core::backend::WriteBackend> core::fmt::Debug for rustic_core::backend::cache::CachedBackend<BE>
pub fn rustic_core::backend::cache::CachedBackend<BE>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<BE> core::marker::Send for rustic_core::backend::cache::CachedBackend<BE>
impl<BE> core::marker::Sync for rustic_core::backend::cache::CachedBackend<BE>
impl<BE> core::marker::Unpin for rustic_core::backend::cache::CachedBackend<BE> where BE: core::marker::Unpin
impl<BE> core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::cache::CachedBackend<BE> where BE: core::panic::unwind_safe::RefUnwindSafe
impl<BE> core::panic::unwind_safe::UnwindSafe for rustic_core::backend::cache::CachedBackend<BE> where BE: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::backend::cache::CachedBackend<BE> where U: core::convert::From<T>
pub fn rustic_core::backend::cache::CachedBackend<BE>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::cache::CachedBackend<BE> where U: core::convert::Into<T>
pub type rustic_core::backend::cache::CachedBackend<BE>::Error = core::convert::Infallible
pub fn rustic_core::backend::cache::CachedBackend<BE>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::cache::CachedBackend<BE> where U: core::convert::TryFrom<T>
pub type rustic_core::backend::cache::CachedBackend<BE>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::cache::CachedBackend<BE>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::cache::CachedBackend<BE> where T: core::clone::Clone
pub type rustic_core::backend::cache::CachedBackend<BE>::Owned = T
pub fn rustic_core::backend::cache::CachedBackend<BE>::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::cache::CachedBackend<BE>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::cache::CachedBackend<BE> where T: 'static + core::marker::Sized
pub fn rustic_core::backend::cache::CachedBackend<BE>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::cache::CachedBackend<BE> where T: core::marker::Sized
pub fn rustic_core::backend::cache::CachedBackend<BE>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::cache::CachedBackend<BE> where T: core::marker::Sized
pub fn rustic_core::backend::cache::CachedBackend<BE>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::cache::CachedBackend<BE>
pub fn rustic_core::backend::cache::CachedBackend<BE>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::cache::CachedBackend<BE>
pub type rustic_core::backend::cache::CachedBackend<BE>::Init = T
pub const rustic_core::backend::cache::CachedBackend<BE>::ALIGN: usize
pub unsafe fn rustic_core::backend::cache::CachedBackend<BE>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::cache::CachedBackend<BE>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::cache::CachedBackend<BE>::drop(ptr: usize)
pub unsafe fn rustic_core::backend::cache::CachedBackend<BE>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::backend::cache::CachedBackend<BE>
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::cache::CachedBackend<BE>
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::cache::CachedBackend<BE>
pub type rustic_core::backend::cache::CachedBackend<BE>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::cache::CachedBackend<BE> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::cache::CachedBackend<BE>::vzip(self) -> V
pub mod rustic_core::backend::choose
pub enum rustic_core::backend::choose::ChooseBackend
pub rustic_core::backend::choose::ChooseBackend::Local(rustic_core::backend::local::LocalBackend)
pub rustic_core::backend::choose::ChooseBackend::Rclone(rustic_core::backend::rclone::RcloneBackend)
pub rustic_core::backend::choose::ChooseBackend::Rest(rustic_core::backend::rest::RestBackend)
impl rustic_core::backend::choose::ChooseBackend
pub fn rustic_core::backend::choose::ChooseBackend::from_url(url: &str) -> rustic_core::error::RusticResult<Self>
impl rustic_core::backend::ReadBackend for rustic_core::backend::choose::ChooseBackend
pub fn rustic_core::backend::choose::ChooseBackend::list_with_size(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::id::Id, u32)>>
pub fn rustic_core::backend::choose::ChooseBackend::location(&self) -> alloc::string::String
pub fn rustic_core::backend::choose::ChooseBackend::read_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::choose::ChooseBackend::read_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, offset: u32, length: u32) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::choose::ChooseBackend::set_option(&mut self, option: &str, value: &str) -> rustic_core::error::RusticResult<()>
impl rustic_core::backend::WriteBackend for rustic_core::backend::choose::ChooseBackend
pub fn rustic_core::backend::choose::ChooseBackend::create(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::choose::ChooseBackend::remove(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::choose::ChooseBackend::write_bytes(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> rustic_core::error::RusticResult<()>
impl core::clone::Clone for rustic_core::backend::choose::ChooseBackend
pub fn rustic_core::backend::choose::ChooseBackend::clone(&self) -> rustic_core::backend::choose::ChooseBackend
impl core::fmt::Debug for rustic_core::backend::choose::ChooseBackend
pub fn rustic_core::backend::choose::ChooseBackend::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::backend::choose::ChooseBackend
impl core::marker::Sync for rustic_core::backend::choose::ChooseBackend
impl core::marker::Unpin for rustic_core::backend::choose::ChooseBackend
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::choose::ChooseBackend
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::backend::choose::ChooseBackend
impl<T, U> core::convert::Into<U> for rustic_core::backend::choose::ChooseBackend where U: core::convert::From<T>
pub fn rustic_core::backend::choose::ChooseBackend::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::choose::ChooseBackend where U: core::convert::Into<T>
pub type rustic_core::backend::choose::ChooseBackend::Error = core::convert::Infallible
pub fn rustic_core::backend::choose::ChooseBackend::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::choose::ChooseBackend where U: core::convert::TryFrom<T>
pub type rustic_core::backend::choose::ChooseBackend::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::choose::ChooseBackend::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::choose::ChooseBackend where T: core::clone::Clone
pub type rustic_core::backend::choose::ChooseBackend::Owned = T
pub fn rustic_core::backend::choose::ChooseBackend::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::choose::ChooseBackend::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::choose::ChooseBackend where T: 'static + core::marker::Sized
pub fn rustic_core::backend::choose::ChooseBackend::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::choose::ChooseBackend where T: core::marker::Sized
pub fn rustic_core::backend::choose::ChooseBackend::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::choose::ChooseBackend where T: core::marker::Sized
pub fn rustic_core::backend::choose::ChooseBackend::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::choose::ChooseBackend
pub fn rustic_core::backend::choose::ChooseBackend::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::choose::ChooseBackend
pub type rustic_core::backend::choose::ChooseBackend::Init = T
pub const rustic_core::backend::choose::ChooseBackend::ALIGN: usize
pub unsafe fn rustic_core::backend::choose::ChooseBackend::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::choose::ChooseBackend::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::choose::ChooseBackend::drop(ptr: usize)
pub unsafe fn rustic_core::backend::choose::ChooseBackend::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::backend::choose::ChooseBackend
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::choose::ChooseBackend
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::choose::ChooseBackend
pub type rustic_core::backend::choose::ChooseBackend::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::choose::ChooseBackend where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::choose::ChooseBackend::vzip(self) -> V
pub mod rustic_core::backend::decrypt
pub use rustic_core::backend::decrypt::compression_level_range
pub struct rustic_core::backend::decrypt::DecryptBackend<R, C>
pub rustic_core::backend::decrypt::DecryptBackend::backend: R
pub rustic_core::backend::decrypt::DecryptBackend::key: C
pub rustic_core::backend::decrypt::DecryptBackend::zstd: core::option::Option<i32>
impl<R: rustic_core::backend::ReadBackend, C: rustic_core::crypto::CryptoKey> rustic_core::backend::decrypt::DecryptBackend<R, C>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::new(be: &R, key: C) -> Self
impl<R: rustic_core::backend::ReadBackend, C: rustic_core::crypto::CryptoKey> rustic_core::backend::ReadBackend for rustic_core::backend::decrypt::DecryptBackend<R, C>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::list(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<rustic_core::id::Id>>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::list_with_size(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::id::Id, u32)>>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::location(&self) -> alloc::string::String
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::read_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::read_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, offset: u32, length: u32) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::set_option(&mut self, option: &str, value: &str) -> rustic_core::error::RusticResult<()>
impl<R: rustic_core::backend::ReadBackend, C: rustic_core::crypto::CryptoKey> rustic_core::backend::decrypt::DecryptReadBackend for rustic_core::backend::decrypt::DecryptBackend<R, C>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::decrypt(&self, data: &[u8]) -> rustic_core::error::RusticResult<alloc::vec::Vec<u8>>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::read_encrypted_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
impl<R: rustic_core::backend::WriteBackend, C: rustic_core::crypto::CryptoKey> rustic_core::backend::WriteBackend for rustic_core::backend::decrypt::DecryptBackend<R, C>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::create(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::remove(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::write_bytes(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> rustic_core::error::RusticResult<()>
impl<R: rustic_core::backend::WriteBackend, C: rustic_core::crypto::CryptoKey> rustic_core::backend::decrypt::DecryptWriteBackend for rustic_core::backend::decrypt::DecryptBackend<R, C>
pub type rustic_core::backend::decrypt::DecryptBackend<R, C>::Key = C
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::hash_write_full(&self, tpe: rustic_core::backend::FileType, data: &[u8]) -> rustic_core::error::RusticResult<rustic_core::id::Id>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::key(&self) -> &Self::Key
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::set_zstd(&mut self, zstd: core::option::Option<i32>)
impl<R: core::clone::Clone, C: core::clone::Clone> core::clone::Clone for rustic_core::backend::decrypt::DecryptBackend<R, C>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::clone(&self) -> rustic_core::backend::decrypt::DecryptBackend<R, C>
impl<R: core::fmt::Debug, C: core::fmt::Debug> core::fmt::Debug for rustic_core::backend::decrypt::DecryptBackend<R, C>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<R, C> core::marker::Send for rustic_core::backend::decrypt::DecryptBackend<R, C> where C: core::marker::Send, R: core::marker::Send
impl<R, C> core::marker::Sync for rustic_core::backend::decrypt::DecryptBackend<R, C> where C: core::marker::Sync, R: core::marker::Sync
impl<R, C> core::marker::Unpin for rustic_core::backend::decrypt::DecryptBackend<R, C> where C: core::marker::Unpin, R: core::marker::Unpin
impl<R, C> core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::decrypt::DecryptBackend<R, C> where C: core::panic::unwind_safe::RefUnwindSafe, R: core::panic::unwind_safe::RefUnwindSafe
impl<R, C> core::panic::unwind_safe::UnwindSafe for rustic_core::backend::decrypt::DecryptBackend<R, C> where C: core::panic::unwind_safe::UnwindSafe, R: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::backend::decrypt::DecryptBackend<R, C> where U: core::convert::From<T>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::decrypt::DecryptBackend<R, C> where U: core::convert::Into<T>
pub type rustic_core::backend::decrypt::DecryptBackend<R, C>::Error = core::convert::Infallible
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::decrypt::DecryptBackend<R, C> where U: core::convert::TryFrom<T>
pub type rustic_core::backend::decrypt::DecryptBackend<R, C>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::decrypt::DecryptBackend<R, C> where T: core::clone::Clone
pub type rustic_core::backend::decrypt::DecryptBackend<R, C>::Owned = T
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::decrypt::DecryptBackend<R, C> where T: 'static + core::marker::Sized
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::decrypt::DecryptBackend<R, C> where T: core::marker::Sized
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::decrypt::DecryptBackend<R, C> where T: core::marker::Sized
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::decrypt::DecryptBackend<R, C>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::decrypt::DecryptBackend<R, C>
pub type rustic_core::backend::decrypt::DecryptBackend<R, C>::Init = T
pub const rustic_core::backend::decrypt::DecryptBackend<R, C>::ALIGN: usize
pub unsafe fn rustic_core::backend::decrypt::DecryptBackend<R, C>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::decrypt::DecryptBackend<R, C>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::decrypt::DecryptBackend<R, C>::drop(ptr: usize)
pub unsafe fn rustic_core::backend::decrypt::DecryptBackend<R, C>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::backend::decrypt::DecryptBackend<R, C>
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::decrypt::DecryptBackend<R, C>
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::decrypt::DecryptBackend<R, C>
pub type rustic_core::backend::decrypt::DecryptBackend<R, C>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::decrypt::DecryptBackend<R, C> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::vzip(self) -> V
pub trait rustic_core::backend::decrypt::DecryptFullBackend: rustic_core::backend::decrypt::DecryptWriteBackend + rustic_core::backend::decrypt::DecryptReadBackend
impl<T: rustic_core::backend::decrypt::DecryptWriteBackend + rustic_core::backend::decrypt::DecryptReadBackend> rustic_core::backend::decrypt::DecryptFullBackend for T
pub trait rustic_core::backend::decrypt::DecryptReadBackend: rustic_core::backend::ReadBackend
pub fn rustic_core::backend::decrypt::DecryptReadBackend::decrypt(&self, data: &[u8]) -> rustic_core::error::RusticResult<alloc::vec::Vec<u8>>
pub fn rustic_core::backend::decrypt::DecryptReadBackend::get_file<F: rustic_core::repofile::RepoFile>(&self, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<F>
pub fn rustic_core::backend::decrypt::DecryptReadBackend::read_encrypted_from_partial(&self, data: &[u8], uncompressed_length: core::option::Option<core::num::nonzero::NonZeroU32>) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::decrypt::DecryptReadBackend::read_encrypted_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::decrypt::DecryptReadBackend::read_encrypted_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, offset: u32, length: u32, uncompressed_length: core::option::Option<core::num::nonzero::NonZeroU32>) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::decrypt::DecryptReadBackend::stream_all<F: rustic_core::repofile::RepoFile>(&self, p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<crossbeam_channel::channel::Receiver<rustic_core::error::RusticResult<(rustic_core::id::Id, F)>>>
pub fn rustic_core::backend::decrypt::DecryptReadBackend::stream_list<F: rustic_core::repofile::RepoFile>(&self, list: alloc::vec::Vec<rustic_core::id::Id>, p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<crossbeam_channel::channel::Receiver<rustic_core::error::RusticResult<(rustic_core::id::Id, F)>>>
impl<BE: rustic_core::backend::decrypt::DecryptFullBackend> rustic_core::backend::decrypt::DecryptReadBackend for rustic_core::backend::dry_run::DryRunBackend<BE>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::decrypt(&self, data: &[u8]) -> rustic_core::error::RusticResult<alloc::vec::Vec<u8>>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::read_encrypted_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
impl<R: rustic_core::backend::ReadBackend, C: rustic_core::crypto::CryptoKey> rustic_core::backend::decrypt::DecryptReadBackend for rustic_core::backend::decrypt::DecryptBackend<R, C>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::decrypt(&self, data: &[u8]) -> rustic_core::error::RusticResult<alloc::vec::Vec<u8>>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::read_encrypted_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub trait rustic_core::backend::decrypt::DecryptWriteBackend: rustic_core::backend::WriteBackend
pub type rustic_core::backend::decrypt::DecryptWriteBackend::Key: rustic_core::crypto::CryptoKey
pub fn rustic_core::backend::decrypt::DecryptWriteBackend::delete_list<'a, I: core::iter::traits::exact_size::ExactSizeIterator<Item = &'a rustic_core::id::Id> + core::marker::Send>(&self, tpe: rustic_core::backend::FileType, cacheable: bool, list: I, p: impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::decrypt::DecryptWriteBackend::hash_write_full(&self, tpe: rustic_core::backend::FileType, data: &[u8]) -> rustic_core::error::RusticResult<rustic_core::id::Id>
pub fn rustic_core::backend::decrypt::DecryptWriteBackend::key(&self) -> &Self::Key
pub fn rustic_core::backend::decrypt::DecryptWriteBackend::save_file<F: rustic_core::repofile::RepoFile>(&self, file: &F) -> rustic_core::error::RusticResult<rustic_core::id::Id>
pub fn rustic_core::backend::decrypt::DecryptWriteBackend::save_list<'a, F: rustic_core::repofile::RepoFile, I: core::iter::traits::exact_size::ExactSizeIterator<Item = &'a F> + core::marker::Send>(&self, list: I, p: impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::decrypt::DecryptWriteBackend::set_zstd(&mut self, zstd: core::option::Option<i32>)
impl<BE: rustic_core::backend::decrypt::DecryptFullBackend> rustic_core::backend::decrypt::DecryptWriteBackend for rustic_core::backend::dry_run::DryRunBackend<BE>
pub type rustic_core::backend::dry_run::DryRunBackend<BE>::Key = <BE as rustic_core::backend::decrypt::DecryptWriteBackend>::Key
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::hash_write_full(&self, tpe: rustic_core::backend::FileType, data: &[u8]) -> rustic_core::error::RusticResult<rustic_core::id::Id>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::key(&self) -> &Self::Key
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::set_zstd(&mut self, zstd: core::option::Option<i32>)
impl<R: rustic_core::backend::WriteBackend, C: rustic_core::crypto::CryptoKey> rustic_core::backend::decrypt::DecryptWriteBackend for rustic_core::backend::decrypt::DecryptBackend<R, C>
pub type rustic_core::backend::decrypt::DecryptBackend<R, C>::Key = C
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::hash_write_full(&self, tpe: rustic_core::backend::FileType, data: &[u8]) -> rustic_core::error::RusticResult<rustic_core::id::Id>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::key(&self) -> &Self::Key
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::set_zstd(&mut self, zstd: core::option::Option<i32>)
pub fn rustic_core::backend::decrypt::max_compression_level() -> i32
pub mod rustic_core::backend::dry_run
pub struct rustic_core::backend::dry_run::DryRunBackend<BE: rustic_core::backend::decrypt::DecryptFullBackend>
pub rustic_core::backend::dry_run::DryRunBackend::be: BE
pub rustic_core::backend::dry_run::DryRunBackend::dry_run: bool
impl<BE: rustic_core::backend::decrypt::DecryptFullBackend> rustic_core::backend::dry_run::DryRunBackend<BE>
pub const fn rustic_core::backend::dry_run::DryRunBackend<BE>::new(be: BE, dry_run: bool) -> Self
impl<BE: rustic_core::backend::decrypt::DecryptFullBackend> rustic_core::backend::ReadBackend for rustic_core::backend::dry_run::DryRunBackend<BE>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::list_with_size(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::id::Id, u32)>>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::location(&self) -> alloc::string::String
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::read_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::read_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, offset: u32, length: u32) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::set_option(&mut self, option: &str, value: &str) -> rustic_core::error::RusticResult<()>
impl<BE: rustic_core::backend::decrypt::DecryptFullBackend> rustic_core::backend::WriteBackend for rustic_core::backend::dry_run::DryRunBackend<BE>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::create(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::remove(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::write_bytes(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> rustic_core::error::RusticResult<()>
impl<BE: rustic_core::backend::decrypt::DecryptFullBackend> rustic_core::backend::decrypt::DecryptReadBackend for rustic_core::backend::dry_run::DryRunBackend<BE>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::decrypt(&self, data: &[u8]) -> rustic_core::error::RusticResult<alloc::vec::Vec<u8>>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::read_encrypted_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
impl<BE: rustic_core::backend::decrypt::DecryptFullBackend> rustic_core::backend::decrypt::DecryptWriteBackend for rustic_core::backend::dry_run::DryRunBackend<BE>
pub type rustic_core::backend::dry_run::DryRunBackend<BE>::Key = <BE as rustic_core::backend::decrypt::DecryptWriteBackend>::Key
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::hash_write_full(&self, tpe: rustic_core::backend::FileType, data: &[u8]) -> rustic_core::error::RusticResult<rustic_core::id::Id>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::key(&self) -> &Self::Key
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::set_zstd(&mut self, zstd: core::option::Option<i32>)
impl<BE: core::clone::Clone + rustic_core::backend::decrypt::DecryptFullBackend> core::clone::Clone for rustic_core::backend::dry_run::DryRunBackend<BE>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::clone(&self) -> rustic_core::backend::dry_run::DryRunBackend<BE>
impl<BE: core::fmt::Debug + rustic_core::backend::decrypt::DecryptFullBackend> core::fmt::Debug for rustic_core::backend::dry_run::DryRunBackend<BE>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<BE> core::marker::Send for rustic_core::backend::dry_run::DryRunBackend<BE>
impl<BE> core::marker::Sync for rustic_core::backend::dry_run::DryRunBackend<BE>
impl<BE> core::marker::Unpin for rustic_core::backend::dry_run::DryRunBackend<BE> where BE: core::marker::Unpin
impl<BE> core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::dry_run::DryRunBackend<BE> where BE: core::panic::unwind_safe::RefUnwindSafe
impl<BE> core::panic::unwind_safe::UnwindSafe for rustic_core::backend::dry_run::DryRunBackend<BE> where BE: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::backend::dry_run::DryRunBackend<BE> where U: core::convert::From<T>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::dry_run::DryRunBackend<BE> where U: core::convert::Into<T>
pub type rustic_core::backend::dry_run::DryRunBackend<BE>::Error = core::convert::Infallible
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::dry_run::DryRunBackend<BE> where U: core::convert::TryFrom<T>
pub type rustic_core::backend::dry_run::DryRunBackend<BE>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::dry_run::DryRunBackend<BE> where T: core::clone::Clone
pub type rustic_core::backend::dry_run::DryRunBackend<BE>::Owned = T
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::dry_run::DryRunBackend<BE> where T: 'static + core::marker::Sized
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::dry_run::DryRunBackend<BE> where T: core::marker::Sized
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::dry_run::DryRunBackend<BE> where T: core::marker::Sized
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::dry_run::DryRunBackend<BE>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::dry_run::DryRunBackend<BE>
pub type rustic_core::backend::dry_run::DryRunBackend<BE>::Init = T
pub const rustic_core::backend::dry_run::DryRunBackend<BE>::ALIGN: usize
pub unsafe fn rustic_core::backend::dry_run::DryRunBackend<BE>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::dry_run::DryRunBackend<BE>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::dry_run::DryRunBackend<BE>::drop(ptr: usize)
pub unsafe fn rustic_core::backend::dry_run::DryRunBackend<BE>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::backend::dry_run::DryRunBackend<BE>
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::dry_run::DryRunBackend<BE>
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::dry_run::DryRunBackend<BE>
pub type rustic_core::backend::dry_run::DryRunBackend<BE>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::dry_run::DryRunBackend<BE> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::vzip(self) -> V
pub mod rustic_core::backend::hotcold
pub struct rustic_core::backend::hotcold::HotColdBackend<BE: rustic_core::backend::WriteBackend>
pub rustic_core::backend::hotcold::HotColdBackend::be: BE
pub rustic_core::backend::hotcold::HotColdBackend::hot_be: core::option::Option<BE>
impl<BE: rustic_core::backend::WriteBackend> rustic_core::backend::hotcold::HotColdBackend<BE>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::new(be: BE, hot_be: core::option::Option<BE>) -> Self
impl<BE: rustic_core::backend::WriteBackend> rustic_core::backend::ReadBackend for rustic_core::backend::hotcold::HotColdBackend<BE>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::list_with_size(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::id::Id, u32)>>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::location(&self) -> alloc::string::String
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::read_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::read_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, offset: u32, length: u32) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::set_option(&mut self, option: &str, value: &str) -> rustic_core::error::RusticResult<()>
impl<BE: rustic_core::backend::WriteBackend> rustic_core::backend::WriteBackend for rustic_core::backend::hotcold::HotColdBackend<BE>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::create(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::remove(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::write_bytes(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> rustic_core::error::RusticResult<()>
impl<BE: core::clone::Clone + rustic_core::backend::WriteBackend> core::clone::Clone for rustic_core::backend::hotcold::HotColdBackend<BE>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::clone(&self) -> rustic_core::backend::hotcold::HotColdBackend<BE>
impl<BE: core::fmt::Debug + rustic_core::backend::WriteBackend> core::fmt::Debug for rustic_core::backend::hotcold::HotColdBackend<BE>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<BE> core::marker::Send for rustic_core::backend::hotcold::HotColdBackend<BE>
impl<BE> core::marker::Sync for rustic_core::backend::hotcold::HotColdBackend<BE>
impl<BE> core::marker::Unpin for rustic_core::backend::hotcold::HotColdBackend<BE> where BE: core::marker::Unpin
impl<BE> core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::hotcold::HotColdBackend<BE> where BE: core::panic::unwind_safe::RefUnwindSafe
impl<BE> core::panic::unwind_safe::UnwindSafe for rustic_core::backend::hotcold::HotColdBackend<BE> where BE: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::backend::hotcold::HotColdBackend<BE> where U: core::convert::From<T>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::hotcold::HotColdBackend<BE> where U: core::convert::Into<T>
pub type rustic_core::backend::hotcold::HotColdBackend<BE>::Error = core::convert::Infallible
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::hotcold::HotColdBackend<BE> where U: core::convert::TryFrom<T>
pub type rustic_core::backend::hotcold::HotColdBackend<BE>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::hotcold::HotColdBackend<BE> where T: core::clone::Clone
pub type rustic_core::backend::hotcold::HotColdBackend<BE>::Owned = T
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::hotcold::HotColdBackend<BE> where T: 'static + core::marker::Sized
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::hotcold::HotColdBackend<BE> where T: core::marker::Sized
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::hotcold::HotColdBackend<BE> where T: core::marker::Sized
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::hotcold::HotColdBackend<BE>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::hotcold::HotColdBackend<BE>
pub type rustic_core::backend::hotcold::HotColdBackend<BE>::Init = T
pub const rustic_core::backend::hotcold::HotColdBackend<BE>::ALIGN: usize
pub unsafe fn rustic_core::backend::hotcold::HotColdBackend<BE>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::hotcold::HotColdBackend<BE>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::hotcold::HotColdBackend<BE>::drop(ptr: usize)
pub unsafe fn rustic_core::backend::hotcold::HotColdBackend<BE>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::backend::hotcold::HotColdBackend<BE>
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::hotcold::HotColdBackend<BE>
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::hotcold::HotColdBackend<BE>
pub type rustic_core::backend::hotcold::HotColdBackend<BE>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::hotcold::HotColdBackend<BE> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::vzip(self) -> V
pub mod rustic_core::backend::ignore
pub struct rustic_core::backend::ignore::LocalSource
pub rustic_core::backend::ignore::LocalSource::builder: ignore::walk::WalkBuilder
pub rustic_core::backend::ignore::LocalSource::save_opts: rustic_core::backend::ignore::LocalSourceSaveOptions
pub rustic_core::backend::ignore::LocalSource::walker: ignore::walk::Walk
impl rustic_core::backend::ignore::LocalSource
pub fn rustic_core::backend::ignore::LocalSource::new(save_opts: rustic_core::backend::ignore::LocalSourceSaveOptions, filter_opts: &rustic_core::backend::ignore::LocalSourceFilterOptions, backup_paths: &[impl core::convert::AsRef<std::path::Path>]) -> rustic_core::error::RusticResult<Self>
impl core::iter::traits::iterator::Iterator for rustic_core::backend::ignore::LocalSource
pub type rustic_core::backend::ignore::LocalSource::Item = core::result::Result<rustic_core::backend::ReadSourceEntry<rustic_core::backend::ignore::OpenFile>, rustic_core::error::RusticError>
pub fn rustic_core::backend::ignore::LocalSource::next(&mut self) -> core::option::Option<Self::Item>
impl rustic_core::backend::ReadSource for rustic_core::backend::ignore::LocalSource
pub type rustic_core::backend::ignore::LocalSource::Iter = rustic_core::backend::ignore::LocalSource
pub type rustic_core::backend::ignore::LocalSource::Open = rustic_core::backend::ignore::OpenFile
pub fn rustic_core::backend::ignore::LocalSource::entries(self) -> Self::Iter
pub fn rustic_core::backend::ignore::LocalSource::size(&self) -> rustic_core::error::RusticResult<core::option::Option<u64>>
impl core::marker::Send for rustic_core::backend::ignore::LocalSource
impl core::marker::Sync for rustic_core::backend::ignore::LocalSource
impl core::marker::Unpin for rustic_core::backend::ignore::LocalSource
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::ignore::LocalSource
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::backend::ignore::LocalSource
impl<I> core::iter::traits::collect::IntoIterator for rustic_core::backend::ignore::LocalSource where I: core::iter::traits::iterator::Iterator
pub type rustic_core::backend::ignore::LocalSource::IntoIter = I
pub type rustic_core::backend::ignore::LocalSource::Item = <I as core::iter::traits::iterator::Iterator>::Item
pub fn rustic_core::backend::ignore::LocalSource::into_iter(self) -> I
impl<I> pariter::IteratorExt for rustic_core::backend::ignore::LocalSource where I: core::iter::traits::iterator::Iterator
impl<I> rand::seq::IteratorRandom for rustic_core::backend::ignore::LocalSource where I: core::iter::traits::iterator::Iterator
impl<T, U> core::convert::Into<U> for rustic_core::backend::ignore::LocalSource where U: core::convert::From<T>
pub fn rustic_core::backend::ignore::LocalSource::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::ignore::LocalSource where U: core::convert::Into<T>
pub type rustic_core::backend::ignore::LocalSource::Error = core::convert::Infallible
pub fn rustic_core::backend::ignore::LocalSource::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::ignore::LocalSource where U: core::convert::TryFrom<T>
pub type rustic_core::backend::ignore::LocalSource::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::ignore::LocalSource::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::backend::ignore::LocalSource where T: 'static + core::marker::Sized
pub fn rustic_core::backend::ignore::LocalSource::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::ignore::LocalSource where T: core::marker::Sized
pub fn rustic_core::backend::ignore::LocalSource::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::ignore::LocalSource where T: core::marker::Sized
pub fn rustic_core::backend::ignore::LocalSource::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::ignore::LocalSource
pub fn rustic_core::backend::ignore::LocalSource::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::ignore::LocalSource
pub type rustic_core::backend::ignore::LocalSource::Init = T
pub const rustic_core::backend::ignore::LocalSource::ALIGN: usize
pub unsafe fn rustic_core::backend::ignore::LocalSource::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::ignore::LocalSource::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::ignore::LocalSource::drop(ptr: usize)
pub unsafe fn rustic_core::backend::ignore::LocalSource::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> itertools::Itertools for rustic_core::backend::ignore::LocalSource where T: core::iter::traits::iterator::Iterator + core::marker::Sized
impl<T> rayon::iter::par_bridge::ParallelBridge for rustic_core::backend::ignore::LocalSource where T: core::iter::traits::iterator::Iterator + core::marker::Send, <T as core::iter::traits::iterator::Iterator>::Item: core::marker::Send
pub fn rustic_core::backend::ignore::LocalSource::par_bridge(self) -> rayon::iter::par_bridge::IterBridge<T>
impl<T> tracing::instrument::Instrument for rustic_core::backend::ignore::LocalSource
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::ignore::LocalSource
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::ignore::LocalSource
pub type rustic_core::backend::ignore::LocalSource::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::ignore::LocalSource where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::ignore::LocalSource::vzip(self) -> V
pub struct rustic_core::backend::ignore::LocalSourceFilterOptions
pub rustic_core::backend::ignore::LocalSourceFilterOptions::exclude_if_present: alloc::vec::Vec<alloc::string::String>
pub rustic_core::backend::ignore::LocalSourceFilterOptions::exclude_larger_than: core::option::Option<bytesize::ByteSize>
pub rustic_core::backend::ignore::LocalSourceFilterOptions::git_ignore: bool
pub rustic_core::backend::ignore::LocalSourceFilterOptions::glob: alloc::vec::Vec<alloc::string::String>
pub rustic_core::backend::ignore::LocalSourceFilterOptions::glob_file: alloc::vec::Vec<alloc::string::String>
pub rustic_core::backend::ignore::LocalSourceFilterOptions::iglob: alloc::vec::Vec<alloc::string::String>
pub rustic_core::backend::ignore::LocalSourceFilterOptions::iglob_file: alloc::vec::Vec<alloc::string::String>
pub rustic_core::backend::ignore::LocalSourceFilterOptions::no_require_git: bool
pub rustic_core::backend::ignore::LocalSourceFilterOptions::one_file_system: bool
impl rustic_core::backend::ignore::LocalSourceFilterOptions
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::exclude_if_present(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::exclude_larger_than(self, value: impl core::convert::Into<core::option::Option<bytesize::ByteSize>>) -> Self
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::git_ignore(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::glob(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::glob_file(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::iglob(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::iglob_file(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::no_require_git(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::one_file_system(self, value: impl core::convert::Into<bool>) -> Self
impl core::clone::Clone for rustic_core::backend::ignore::LocalSourceFilterOptions
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::clone(&self) -> rustic_core::backend::ignore::LocalSourceFilterOptions
impl core::default::Default for rustic_core::backend::ignore::LocalSourceFilterOptions
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::default() -> rustic_core::backend::ignore::LocalSourceFilterOptions
impl core::fmt::Debug for rustic_core::backend::ignore::LocalSourceFilterOptions
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::backend::ignore::LocalSourceFilterOptions
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::backend::ignore::LocalSourceFilterOptions where rustic_core::backend::ignore::LocalSourceFilterOptions: core::default::Default
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::backend::ignore::LocalSourceFilterOptions
impl core::marker::Sync for rustic_core::backend::ignore::LocalSourceFilterOptions
impl core::marker::Unpin for rustic_core::backend::ignore::LocalSourceFilterOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::ignore::LocalSourceFilterOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::ignore::LocalSourceFilterOptions
impl<T, U> core::convert::Into<U> for rustic_core::backend::ignore::LocalSourceFilterOptions where U: core::convert::From<T>
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::ignore::LocalSourceFilterOptions where U: core::convert::Into<T>
pub type rustic_core::backend::ignore::LocalSourceFilterOptions::Error = core::convert::Infallible
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::ignore::LocalSourceFilterOptions where U: core::convert::TryFrom<T>
pub type rustic_core::backend::ignore::LocalSourceFilterOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::ignore::LocalSourceFilterOptions where T: core::clone::Clone
pub type rustic_core::backend::ignore::LocalSourceFilterOptions::Owned = T
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::ignore::LocalSourceFilterOptions where T: 'static + core::marker::Sized
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::ignore::LocalSourceFilterOptions where T: core::marker::Sized
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::ignore::LocalSourceFilterOptions where T: core::marker::Sized
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::ignore::LocalSourceFilterOptions
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::ignore::LocalSourceFilterOptions
pub type rustic_core::backend::ignore::LocalSourceFilterOptions::Init = T
pub const rustic_core::backend::ignore::LocalSourceFilterOptions::ALIGN: usize
pub unsafe fn rustic_core::backend::ignore::LocalSourceFilterOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::ignore::LocalSourceFilterOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::ignore::LocalSourceFilterOptions::drop(ptr: usize)
pub unsafe fn rustic_core::backend::ignore::LocalSourceFilterOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::backend::ignore::LocalSourceFilterOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::backend::ignore::LocalSourceFilterOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::ignore::LocalSourceFilterOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::ignore::LocalSourceFilterOptions
pub type rustic_core::backend::ignore::LocalSourceFilterOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::ignore::LocalSourceFilterOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::vzip(self) -> V
pub struct rustic_core::backend::ignore::LocalSourceSaveOptions
pub rustic_core::backend::ignore::LocalSourceSaveOptions::ignore_devid: bool
pub rustic_core::backend::ignore::LocalSourceSaveOptions::with_atime: bool
impl rustic_core::backend::ignore::LocalSourceSaveOptions
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::ignore_devid(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::with_atime(self, value: impl core::convert::Into<bool>) -> Self
impl core::clone::Clone for rustic_core::backend::ignore::LocalSourceSaveOptions
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::clone(&self) -> rustic_core::backend::ignore::LocalSourceSaveOptions
impl core::default::Default for rustic_core::backend::ignore::LocalSourceSaveOptions
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::default() -> rustic_core::backend::ignore::LocalSourceSaveOptions
impl core::fmt::Debug for rustic_core::backend::ignore::LocalSourceSaveOptions
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::backend::ignore::LocalSourceSaveOptions
impl serde::ser::Serialize for rustic_core::backend::ignore::LocalSourceSaveOptions
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::backend::ignore::LocalSourceSaveOptions where rustic_core::backend::ignore::LocalSourceSaveOptions: core::default::Default
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::backend::ignore::LocalSourceSaveOptions
impl core::marker::Sync for rustic_core::backend::ignore::LocalSourceSaveOptions
impl core::marker::Unpin for rustic_core::backend::ignore::LocalSourceSaveOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::ignore::LocalSourceSaveOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::ignore::LocalSourceSaveOptions
impl<T, U> core::convert::Into<U> for rustic_core::backend::ignore::LocalSourceSaveOptions where U: core::convert::From<T>
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::ignore::LocalSourceSaveOptions where U: core::convert::Into<T>
pub type rustic_core::backend::ignore::LocalSourceSaveOptions::Error = core::convert::Infallible
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::ignore::LocalSourceSaveOptions where U: core::convert::TryFrom<T>
pub type rustic_core::backend::ignore::LocalSourceSaveOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::ignore::LocalSourceSaveOptions where T: core::clone::Clone
pub type rustic_core::backend::ignore::LocalSourceSaveOptions::Owned = T
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::ignore::LocalSourceSaveOptions where T: 'static + core::marker::Sized
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::ignore::LocalSourceSaveOptions where T: core::marker::Sized
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::ignore::LocalSourceSaveOptions where T: core::marker::Sized
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::ignore::LocalSourceSaveOptions
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::ignore::LocalSourceSaveOptions
pub type rustic_core::backend::ignore::LocalSourceSaveOptions::Init = T
pub const rustic_core::backend::ignore::LocalSourceSaveOptions::ALIGN: usize
pub unsafe fn rustic_core::backend::ignore::LocalSourceSaveOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::ignore::LocalSourceSaveOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::ignore::LocalSourceSaveOptions::drop(ptr: usize)
pub unsafe fn rustic_core::backend::ignore::LocalSourceSaveOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::backend::ignore::LocalSourceSaveOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::backend::ignore::LocalSourceSaveOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::ignore::LocalSourceSaveOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::ignore::LocalSourceSaveOptions
pub type rustic_core::backend::ignore::LocalSourceSaveOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::ignore::LocalSourceSaveOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::vzip(self) -> V
pub struct rustic_core::backend::ignore::OpenFile(pub std::path::PathBuf)
impl rustic_core::backend::ReadSourceOpen for rustic_core::backend::ignore::OpenFile
pub type rustic_core::backend::ignore::OpenFile::Reader = std::fs::File
pub fn rustic_core::backend::ignore::OpenFile::open(self) -> rustic_core::error::RusticResult<Self::Reader>
impl core::fmt::Debug for rustic_core::backend::ignore::OpenFile
pub fn rustic_core::backend::ignore::OpenFile::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::backend::ignore::OpenFile
impl core::marker::Sync for rustic_core::backend::ignore::OpenFile
impl core::marker::Unpin for rustic_core::backend::ignore::OpenFile
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::ignore::OpenFile
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::ignore::OpenFile
impl<T, U> core::convert::Into<U> for rustic_core::backend::ignore::OpenFile where U: core::convert::From<T>
pub fn rustic_core::backend::ignore::OpenFile::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::ignore::OpenFile where U: core::convert::Into<T>
pub type rustic_core::backend::ignore::OpenFile::Error = core::convert::Infallible
pub fn rustic_core::backend::ignore::OpenFile::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::ignore::OpenFile where U: core::convert::TryFrom<T>
pub type rustic_core::backend::ignore::OpenFile::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::ignore::OpenFile::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::backend::ignore::OpenFile where T: 'static + core::marker::Sized
pub fn rustic_core::backend::ignore::OpenFile::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::ignore::OpenFile where T: core::marker::Sized
pub fn rustic_core::backend::ignore::OpenFile::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::ignore::OpenFile where T: core::marker::Sized
pub fn rustic_core::backend::ignore::OpenFile::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::ignore::OpenFile
pub fn rustic_core::backend::ignore::OpenFile::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::ignore::OpenFile
pub type rustic_core::backend::ignore::OpenFile::Init = T
pub const rustic_core::backend::ignore::OpenFile::ALIGN: usize
pub unsafe fn rustic_core::backend::ignore::OpenFile::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::ignore::OpenFile::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::ignore::OpenFile::drop(ptr: usize)
pub unsafe fn rustic_core::backend::ignore::OpenFile::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::backend::ignore::OpenFile
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::ignore::OpenFile
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::ignore::OpenFile
pub type rustic_core::backend::ignore::OpenFile::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::ignore::OpenFile where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::ignore::OpenFile::vzip(self) -> V
pub fn rustic_core::backend::ignore::map_entry(entry: ignore::walk::DirEntry, with_atime: bool, _ignore_devid: bool) -> rustic_core::error::RusticResult<rustic_core::backend::ReadSourceEntry<rustic_core::backend::ignore::OpenFile>>
pub mod rustic_core::backend::local
pub struct rustic_core::backend::local::LocalBackend
pub rustic_core::backend::local::LocalBackend::path: std::path::PathBuf
pub rustic_core::backend::local::LocalBackend::post_create_command: core::option::Option<alloc::string::String>
pub rustic_core::backend::local::LocalBackend::post_delete_command: core::option::Option<alloc::string::String>
impl rustic_core::backend::local::LocalBackend
pub fn rustic_core::backend::local::LocalBackend::call_command(tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, filename: &std::path::Path, command: &str) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalBackend::new(path: &str) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::backend::local::LocalBackend::path(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> std::path::PathBuf
impl rustic_core::backend::ReadBackend for rustic_core::backend::local::LocalBackend
pub fn rustic_core::backend::local::LocalBackend::list(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<rustic_core::id::Id>>
pub fn rustic_core::backend::local::LocalBackend::list_with_size(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::id::Id, u32)>>
pub fn rustic_core::backend::local::LocalBackend::location(&self) -> alloc::string::String
pub fn rustic_core::backend::local::LocalBackend::read_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::local::LocalBackend::read_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, _cacheable: bool, offset: u32, length: u32) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::local::LocalBackend::set_option(&mut self, option: &str, value: &str) -> rustic_core::error::RusticResult<()>
impl rustic_core::backend::WriteBackend for rustic_core::backend::local::LocalBackend
pub fn rustic_core::backend::local::LocalBackend::create(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalBackend::remove(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, _cacheable: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalBackend::write_bytes(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, _cacheable: bool, buf: bytes::bytes::Bytes) -> rustic_core::error::RusticResult<()>
impl core::clone::Clone for rustic_core::backend::local::LocalBackend
pub fn rustic_core::backend::local::LocalBackend::clone(&self) -> rustic_core::backend::local::LocalBackend
impl core::fmt::Debug for rustic_core::backend::local::LocalBackend
pub fn rustic_core::backend::local::LocalBackend::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::backend::local::LocalBackend
impl core::marker::Sync for rustic_core::backend::local::LocalBackend
impl core::marker::Unpin for rustic_core::backend::local::LocalBackend
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::local::LocalBackend
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::local::LocalBackend
impl<T, U> core::convert::Into<U> for rustic_core::backend::local::LocalBackend where U: core::convert::From<T>
pub fn rustic_core::backend::local::LocalBackend::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::local::LocalBackend where U: core::convert::Into<T>
pub type rustic_core::backend::local::LocalBackend::Error = core::convert::Infallible
pub fn rustic_core::backend::local::LocalBackend::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::local::LocalBackend where U: core::convert::TryFrom<T>
pub type rustic_core::backend::local::LocalBackend::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::local::LocalBackend::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::local::LocalBackend where T: core::clone::Clone
pub type rustic_core::backend::local::LocalBackend::Owned = T
pub fn rustic_core::backend::local::LocalBackend::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::local::LocalBackend::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::local::LocalBackend where T: 'static + core::marker::Sized
pub fn rustic_core::backend::local::LocalBackend::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::local::LocalBackend where T: core::marker::Sized
pub fn rustic_core::backend::local::LocalBackend::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::local::LocalBackend where T: core::marker::Sized
pub fn rustic_core::backend::local::LocalBackend::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::local::LocalBackend
pub fn rustic_core::backend::local::LocalBackend::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::local::LocalBackend
pub type rustic_core::backend::local::LocalBackend::Init = T
pub const rustic_core::backend::local::LocalBackend::ALIGN: usize
pub unsafe fn rustic_core::backend::local::LocalBackend::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::local::LocalBackend::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::local::LocalBackend::drop(ptr: usize)
pub unsafe fn rustic_core::backend::local::LocalBackend::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::backend::local::LocalBackend
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::local::LocalBackend
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::local::LocalBackend
pub type rustic_core::backend::local::LocalBackend::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::local::LocalBackend where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::local::LocalBackend::vzip(self) -> V
pub struct rustic_core::backend::local::LocalDestination
pub rustic_core::backend::local::LocalDestination::is_file: bool
pub rustic_core::backend::local::LocalDestination::path: std::path::PathBuf
impl rustic_core::backend::local::LocalDestination
pub fn rustic_core::backend::local::LocalDestination::create_dir(&self, item: impl core::convert::AsRef<std::path::Path>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::create_special(&self, _item: impl core::convert::AsRef<std::path::Path>, _node: &rustic_core::backend::node::Node) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::get_matching_file(&self, item: impl core::convert::AsRef<std::path::Path>, size: u64) -> core::option::Option<std::fs::File>
pub fn rustic_core::backend::local::LocalDestination::new(path: &str, create: bool, expect_file: bool) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::backend::local::LocalDestination::path(&self, item: impl core::convert::AsRef<std::path::Path>) -> std::path::PathBuf
pub fn rustic_core::backend::local::LocalDestination::read_at(&self, item: impl core::convert::AsRef<std::path::Path>, offset: u64, length: u64) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::local::LocalDestination::remove_dir(&self, dirname: impl core::convert::AsRef<std::path::Path>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::remove_file(&self, filename: impl core::convert::AsRef<std::path::Path>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::set_extended_attributes(&self, _item: impl core::convert::AsRef<std::path::Path>, _extended_attributes: &[rustic_core::backend::node::ExtendedAttribute]) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::set_length(&self, item: impl core::convert::AsRef<std::path::Path>, size: u64) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::set_permission(&self, _item: impl core::convert::AsRef<std::path::Path>, _node: &rustic_core::backend::node::Node) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::set_times(&self, item: impl core::convert::AsRef<std::path::Path>, meta: &rustic_core::backend::node::Metadata) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::set_uid_gid(&self, _item: impl core::convert::AsRef<std::path::Path>, _meta: &rustic_core::backend::node::Metadata) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::set_user_group(&self, _item: impl core::convert::AsRef<std::path::Path>, _meta: &rustic_core::backend::node::Metadata) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::write_at(&self, item: impl core::convert::AsRef<std::path::Path>, offset: u64, data: &[u8]) -> rustic_core::error::RusticResult<()>
impl core::clone::Clone for rustic_core::backend::local::LocalDestination
pub fn rustic_core::backend::local::LocalDestination::clone(&self) -> rustic_core::backend::local::LocalDestination
impl core::fmt::Debug for rustic_core::backend::local::LocalDestination
pub fn rustic_core::backend::local::LocalDestination::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::backend::local::LocalDestination
impl core::marker::Sync for rustic_core::backend::local::LocalDestination
impl core::marker::Unpin for rustic_core::backend::local::LocalDestination
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::local::LocalDestination
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::local::LocalDestination
impl<T, U> core::convert::Into<U> for rustic_core::backend::local::LocalDestination where U: core::convert::From<T>
pub fn rustic_core::backend::local::LocalDestination::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::local::LocalDestination where U: core::convert::Into<T>
pub type rustic_core::backend::local::LocalDestination::Error = core::convert::Infallible
pub fn rustic_core::backend::local::LocalDestination::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::local::LocalDestination where U: core::convert::TryFrom<T>
pub type rustic_core::backend::local::LocalDestination::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::local::LocalDestination::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::local::LocalDestination where T: core::clone::Clone
pub type rustic_core::backend::local::LocalDestination::Owned = T
pub fn rustic_core::backend::local::LocalDestination::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::local::LocalDestination::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::local::LocalDestination where T: 'static + core::marker::Sized
pub fn rustic_core::backend::local::LocalDestination::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::local::LocalDestination where T: core::marker::Sized
pub fn rustic_core::backend::local::LocalDestination::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::local::LocalDestination where T: core::marker::Sized
pub fn rustic_core::backend::local::LocalDestination::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::local::LocalDestination
pub fn rustic_core::backend::local::LocalDestination::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::local::LocalDestination
pub type rustic_core::backend::local::LocalDestination::Init = T
pub const rustic_core::backend::local::LocalDestination::ALIGN: usize
pub unsafe fn rustic_core::backend::local::LocalDestination::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::local::LocalDestination::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::local::LocalDestination::drop(ptr: usize)
pub unsafe fn rustic_core::backend::local::LocalDestination::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::backend::local::LocalDestination
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::local::LocalDestination
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::local::LocalDestination
pub type rustic_core::backend::local::LocalDestination::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::local::LocalDestination where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::local::LocalDestination::vzip(self) -> V
pub mod rustic_core::backend::node
pub enum rustic_core::backend::node::NodeType
pub rustic_core::backend::node::NodeType::Chardev
pub rustic_core::backend::node::NodeType::Chardev::device: u64
pub rustic_core::backend::node::NodeType::Dev
pub rustic_core::backend::node::NodeType::Dev::device: u64
pub rustic_core::backend::node::NodeType::Dir
pub rustic_core::backend::node::NodeType::Fifo
pub rustic_core::backend::node::NodeType::File
pub rustic_core::backend::node::NodeType::Socket
pub rustic_core::backend::node::NodeType::Symlink
pub rustic_core::backend::node::NodeType::Symlink::linktarget: alloc::string::String
pub rustic_core::backend::node::NodeType::Symlink::linktarget_raw: core::option::Option<alloc::vec::Vec<u8>>
impl rustic_core::backend::node::NodeType
pub fn rustic_core::backend::node::NodeType::from_link(target: &std::path::Path) -> Self
pub fn rustic_core::backend::node::NodeType::to_link(&self) -> &std::path::Path
impl core::default::Default for rustic_core::backend::node::NodeType
pub fn rustic_core::backend::node::NodeType::default() -> Self
impl core::clone::Clone for rustic_core::backend::node::NodeType
pub fn rustic_core::backend::node::NodeType::clone(&self) -> rustic_core::backend::node::NodeType
impl core::cmp::Eq for rustic_core::backend::node::NodeType
impl core::cmp::PartialEq<rustic_core::backend::node::NodeType> for rustic_core::backend::node::NodeType
pub fn rustic_core::backend::node::NodeType::eq(&self, other: &rustic_core::backend::node::NodeType) -> bool
impl core::fmt::Debug for rustic_core::backend::node::NodeType
pub fn rustic_core::backend::node::NodeType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::backend::node::NodeType
impl core::marker::StructuralPartialEq for rustic_core::backend::node::NodeType
impl serde::ser::Serialize for rustic_core::backend::node::NodeType
pub fn rustic_core::backend::node::NodeType::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::backend::node::NodeType
pub fn rustic_core::backend::node::NodeType::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::backend::node::NodeType
impl core::marker::Sync for rustic_core::backend::node::NodeType
impl core::marker::Unpin for rustic_core::backend::node::NodeType
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::node::NodeType
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::node::NodeType
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::backend::node::NodeType where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::backend::node::NodeType::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::backend::node::NodeType where U: core::convert::From<T>
pub fn rustic_core::backend::node::NodeType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::node::NodeType where U: core::convert::Into<T>
pub type rustic_core::backend::node::NodeType::Error = core::convert::Infallible
pub fn rustic_core::backend::node::NodeType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::node::NodeType where U: core::convert::TryFrom<T>
pub type rustic_core::backend::node::NodeType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::node::NodeType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::node::NodeType where T: core::clone::Clone
pub type rustic_core::backend::node::NodeType::Owned = T
pub fn rustic_core::backend::node::NodeType::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::node::NodeType::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::node::NodeType where T: 'static + core::marker::Sized
pub fn rustic_core::backend::node::NodeType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::node::NodeType where T: core::marker::Sized
pub fn rustic_core::backend::node::NodeType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::node::NodeType where T: core::marker::Sized
pub fn rustic_core::backend::node::NodeType::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::node::NodeType
pub fn rustic_core::backend::node::NodeType::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::node::NodeType
pub type rustic_core::backend::node::NodeType::Init = T
pub const rustic_core::backend::node::NodeType::ALIGN: usize
pub unsafe fn rustic_core::backend::node::NodeType::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::node::NodeType::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::node::NodeType::drop(ptr: usize)
pub unsafe fn rustic_core::backend::node::NodeType::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::backend::node::NodeType where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::backend::node::NodeType
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::node::NodeType
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::node::NodeType
pub type rustic_core::backend::node::NodeType::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::node::NodeType where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::node::NodeType::vzip(self) -> V
pub struct rustic_core::backend::node::ExtendedAttribute
pub rustic_core::backend::node::ExtendedAttribute::name: alloc::string::String
pub rustic_core::backend::node::ExtendedAttribute::value: alloc::vec::Vec<u8>
impl core::clone::Clone for rustic_core::backend::node::ExtendedAttribute
pub fn rustic_core::backend::node::ExtendedAttribute::clone(&self) -> rustic_core::backend::node::ExtendedAttribute
impl core::cmp::Eq for rustic_core::backend::node::ExtendedAttribute
impl core::cmp::PartialEq<rustic_core::backend::node::ExtendedAttribute> for rustic_core::backend::node::ExtendedAttribute
pub fn rustic_core::backend::node::ExtendedAttribute::eq(&self, other: &rustic_core::backend::node::ExtendedAttribute) -> bool
impl core::fmt::Debug for rustic_core::backend::node::ExtendedAttribute
pub fn rustic_core::backend::node::ExtendedAttribute::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::backend::node::ExtendedAttribute
impl core::marker::StructuralPartialEq for rustic_core::backend::node::ExtendedAttribute
impl serde::ser::Serialize for rustic_core::backend::node::ExtendedAttribute
pub fn rustic_core::backend::node::ExtendedAttribute::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::backend::node::ExtendedAttribute
pub fn rustic_core::backend::node::ExtendedAttribute::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::backend::node::ExtendedAttribute
impl core::marker::Sync for rustic_core::backend::node::ExtendedAttribute
impl core::marker::Unpin for rustic_core::backend::node::ExtendedAttribute
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::node::ExtendedAttribute
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::node::ExtendedAttribute
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::backend::node::ExtendedAttribute where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::backend::node::ExtendedAttribute::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::backend::node::ExtendedAttribute where U: core::convert::From<T>
pub fn rustic_core::backend::node::ExtendedAttribute::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::node::ExtendedAttribute where U: core::convert::Into<T>
pub type rustic_core::backend::node::ExtendedAttribute::Error = core::convert::Infallible
pub fn rustic_core::backend::node::ExtendedAttribute::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::node::ExtendedAttribute where U: core::convert::TryFrom<T>
pub type rustic_core::backend::node::ExtendedAttribute::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::node::ExtendedAttribute::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::node::ExtendedAttribute where T: core::clone::Clone
pub type rustic_core::backend::node::ExtendedAttribute::Owned = T
pub fn rustic_core::backend::node::ExtendedAttribute::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::node::ExtendedAttribute::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::node::ExtendedAttribute where T: 'static + core::marker::Sized
pub fn rustic_core::backend::node::ExtendedAttribute::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::node::ExtendedAttribute where T: core::marker::Sized
pub fn rustic_core::backend::node::ExtendedAttribute::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::node::ExtendedAttribute where T: core::marker::Sized
pub fn rustic_core::backend::node::ExtendedAttribute::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::node::ExtendedAttribute
pub fn rustic_core::backend::node::ExtendedAttribute::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::node::ExtendedAttribute
pub type rustic_core::backend::node::ExtendedAttribute::Init = T
pub const rustic_core::backend::node::ExtendedAttribute::ALIGN: usize
pub unsafe fn rustic_core::backend::node::ExtendedAttribute::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::node::ExtendedAttribute::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::node::ExtendedAttribute::drop(ptr: usize)
pub unsafe fn rustic_core::backend::node::ExtendedAttribute::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::backend::node::ExtendedAttribute where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::backend::node::ExtendedAttribute
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::node::ExtendedAttribute
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::node::ExtendedAttribute
pub type rustic_core::backend::node::ExtendedAttribute::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::node::ExtendedAttribute where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::node::ExtendedAttribute::vzip(self) -> V
pub struct rustic_core::backend::node::Metadata
pub rustic_core::backend::node::Metadata::atime: core::option::Option<chrono::datetime::DateTime<chrono::offset::local::Local>>
pub rustic_core::backend::node::Metadata::ctime: core::option::Option<chrono::datetime::DateTime<chrono::offset::local::Local>>
pub rustic_core::backend::node::Metadata::device_id: u64
pub rustic_core::backend::node::Metadata::extended_attributes: alloc::vec::Vec<rustic_core::backend::node::ExtendedAttribute>
pub rustic_core::backend::node::Metadata::gid: core::option::Option<u32>
pub rustic_core::backend::node::Metadata::group: core::option::Option<alloc::string::String>
pub rustic_core::backend::node::Metadata::inode: u64
pub rustic_core::backend::node::Metadata::links: u64
pub rustic_core::backend::node::Metadata::mode: core::option::Option<u32>
pub rustic_core::backend::node::Metadata::mtime: core::option::Option<chrono::datetime::DateTime<chrono::offset::local::Local>>
pub rustic_core::backend::node::Metadata::size: u64
pub rustic_core::backend::node::Metadata::uid: core::option::Option<u32>
pub rustic_core::backend::node::Metadata::user: core::option::Option<alloc::string::String>
impl core::clone::Clone for rustic_core::backend::node::Metadata
pub fn rustic_core::backend::node::Metadata::clone(&self) -> rustic_core::backend::node::Metadata
impl core::cmp::Eq for rustic_core::backend::node::Metadata
impl core::cmp::PartialEq<rustic_core::backend::node::Metadata> for rustic_core::backend::node::Metadata
pub fn rustic_core::backend::node::Metadata::eq(&self, other: &rustic_core::backend::node::Metadata) -> bool
impl core::default::Default for rustic_core::backend::node::Metadata
pub fn rustic_core::backend::node::Metadata::default() -> rustic_core::backend::node::Metadata
impl core::fmt::Debug for rustic_core::backend::node::Metadata
pub fn rustic_core::backend::node::Metadata::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::backend::node::Metadata
impl core::marker::StructuralPartialEq for rustic_core::backend::node::Metadata
impl serde::ser::Serialize for rustic_core::backend::node::Metadata
pub fn rustic_core::backend::node::Metadata::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::backend::node::Metadata
pub fn rustic_core::backend::node::Metadata::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::backend::node::Metadata
impl core::marker::Sync for rustic_core::backend::node::Metadata
impl core::marker::Unpin for rustic_core::backend::node::Metadata
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::node::Metadata
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::node::Metadata
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::backend::node::Metadata where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::backend::node::Metadata::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::backend::node::Metadata where U: core::convert::From<T>
pub fn rustic_core::backend::node::Metadata::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::node::Metadata where U: core::convert::Into<T>
pub type rustic_core::backend::node::Metadata::Error = core::convert::Infallible
pub fn rustic_core::backend::node::Metadata::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::node::Metadata where U: core::convert::TryFrom<T>
pub type rustic_core::backend::node::Metadata::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::node::Metadata::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::node::Metadata where T: core::clone::Clone
pub type rustic_core::backend::node::Metadata::Owned = T
pub fn rustic_core::backend::node::Metadata::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::node::Metadata::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::node::Metadata where T: 'static + core::marker::Sized
pub fn rustic_core::backend::node::Metadata::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::node::Metadata where T: core::marker::Sized
pub fn rustic_core::backend::node::Metadata::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::node::Metadata where T: core::marker::Sized
pub fn rustic_core::backend::node::Metadata::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::node::Metadata
pub fn rustic_core::backend::node::Metadata::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::node::Metadata
pub type rustic_core::backend::node::Metadata::Init = T
pub const rustic_core::backend::node::Metadata::ALIGN: usize
pub unsafe fn rustic_core::backend::node::Metadata::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::node::Metadata::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::node::Metadata::drop(ptr: usize)
pub unsafe fn rustic_core::backend::node::Metadata::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::backend::node::Metadata where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::backend::node::Metadata
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::node::Metadata
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::node::Metadata
pub type rustic_core::backend::node::Metadata::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::node::Metadata where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::node::Metadata::vzip(self) -> V
pub struct rustic_core::backend::node::Node
pub rustic_core::backend::node::Node::content: core::option::Option<alloc::vec::Vec<rustic_core::id::Id>>
pub rustic_core::backend::node::Node::meta: rustic_core::backend::node::Metadata
pub rustic_core::backend::node::Node::name: alloc::string::String
pub rustic_core::backend::node::Node::node_type: rustic_core::backend::node::NodeType
pub rustic_core::backend::node::Node::subtree: core::option::Option<rustic_core::id::Id>
impl rustic_core::backend::node::Node
pub const fn rustic_core::backend::node::Node::is_dir(&self) -> bool
pub const fn rustic_core::backend::node::Node::is_file(&self) -> bool
pub const fn rustic_core::backend::node::Node::is_special(&self) -> bool
pub const fn rustic_core::backend::node::Node::is_symlink(&self) -> bool
pub fn rustic_core::backend::node::Node::name(&self) -> std::ffi::os_str::OsString
pub fn rustic_core::backend::node::Node::new_node(name: &std::ffi::os_str::OsStr, node_type: rustic_core::backend::node::NodeType, meta: rustic_core::backend::node::Metadata) -> Self
impl rustic_core::backend::node::Node
pub fn rustic_core::backend::node::Node::new(name: alloc::string::String, node_type: rustic_core::backend::node::NodeType, meta: rustic_core::backend::node::Metadata, content: core::option::Option<alloc::vec::Vec<rustic_core::id::Id>>, subtree: core::option::Option<rustic_core::id::Id>) -> rustic_core::backend::node::Node
impl core::clone::Clone for rustic_core::backend::node::Node
pub fn rustic_core::backend::node::Node::clone(&self) -> rustic_core::backend::node::Node
impl core::cmp::Eq for rustic_core::backend::node::Node
impl core::cmp::PartialEq<rustic_core::backend::node::Node> for rustic_core::backend::node::Node
pub fn rustic_core::backend::node::Node::eq(&self, other: &rustic_core::backend::node::Node) -> bool
impl core::default::Default for rustic_core::backend::node::Node
pub fn rustic_core::backend::node::Node::default() -> rustic_core::backend::node::Node
impl core::fmt::Debug for rustic_core::backend::node::Node
pub fn rustic_core::backend::node::Node::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::backend::node::Node
impl core::marker::StructuralPartialEq for rustic_core::backend::node::Node
impl serde::ser::Serialize for rustic_core::backend::node::Node
pub fn rustic_core::backend::node::Node::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::backend::node::Node
pub fn rustic_core::backend::node::Node::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::backend::node::Node
impl core::marker::Sync for rustic_core::backend::node::Node
impl core::marker::Unpin for rustic_core::backend::node::Node
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::node::Node
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::node::Node
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::backend::node::Node where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::backend::node::Node::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::backend::node::Node where U: core::convert::From<T>
pub fn rustic_core::backend::node::Node::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::node::Node where U: core::convert::Into<T>
pub type rustic_core::backend::node::Node::Error = core::convert::Infallible
pub fn rustic_core::backend::node::Node::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::node::Node where U: core::convert::TryFrom<T>
pub type rustic_core::backend::node::Node::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::node::Node::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::node::Node where T: core::clone::Clone
pub type rustic_core::backend::node::Node::Owned = T
pub fn rustic_core::backend::node::Node::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::node::Node::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::node::Node where T: 'static + core::marker::Sized
pub fn rustic_core::backend::node::Node::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::node::Node where T: core::marker::Sized
pub fn rustic_core::backend::node::Node::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::node::Node where T: core::marker::Sized
pub fn rustic_core::backend::node::Node::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::node::Node
pub fn rustic_core::backend::node::Node::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::node::Node
pub type rustic_core::backend::node::Node::Init = T
pub const rustic_core::backend::node::Node::ALIGN: usize
pub unsafe fn rustic_core::backend::node::Node::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::node::Node::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::node::Node::drop(ptr: usize)
pub unsafe fn rustic_core::backend::node::Node::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::backend::node::Node where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::backend::node::Node
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::node::Node
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::node::Node
pub type rustic_core::backend::node::Node::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::node::Node where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::node::Node::vzip(self) -> V
pub fn rustic_core::backend::node::deserialize_value<'de, D>(deserializer: D) -> core::result::Result<alloc::vec::Vec<u8>, <D as serde::de::Deserializer>::Error> where D: serde::de::Deserializer<'de>
pub fn rustic_core::backend::node::escape_filename(name: &std::ffi::os_str::OsStr) -> alloc::string::String
pub fn rustic_core::backend::node::is_default<T: core::default::Default + core::cmp::PartialEq>(t: &T) -> bool
pub fn rustic_core::backend::node::last_modified_node(n1: &rustic_core::backend::node::Node, n2: &rustic_core::backend::node::Node) -> core::cmp::Ordering
pub fn rustic_core::backend::node::unescape_filename(s: &str) -> core::result::Result<std::ffi::os_str::OsString, core::convert::Infallible>
pub mod rustic_core::backend::rclone
pub mod rustic_core::backend::rclone::constants
pub const rustic_core::backend::rclone::constants::SEARCHSTRING: &str
pub struct rustic_core::backend::rclone::ChildToKill(pub std::process::Child)
impl core::ops::drop::Drop for rustic_core::backend::rclone::ChildToKill
pub fn rustic_core::backend::rclone::ChildToKill::drop(&mut self)
impl core::fmt::Debug for rustic_core::backend::rclone::ChildToKill
pub fn rustic_core::backend::rclone::ChildToKill::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::backend::rclone::ChildToKill
impl core::marker::Sync for rustic_core::backend::rclone::ChildToKill
impl core::marker::Unpin for rustic_core::backend::rclone::ChildToKill
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::rclone::ChildToKill
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::rclone::ChildToKill
impl<T, U> core::convert::Into<U> for rustic_core::backend::rclone::ChildToKill where U: core::convert::From<T>
pub fn rustic_core::backend::rclone::ChildToKill::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::rclone::ChildToKill where U: core::convert::Into<T>
pub type rustic_core::backend::rclone::ChildToKill::Error = core::convert::Infallible
pub fn rustic_core::backend::rclone::ChildToKill::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::rclone::ChildToKill where U: core::convert::TryFrom<T>
pub type rustic_core::backend::rclone::ChildToKill::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::rclone::ChildToKill::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::backend::rclone::ChildToKill where T: 'static + core::marker::Sized
pub fn rustic_core::backend::rclone::ChildToKill::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::rclone::ChildToKill where T: core::marker::Sized
pub fn rustic_core::backend::rclone::ChildToKill::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::rclone::ChildToKill where T: core::marker::Sized
pub fn rustic_core::backend::rclone::ChildToKill::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::rclone::ChildToKill
pub fn rustic_core::backend::rclone::ChildToKill::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::rclone::ChildToKill
pub type rustic_core::backend::rclone::ChildToKill::Init = T
pub const rustic_core::backend::rclone::ChildToKill::ALIGN: usize
pub unsafe fn rustic_core::backend::rclone::ChildToKill::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::rclone::ChildToKill::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::rclone::ChildToKill::drop(ptr: usize)
pub unsafe fn rustic_core::backend::rclone::ChildToKill::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::backend::rclone::ChildToKill
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::rclone::ChildToKill
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::rclone::ChildToKill
pub type rustic_core::backend::rclone::ChildToKill::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::rclone::ChildToKill where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::rclone::ChildToKill::vzip(self) -> V
pub struct rustic_core::backend::rclone::RcloneBackend
pub rustic_core::backend::rclone::RcloneBackend::_child_data: alloc::sync::Arc<rustic_core::backend::rclone::ChildToKill>
pub rustic_core::backend::rclone::RcloneBackend::rest: rustic_core::backend::rest::RestBackend
pub rustic_core::backend::rclone::RcloneBackend::url: alloc::string::String
impl rustic_core::backend::rclone::RcloneBackend
pub fn rustic_core::backend::rclone::RcloneBackend::new(url: &str) -> rustic_core::error::RusticResult<Self>
impl rustic_core::backend::ReadBackend for rustic_core::backend::rclone::RcloneBackend
pub fn rustic_core::backend::rclone::RcloneBackend::list_with_size(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::id::Id, u32)>>
pub fn rustic_core::backend::rclone::RcloneBackend::location(&self) -> alloc::string::String
pub fn rustic_core::backend::rclone::RcloneBackend::read_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::rclone::RcloneBackend::read_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, offset: u32, length: u32) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::rclone::RcloneBackend::set_option(&mut self, option: &str, value: &str) -> rustic_core::error::RusticResult<()>
impl rustic_core::backend::WriteBackend for rustic_core::backend::rclone::RcloneBackend
pub fn rustic_core::backend::rclone::RcloneBackend::create(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::rclone::RcloneBackend::remove(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::rclone::RcloneBackend::write_bytes(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> rustic_core::error::RusticResult<()>
impl core::clone::Clone for rustic_core::backend::rclone::RcloneBackend
pub fn rustic_core::backend::rclone::RcloneBackend::clone(&self) -> rustic_core::backend::rclone::RcloneBackend
impl core::fmt::Debug for rustic_core::backend::rclone::RcloneBackend
pub fn rustic_core::backend::rclone::RcloneBackend::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::backend::rclone::RcloneBackend
impl core::marker::Sync for rustic_core::backend::rclone::RcloneBackend
impl core::marker::Unpin for rustic_core::backend::rclone::RcloneBackend
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::rclone::RcloneBackend
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::backend::rclone::RcloneBackend
impl<T, U> core::convert::Into<U> for rustic_core::backend::rclone::RcloneBackend where U: core::convert::From<T>
pub fn rustic_core::backend::rclone::RcloneBackend::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::rclone::RcloneBackend where U: core::convert::Into<T>
pub type rustic_core::backend::rclone::RcloneBackend::Error = core::convert::Infallible
pub fn rustic_core::backend::rclone::RcloneBackend::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::rclone::RcloneBackend where U: core::convert::TryFrom<T>
pub type rustic_core::backend::rclone::RcloneBackend::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::rclone::RcloneBackend::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::rclone::RcloneBackend where T: core::clone::Clone
pub type rustic_core::backend::rclone::RcloneBackend::Owned = T
pub fn rustic_core::backend::rclone::RcloneBackend::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::rclone::RcloneBackend::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::rclone::RcloneBackend where T: 'static + core::marker::Sized
pub fn rustic_core::backend::rclone::RcloneBackend::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::rclone::RcloneBackend where T: core::marker::Sized
pub fn rustic_core::backend::rclone::RcloneBackend::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::rclone::RcloneBackend where T: core::marker::Sized
pub fn rustic_core::backend::rclone::RcloneBackend::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::rclone::RcloneBackend
pub fn rustic_core::backend::rclone::RcloneBackend::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::rclone::RcloneBackend
pub type rustic_core::backend::rclone::RcloneBackend::Init = T
pub const rustic_core::backend::rclone::RcloneBackend::ALIGN: usize
pub unsafe fn rustic_core::backend::rclone::RcloneBackend::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::rclone::RcloneBackend::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::rclone::RcloneBackend::drop(ptr: usize)
pub unsafe fn rustic_core::backend::rclone::RcloneBackend::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::backend::rclone::RcloneBackend
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::rclone::RcloneBackend
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::rclone::RcloneBackend
pub type rustic_core::backend::rclone::RcloneBackend::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::rclone::RcloneBackend where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::rclone::RcloneBackend::vzip(self) -> V
pub fn rustic_core::backend::rclone::rclone_version() -> rustic_core::error::RusticResult<(i32, i32, i32)>
pub mod rustic_core::backend::rest
pub mod rustic_core::backend::rest::consts
pub const rustic_core::backend::rest::consts::DEFAULT_RETRY: usize = 5usize
pub struct rustic_core::backend::rest::LimitRetryBackoff
pub rustic_core::backend::rest::LimitRetryBackoff::exp: backoff::ExponentialBackoff
pub rustic_core::backend::rest::LimitRetryBackoff::max_retries: usize
pub rustic_core::backend::rest::LimitRetryBackoff::retries: usize
impl backoff::backoff::Backoff for rustic_core::backend::rest::LimitRetryBackoff
pub fn rustic_core::backend::rest::LimitRetryBackoff::next_backoff(&mut self) -> core::option::Option<core::time::Duration>
pub fn rustic_core::backend::rest::LimitRetryBackoff::reset(&mut self)
impl core::default::Default for rustic_core::backend::rest::LimitRetryBackoff
pub fn rustic_core::backend::rest::LimitRetryBackoff::default() -> Self
impl core::clone::Clone for rustic_core::backend::rest::LimitRetryBackoff
pub fn rustic_core::backend::rest::LimitRetryBackoff::clone(&self) -> rustic_core::backend::rest::LimitRetryBackoff
impl core::fmt::Debug for rustic_core::backend::rest::LimitRetryBackoff
pub fn rustic_core::backend::rest::LimitRetryBackoff::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::backend::rest::LimitRetryBackoff
impl core::marker::Sync for rustic_core::backend::rest::LimitRetryBackoff
impl core::marker::Unpin for rustic_core::backend::rest::LimitRetryBackoff
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::rest::LimitRetryBackoff
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::rest::LimitRetryBackoff
impl<T, U> core::convert::Into<U> for rustic_core::backend::rest::LimitRetryBackoff where U: core::convert::From<T>
pub fn rustic_core::backend::rest::LimitRetryBackoff::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::rest::LimitRetryBackoff where U: core::convert::Into<T>
pub type rustic_core::backend::rest::LimitRetryBackoff::Error = core::convert::Infallible
pub fn rustic_core::backend::rest::LimitRetryBackoff::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::rest::LimitRetryBackoff where U: core::convert::TryFrom<T>
pub type rustic_core::backend::rest::LimitRetryBackoff::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::rest::LimitRetryBackoff::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::rest::LimitRetryBackoff where T: core::clone::Clone
pub type rustic_core::backend::rest::LimitRetryBackoff::Owned = T
pub fn rustic_core::backend::rest::LimitRetryBackoff::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::rest::LimitRetryBackoff::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::rest::LimitRetryBackoff where T: 'static + core::marker::Sized
pub fn rustic_core::backend::rest::LimitRetryBackoff::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::rest::LimitRetryBackoff where T: core::marker::Sized
pub fn rustic_core::backend::rest::LimitRetryBackoff::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::rest::LimitRetryBackoff where T: core::marker::Sized
pub fn rustic_core::backend::rest::LimitRetryBackoff::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::rest::LimitRetryBackoff
pub fn rustic_core::backend::rest::LimitRetryBackoff::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::rest::LimitRetryBackoff
pub type rustic_core::backend::rest::LimitRetryBackoff::Init = T
pub const rustic_core::backend::rest::LimitRetryBackoff::ALIGN: usize
pub unsafe fn rustic_core::backend::rest::LimitRetryBackoff::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::rest::LimitRetryBackoff::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::rest::LimitRetryBackoff::drop(ptr: usize)
pub unsafe fn rustic_core::backend::rest::LimitRetryBackoff::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::backend::rest::LimitRetryBackoff
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::rest::LimitRetryBackoff
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::rest::LimitRetryBackoff
pub type rustic_core::backend::rest::LimitRetryBackoff::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::rest::LimitRetryBackoff where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::rest::LimitRetryBackoff::vzip(self) -> V
pub struct rustic_core::backend::rest::RestBackend
pub rustic_core::backend::rest::RestBackend::backoff: rustic_core::backend::rest::LimitRetryBackoff
pub rustic_core::backend::rest::RestBackend::client: reqwest::blocking::client::Client
pub rustic_core::backend::rest::RestBackend::url: url::Url
impl rustic_core::backend::rest::RestBackend
pub fn rustic_core::backend::rest::RestBackend::new(url: &str) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::backend::rest::RestBackend::url(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<url::Url>
impl rustic_core::backend::ReadBackend for rustic_core::backend::rest::RestBackend
pub fn rustic_core::backend::rest::RestBackend::list_with_size(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::id::Id, u32)>>
pub fn rustic_core::backend::rest::RestBackend::location(&self) -> alloc::string::String
pub fn rustic_core::backend::rest::RestBackend::read_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::rest::RestBackend::read_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, _cacheable: bool, offset: u32, length: u32) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::rest::RestBackend::set_option(&mut self, option: &str, value: &str) -> rustic_core::error::RusticResult<()>
impl rustic_core::backend::WriteBackend for rustic_core::backend::rest::RestBackend
pub fn rustic_core::backend::rest::RestBackend::create(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::rest::RestBackend::remove(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, _cacheable: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::rest::RestBackend::write_bytes(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, _cacheable: bool, buf: bytes::bytes::Bytes) -> rustic_core::error::RusticResult<()>
impl core::clone::Clone for rustic_core::backend::rest::RestBackend
pub fn rustic_core::backend::rest::RestBackend::clone(&self) -> rustic_core::backend::rest::RestBackend
impl core::fmt::Debug for rustic_core::backend::rest::RestBackend
pub fn rustic_core::backend::rest::RestBackend::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::backend::rest::RestBackend
impl core::marker::Sync for rustic_core::backend::rest::RestBackend
impl core::marker::Unpin for rustic_core::backend::rest::RestBackend
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::rest::RestBackend
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::backend::rest::RestBackend
impl<T, U> core::convert::Into<U> for rustic_core::backend::rest::RestBackend where U: core::convert::From<T>
pub fn rustic_core::backend::rest::RestBackend::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::rest::RestBackend where U: core::convert::Into<T>
pub type rustic_core::backend::rest::RestBackend::Error = core::convert::Infallible
pub fn rustic_core::backend::rest::RestBackend::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::rest::RestBackend where U: core::convert::TryFrom<T>
pub type rustic_core::backend::rest::RestBackend::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::rest::RestBackend::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::rest::RestBackend where T: core::clone::Clone
pub type rustic_core::backend::rest::RestBackend::Owned = T
pub fn rustic_core::backend::rest::RestBackend::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::rest::RestBackend::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::rest::RestBackend where T: 'static + core::marker::Sized
pub fn rustic_core::backend::rest::RestBackend::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::rest::RestBackend where T: core::marker::Sized
pub fn rustic_core::backend::rest::RestBackend::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::rest::RestBackend where T: core::marker::Sized
pub fn rustic_core::backend::rest::RestBackend::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::rest::RestBackend
pub fn rustic_core::backend::rest::RestBackend::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::rest::RestBackend
pub type rustic_core::backend::rest::RestBackend::Init = T
pub const rustic_core::backend::rest::RestBackend::ALIGN: usize
pub unsafe fn rustic_core::backend::rest::RestBackend::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::rest::RestBackend::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::rest::RestBackend::drop(ptr: usize)
pub unsafe fn rustic_core::backend::rest::RestBackend::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::backend::rest::RestBackend
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::rest::RestBackend
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::rest::RestBackend
pub type rustic_core::backend::rest::RestBackend::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::rest::RestBackend where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::rest::RestBackend::vzip(self) -> V
pub trait rustic_core::backend::rest::CheckError
pub fn rustic_core::backend::rest::CheckError::check_error(self) -> core::result::Result<reqwest::blocking::response::Response, backoff::error::Error<reqwest::error::Error>>
impl rustic_core::backend::rest::CheckError for reqwest::blocking::response::Response
pub fn reqwest::blocking::response::Response::check_error(self) -> core::result::Result<reqwest::blocking::response::Response, backoff::error::Error<reqwest::error::Error>>
pub fn rustic_core::backend::rest::notify(err: reqwest::error::Error, duration: core::time::Duration)
pub mod rustic_core::backend::stdin
pub struct rustic_core::backend::stdin::OpenStdin()
impl rustic_core::backend::ReadSourceOpen for rustic_core::backend::stdin::OpenStdin
pub type rustic_core::backend::stdin::OpenStdin::Reader = std::io::stdio::Stdin
pub fn rustic_core::backend::stdin::OpenStdin::open(self) -> rustic_core::error::RusticResult<Self::Reader>
impl core::clone::Clone for rustic_core::backend::stdin::OpenStdin
pub fn rustic_core::backend::stdin::OpenStdin::clone(&self) -> rustic_core::backend::stdin::OpenStdin
impl core::fmt::Debug for rustic_core::backend::stdin::OpenStdin
pub fn rustic_core::backend::stdin::OpenStdin::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::backend::stdin::OpenStdin
impl core::marker::Send for rustic_core::backend::stdin::OpenStdin
impl core::marker::Sync for rustic_core::backend::stdin::OpenStdin
impl core::marker::Unpin for rustic_core::backend::stdin::OpenStdin
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::stdin::OpenStdin
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::stdin::OpenStdin
impl<T, U> core::convert::Into<U> for rustic_core::backend::stdin::OpenStdin where U: core::convert::From<T>
pub fn rustic_core::backend::stdin::OpenStdin::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::stdin::OpenStdin where U: core::convert::Into<T>
pub type rustic_core::backend::stdin::OpenStdin::Error = core::convert::Infallible
pub fn rustic_core::backend::stdin::OpenStdin::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::stdin::OpenStdin where U: core::convert::TryFrom<T>
pub type rustic_core::backend::stdin::OpenStdin::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::stdin::OpenStdin::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::stdin::OpenStdin where T: core::clone::Clone
pub type rustic_core::backend::stdin::OpenStdin::Owned = T
pub fn rustic_core::backend::stdin::OpenStdin::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::stdin::OpenStdin::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::stdin::OpenStdin where T: 'static + core::marker::Sized
pub fn rustic_core::backend::stdin::OpenStdin::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::stdin::OpenStdin where T: core::marker::Sized
pub fn rustic_core::backend::stdin::OpenStdin::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::stdin::OpenStdin where T: core::marker::Sized
pub fn rustic_core::backend::stdin::OpenStdin::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::stdin::OpenStdin
pub fn rustic_core::backend::stdin::OpenStdin::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::stdin::OpenStdin
pub type rustic_core::backend::stdin::OpenStdin::Init = T
pub const rustic_core::backend::stdin::OpenStdin::ALIGN: usize
pub unsafe fn rustic_core::backend::stdin::OpenStdin::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::stdin::OpenStdin::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::stdin::OpenStdin::drop(ptr: usize)
pub unsafe fn rustic_core::backend::stdin::OpenStdin::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::backend::stdin::OpenStdin
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::stdin::OpenStdin
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::stdin::OpenStdin
pub type rustic_core::backend::stdin::OpenStdin::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::stdin::OpenStdin where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::stdin::OpenStdin::vzip(self) -> V
pub struct rustic_core::backend::stdin::StdinSource
pub rustic_core::backend::stdin::StdinSource::finished: bool
pub rustic_core::backend::stdin::StdinSource::path: std::path::PathBuf
impl rustic_core::backend::stdin::StdinSource
pub const fn rustic_core::backend::stdin::StdinSource::new(path: std::path::PathBuf) -> rustic_core::error::RusticResult<Self>
impl core::iter::traits::iterator::Iterator for rustic_core::backend::stdin::StdinSource
pub type rustic_core::backend::stdin::StdinSource::Item = core::result::Result<rustic_core::backend::ReadSourceEntry<rustic_core::backend::stdin::OpenStdin>, rustic_core::error::RusticError>
pub fn rustic_core::backend::stdin::StdinSource::next(&mut self) -> core::option::Option<Self::Item>
impl rustic_core::backend::ReadSource for rustic_core::backend::stdin::StdinSource
pub type rustic_core::backend::stdin::StdinSource::Iter = rustic_core::backend::stdin::StdinSource
pub type rustic_core::backend::stdin::StdinSource::Open = rustic_core::backend::stdin::OpenStdin
pub fn rustic_core::backend::stdin::StdinSource::entries(self) -> Self::Iter
pub fn rustic_core::backend::stdin::StdinSource::size(&self) -> rustic_core::error::RusticResult<core::option::Option<u64>>
impl core::fmt::Debug for rustic_core::backend::stdin::StdinSource
pub fn rustic_core::backend::stdin::StdinSource::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::backend::stdin::StdinSource
impl core::marker::Sync for rustic_core::backend::stdin::StdinSource
impl core::marker::Unpin for rustic_core::backend::stdin::StdinSource
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::stdin::StdinSource
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::stdin::StdinSource
impl<I> core::iter::traits::collect::IntoIterator for rustic_core::backend::stdin::StdinSource where I: core::iter::traits::iterator::Iterator
pub type rustic_core::backend::stdin::StdinSource::IntoIter = I
pub type rustic_core::backend::stdin::StdinSource::Item = <I as core::iter::traits::iterator::Iterator>::Item
pub fn rustic_core::backend::stdin::StdinSource::into_iter(self) -> I
impl<I> pariter::IteratorExt for rustic_core::backend::stdin::StdinSource where I: core::iter::traits::iterator::Iterator
impl<I> rand::seq::IteratorRandom for rustic_core::backend::stdin::StdinSource where I: core::iter::traits::iterator::Iterator
impl<T, U> core::convert::Into<U> for rustic_core::backend::stdin::StdinSource where U: core::convert::From<T>
pub fn rustic_core::backend::stdin::StdinSource::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::stdin::StdinSource where U: core::convert::Into<T>
pub type rustic_core::backend::stdin::StdinSource::Error = core::convert::Infallible
pub fn rustic_core::backend::stdin::StdinSource::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::stdin::StdinSource where U: core::convert::TryFrom<T>
pub type rustic_core::backend::stdin::StdinSource::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::stdin::StdinSource::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::backend::stdin::StdinSource where T: 'static + core::marker::Sized
pub fn rustic_core::backend::stdin::StdinSource::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::stdin::StdinSource where T: core::marker::Sized
pub fn rustic_core::backend::stdin::StdinSource::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::stdin::StdinSource where T: core::marker::Sized
pub fn rustic_core::backend::stdin::StdinSource::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::stdin::StdinSource
pub fn rustic_core::backend::stdin::StdinSource::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::stdin::StdinSource
pub type rustic_core::backend::stdin::StdinSource::Init = T
pub const rustic_core::backend::stdin::StdinSource::ALIGN: usize
pub unsafe fn rustic_core::backend::stdin::StdinSource::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::stdin::StdinSource::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::stdin::StdinSource::drop(ptr: usize)
pub unsafe fn rustic_core::backend::stdin::StdinSource::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> itertools::Itertools for rustic_core::backend::stdin::StdinSource where T: core::iter::traits::iterator::Iterator + core::marker::Sized
impl<T> rayon::iter::par_bridge::ParallelBridge for rustic_core::backend::stdin::StdinSource where T: core::iter::traits::iterator::Iterator + core::marker::Send, <T as core::iter::traits::iterator::Iterator>::Item: core::marker::Send
pub fn rustic_core::backend::stdin::StdinSource::par_bridge(self) -> rayon::iter::par_bridge::IterBridge<T>
impl<T> tracing::instrument::Instrument for rustic_core::backend::stdin::StdinSource
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::stdin::StdinSource
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::stdin::StdinSource
pub type rustic_core::backend::stdin::StdinSource::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::stdin::StdinSource where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::stdin::StdinSource::vzip(self) -> V
pub enum rustic_core::backend::FileType
pub rustic_core::backend::FileType::Config
pub rustic_core::backend::FileType::Index
pub rustic_core::backend::FileType::Key
pub rustic_core::backend::FileType::Pack
pub rustic_core::backend::FileType::Snapshot
impl rustic_core::backend::FileType
pub const fn rustic_core::backend::FileType::dirname(self) -> &'static str
pub const fn rustic_core::backend::FileType::is_cacheable(self) -> bool
impl core::clone::Clone for rustic_core::backend::FileType
pub fn rustic_core::backend::FileType::clone(&self) -> rustic_core::backend::FileType
impl core::cmp::Eq for rustic_core::backend::FileType
impl core::cmp::PartialEq<rustic_core::backend::FileType> for rustic_core::backend::FileType
pub fn rustic_core::backend::FileType::eq(&self, other: &rustic_core::backend::FileType) -> bool
impl core::fmt::Debug for rustic_core::backend::FileType
pub fn rustic_core::backend::FileType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::backend::FileType
impl core::marker::StructuralEq for rustic_core::backend::FileType
impl core::marker::StructuralPartialEq for rustic_core::backend::FileType
impl serde::ser::Serialize for rustic_core::backend::FileType
pub fn rustic_core::backend::FileType::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::backend::FileType
pub fn rustic_core::backend::FileType::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::backend::FileType
impl core::marker::Sync for rustic_core::backend::FileType
impl core::marker::Unpin for rustic_core::backend::FileType
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::FileType
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::FileType
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::backend::FileType where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::backend::FileType::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::backend::FileType where U: core::convert::From<T>
pub fn rustic_core::backend::FileType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::FileType where U: core::convert::Into<T>
pub type rustic_core::backend::FileType::Error = core::convert::Infallible
pub fn rustic_core::backend::FileType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::FileType where U: core::convert::TryFrom<T>
pub type rustic_core::backend::FileType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::FileType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::FileType where T: core::clone::Clone
pub type rustic_core::backend::FileType::Owned = T
pub fn rustic_core::backend::FileType::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::FileType::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::FileType where T: 'static + core::marker::Sized
pub fn rustic_core::backend::FileType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::FileType where T: core::marker::Sized
pub fn rustic_core::backend::FileType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::FileType where T: core::marker::Sized
pub fn rustic_core::backend::FileType::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::FileType
pub fn rustic_core::backend::FileType::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::FileType
pub type rustic_core::backend::FileType::Init = T
pub const rustic_core::backend::FileType::ALIGN: usize
pub unsafe fn rustic_core::backend::FileType::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::FileType::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::FileType::drop(ptr: usize)
pub unsafe fn rustic_core::backend::FileType::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::backend::FileType where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::backend::FileType
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::FileType
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::FileType
pub type rustic_core::backend::FileType::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::FileType where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::FileType::vzip(self) -> V
pub struct rustic_core::backend::ReadSourceEntry<O>
pub rustic_core::backend::ReadSourceEntry::node: rustic_core::backend::node::Node
pub rustic_core::backend::ReadSourceEntry::open: core::option::Option<O>
pub rustic_core::backend::ReadSourceEntry::path: std::path::PathBuf
impl<O: core::clone::Clone> core::clone::Clone for rustic_core::backend::ReadSourceEntry<O>
pub fn rustic_core::backend::ReadSourceEntry<O>::clone(&self) -> rustic_core::backend::ReadSourceEntry<O>
impl<O: core::fmt::Debug> core::fmt::Debug for rustic_core::backend::ReadSourceEntry<O>
pub fn rustic_core::backend::ReadSourceEntry<O>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<O> core::marker::Send for rustic_core::backend::ReadSourceEntry<O> where O: core::marker::Send
impl<O> core::marker::Sync for rustic_core::backend::ReadSourceEntry<O> where O: core::marker::Sync
impl<O> core::marker::Unpin for rustic_core::backend::ReadSourceEntry<O> where O: core::marker::Unpin
impl<O> core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::ReadSourceEntry<O> where O: core::panic::unwind_safe::RefUnwindSafe
impl<O> core::panic::unwind_safe::UnwindSafe for rustic_core::backend::ReadSourceEntry<O> where O: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::backend::ReadSourceEntry<O> where U: core::convert::From<T>
pub fn rustic_core::backend::ReadSourceEntry<O>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::ReadSourceEntry<O> where U: core::convert::Into<T>
pub type rustic_core::backend::ReadSourceEntry<O>::Error = core::convert::Infallible
pub fn rustic_core::backend::ReadSourceEntry<O>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::ReadSourceEntry<O> where U: core::convert::TryFrom<T>
pub type rustic_core::backend::ReadSourceEntry<O>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::ReadSourceEntry<O>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::ReadSourceEntry<O> where T: core::clone::Clone
pub type rustic_core::backend::ReadSourceEntry<O>::Owned = T
pub fn rustic_core::backend::ReadSourceEntry<O>::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::ReadSourceEntry<O>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::ReadSourceEntry<O> where T: 'static + core::marker::Sized
pub fn rustic_core::backend::ReadSourceEntry<O>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::ReadSourceEntry<O> where T: core::marker::Sized
pub fn rustic_core::backend::ReadSourceEntry<O>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::ReadSourceEntry<O> where T: core::marker::Sized
pub fn rustic_core::backend::ReadSourceEntry<O>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::ReadSourceEntry<O>
pub fn rustic_core::backend::ReadSourceEntry<O>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::ReadSourceEntry<O>
pub type rustic_core::backend::ReadSourceEntry<O>::Init = T
pub const rustic_core::backend::ReadSourceEntry<O>::ALIGN: usize
pub unsafe fn rustic_core::backend::ReadSourceEntry<O>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::ReadSourceEntry<O>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::ReadSourceEntry<O>::drop(ptr: usize)
pub unsafe fn rustic_core::backend::ReadSourceEntry<O>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::backend::ReadSourceEntry<O>
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::ReadSourceEntry<O>
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::ReadSourceEntry<O>
pub type rustic_core::backend::ReadSourceEntry<O>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::ReadSourceEntry<O> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::ReadSourceEntry<O>::vzip(self) -> V
pub const rustic_core::backend::ALL_FILE_TYPES: _
pub trait rustic_core::backend::ReadBackend: core::clone::Clone + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::backend::ReadBackend::find_id(&self, tpe: rustic_core::backend::FileType, id: &str) -> rustic_core::error::RusticResult<rustic_core::id::Id>
pub fn rustic_core::backend::ReadBackend::find_ids<T: core::convert::AsRef<str>>(&self, tpe: rustic_core::backend::FileType, ids: &[T]) -> rustic_core::error::RusticResult<alloc::vec::Vec<rustic_core::id::Id>>
pub fn rustic_core::backend::ReadBackend::find_starts_with<T: core::convert::AsRef<str>>(&self, tpe: rustic_core::backend::FileType, vec: &[T]) -> rustic_core::error::RusticResult<alloc::vec::Vec<rustic_core::id::Id>>
pub fn rustic_core::backend::ReadBackend::list(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<rustic_core::id::Id>>
pub fn rustic_core::backend::ReadBackend::list_with_size(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::id::Id, u32)>>
pub fn rustic_core::backend::ReadBackend::location(&self) -> alloc::string::String
pub fn rustic_core::backend::ReadBackend::read_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::ReadBackend::read_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, offset: u32, length: u32) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::ReadBackend::set_option(&mut self, option: &str, value: &str) -> rustic_core::error::RusticResult<()>
impl rustic_core::backend::ReadBackend for rustic_core::backend::choose::ChooseBackend
pub fn rustic_core::backend::choose::ChooseBackend::list_with_size(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::id::Id, u32)>>
pub fn rustic_core::backend::choose::ChooseBackend::location(&self) -> alloc::string::String
pub fn rustic_core::backend::choose::ChooseBackend::read_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::choose::ChooseBackend::read_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, offset: u32, length: u32) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::choose::ChooseBackend::set_option(&mut self, option: &str, value: &str) -> rustic_core::error::RusticResult<()>
impl rustic_core::backend::ReadBackend for rustic_core::backend::local::LocalBackend
pub fn rustic_core::backend::local::LocalBackend::list(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<rustic_core::id::Id>>
pub fn rustic_core::backend::local::LocalBackend::list_with_size(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::id::Id, u32)>>
pub fn rustic_core::backend::local::LocalBackend::location(&self) -> alloc::string::String
pub fn rustic_core::backend::local::LocalBackend::read_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::local::LocalBackend::read_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, _cacheable: bool, offset: u32, length: u32) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::local::LocalBackend::set_option(&mut self, option: &str, value: &str) -> rustic_core::error::RusticResult<()>
impl rustic_core::backend::ReadBackend for rustic_core::backend::rclone::RcloneBackend
pub fn rustic_core::backend::rclone::RcloneBackend::list_with_size(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::id::Id, u32)>>
pub fn rustic_core::backend::rclone::RcloneBackend::location(&self) -> alloc::string::String
pub fn rustic_core::backend::rclone::RcloneBackend::read_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::rclone::RcloneBackend::read_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, offset: u32, length: u32) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::rclone::RcloneBackend::set_option(&mut self, option: &str, value: &str) -> rustic_core::error::RusticResult<()>
impl rustic_core::backend::ReadBackend for rustic_core::backend::rest::RestBackend
pub fn rustic_core::backend::rest::RestBackend::list_with_size(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::id::Id, u32)>>
pub fn rustic_core::backend::rest::RestBackend::location(&self) -> alloc::string::String
pub fn rustic_core::backend::rest::RestBackend::read_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::rest::RestBackend::read_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, _cacheable: bool, offset: u32, length: u32) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::rest::RestBackend::set_option(&mut self, option: &str, value: &str) -> rustic_core::error::RusticResult<()>
impl<BE: rustic_core::backend::WriteBackend> rustic_core::backend::ReadBackend for rustic_core::backend::cache::CachedBackend<BE>
pub fn rustic_core::backend::cache::CachedBackend<BE>::list_with_size(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::id::Id, u32)>>
pub fn rustic_core::backend::cache::CachedBackend<BE>::location(&self) -> alloc::string::String
pub fn rustic_core::backend::cache::CachedBackend<BE>::read_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::cache::CachedBackend<BE>::read_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, offset: u32, length: u32) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::cache::CachedBackend<BE>::set_option(&mut self, option: &str, value: &str) -> rustic_core::error::RusticResult<()>
impl<BE: rustic_core::backend::WriteBackend> rustic_core::backend::ReadBackend for rustic_core::backend::hotcold::HotColdBackend<BE>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::list_with_size(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::id::Id, u32)>>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::location(&self) -> alloc::string::String
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::read_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::read_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, offset: u32, length: u32) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::set_option(&mut self, option: &str, value: &str) -> rustic_core::error::RusticResult<()>
impl<BE: rustic_core::backend::decrypt::DecryptFullBackend> rustic_core::backend::ReadBackend for rustic_core::backend::dry_run::DryRunBackend<BE>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::list_with_size(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::id::Id, u32)>>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::location(&self) -> alloc::string::String
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::read_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::read_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, offset: u32, length: u32) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::set_option(&mut self, option: &str, value: &str) -> rustic_core::error::RusticResult<()>
impl<R: rustic_core::backend::ReadBackend, C: rustic_core::crypto::CryptoKey> rustic_core::backend::ReadBackend for rustic_core::backend::decrypt::DecryptBackend<R, C>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::list(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<rustic_core::id::Id>>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::list_with_size(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::id::Id, u32)>>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::location(&self) -> alloc::string::String
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::read_full(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::read_partial(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, offset: u32, length: u32) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::set_option(&mut self, option: &str, value: &str) -> rustic_core::error::RusticResult<()>
pub trait rustic_core::backend::ReadSource
pub type rustic_core::backend::ReadSource::Iter: core::iter::traits::iterator::Iterator<Item = rustic_core::error::RusticResult<rustic_core::backend::ReadSourceEntry<Self::Open>>>
pub type rustic_core::backend::ReadSource::Open: rustic_core::backend::ReadSourceOpen
pub fn rustic_core::backend::ReadSource::entries(self) -> Self::Iter
pub fn rustic_core::backend::ReadSource::size(&self) -> rustic_core::error::RusticResult<core::option::Option<u64>>
impl rustic_core::backend::ReadSource for rustic_core::backend::ignore::LocalSource
pub type rustic_core::backend::ignore::LocalSource::Iter = rustic_core::backend::ignore::LocalSource
pub type rustic_core::backend::ignore::LocalSource::Open = rustic_core::backend::ignore::OpenFile
pub fn rustic_core::backend::ignore::LocalSource::entries(self) -> Self::Iter
pub fn rustic_core::backend::ignore::LocalSource::size(&self) -> rustic_core::error::RusticResult<core::option::Option<u64>>
impl rustic_core::backend::ReadSource for rustic_core::backend::stdin::StdinSource
pub type rustic_core::backend::stdin::StdinSource::Iter = rustic_core::backend::stdin::StdinSource
pub type rustic_core::backend::stdin::StdinSource::Open = rustic_core::backend::stdin::OpenStdin
pub fn rustic_core::backend::stdin::StdinSource::entries(self) -> Self::Iter
pub fn rustic_core::backend::stdin::StdinSource::size(&self) -> rustic_core::error::RusticResult<core::option::Option<u64>>
pub trait rustic_core::backend::ReadSourceOpen
pub type rustic_core::backend::ReadSourceOpen::Reader: std::io::Read + core::marker::Send + 'static
pub fn rustic_core::backend::ReadSourceOpen::open(self) -> rustic_core::error::RusticResult<Self::Reader>
impl rustic_core::backend::ReadSourceOpen for rustic_core::backend::ignore::OpenFile
pub type rustic_core::backend::ignore::OpenFile::Reader = std::fs::File
pub fn rustic_core::backend::ignore::OpenFile::open(self) -> rustic_core::error::RusticResult<Self::Reader>
impl rustic_core::backend::ReadSourceOpen for rustic_core::backend::stdin::OpenStdin
pub type rustic_core::backend::stdin::OpenStdin::Reader = std::io::stdio::Stdin
pub fn rustic_core::backend::stdin::OpenStdin::open(self) -> rustic_core::error::RusticResult<Self::Reader>
pub trait rustic_core::backend::WriteBackend: rustic_core::backend::ReadBackend
pub fn rustic_core::backend::WriteBackend::create(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::WriteBackend::remove(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::WriteBackend::write_bytes(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> rustic_core::error::RusticResult<()>
impl rustic_core::backend::WriteBackend for rustic_core::backend::choose::ChooseBackend
pub fn rustic_core::backend::choose::ChooseBackend::create(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::choose::ChooseBackend::remove(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::choose::ChooseBackend::write_bytes(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> rustic_core::error::RusticResult<()>
impl rustic_core::backend::WriteBackend for rustic_core::backend::local::LocalBackend
pub fn rustic_core::backend::local::LocalBackend::create(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalBackend::remove(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, _cacheable: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalBackend::write_bytes(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, _cacheable: bool, buf: bytes::bytes::Bytes) -> rustic_core::error::RusticResult<()>
impl rustic_core::backend::WriteBackend for rustic_core::backend::rclone::RcloneBackend
pub fn rustic_core::backend::rclone::RcloneBackend::create(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::rclone::RcloneBackend::remove(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::rclone::RcloneBackend::write_bytes(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> rustic_core::error::RusticResult<()>
impl rustic_core::backend::WriteBackend for rustic_core::backend::rest::RestBackend
pub fn rustic_core::backend::rest::RestBackend::create(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::rest::RestBackend::remove(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, _cacheable: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::rest::RestBackend::write_bytes(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, _cacheable: bool, buf: bytes::bytes::Bytes) -> rustic_core::error::RusticResult<()>
impl<BE: rustic_core::backend::WriteBackend> rustic_core::backend::WriteBackend for rustic_core::backend::cache::CachedBackend<BE>
pub fn rustic_core::backend::cache::CachedBackend<BE>::create(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::cache::CachedBackend<BE>::remove(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::cache::CachedBackend<BE>::write_bytes(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> rustic_core::error::RusticResult<()>
impl<BE: rustic_core::backend::WriteBackend> rustic_core::backend::WriteBackend for rustic_core::backend::hotcold::HotColdBackend<BE>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::create(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::remove(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::hotcold::HotColdBackend<BE>::write_bytes(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> rustic_core::error::RusticResult<()>
impl<BE: rustic_core::backend::decrypt::DecryptFullBackend> rustic_core::backend::WriteBackend for rustic_core::backend::dry_run::DryRunBackend<BE>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::create(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::remove(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::dry_run::DryRunBackend<BE>::write_bytes(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> rustic_core::error::RusticResult<()>
impl<R: rustic_core::backend::WriteBackend, C: rustic_core::crypto::CryptoKey> rustic_core::backend::WriteBackend for rustic_core::backend::decrypt::DecryptBackend<R, C>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::create(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::remove(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::decrypt::DecryptBackend<R, C>::write_bytes(&self, tpe: rustic_core::backend::FileType, id: &rustic_core::id::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> rustic_core::error::RusticResult<()>
pub trait rustic_core::backend::WriteSource: core::clone::Clone
pub fn rustic_core::backend::WriteSource::create<P: core::convert::Into<std::path::PathBuf>>(&self, path: P, node: rustic_core::backend::node::Node)
pub fn rustic_core::backend::WriteSource::set_metadata<P: core::convert::Into<std::path::PathBuf>>(&self, path: P, node: rustic_core::backend::node::Node)
pub fn rustic_core::backend::WriteSource::write_at<P: core::convert::Into<std::path::PathBuf>>(&self, path: P, offset: u64, data: bytes::bytes::Bytes)
pub mod rustic_core::blob
pub mod rustic_core::blob::packer
pub mod rustic_core::blob::packer::constants
pub const rustic_core::blob::packer::constants::KB: u32 = 1_024u32
pub const rustic_core::blob::packer::constants::MAX_AGE: _
pub const rustic_core::blob::packer::constants::MAX_COUNT: u32 = 10_000u32
pub const rustic_core::blob::packer::constants::MAX_SIZE: _
pub const rustic_core::blob::packer::constants::MB: _
pub struct rustic_core::blob::packer::Actor
pub rustic_core::blob::packer::Actor::finish: crossbeam_channel::channel::Receiver<rustic_core::error::RusticResult<()>>
pub rustic_core::blob::packer::Actor::sender: crossbeam_channel::channel::Sender<(bytes::bytes::Bytes, rustic_core::repofile::indexfile::IndexPack)>
impl rustic_core::blob::packer::Actor
pub fn rustic_core::blob::packer::Actor::finalize(self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::blob::packer::Actor::new<BE: rustic_core::backend::decrypt::DecryptWriteBackend>(fwh: rustic_core::blob::packer::FileWriterHandle<BE>, queue_len: usize, _par: usize) -> Self
pub fn rustic_core::blob::packer::Actor::send(&self, load: (bytes::bytes::Bytes, rustic_core::repofile::indexfile::IndexPack)) -> rustic_core::error::RusticResult<()>
impl core::marker::Send for rustic_core::blob::packer::Actor
impl core::marker::Sync for rustic_core::blob::packer::Actor
impl core::marker::Unpin for rustic_core::blob::packer::Actor
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::blob::packer::Actor
impl core::panic::unwind_safe::UnwindSafe for rustic_core::blob::packer::Actor
impl<T, U> core::convert::Into<U> for rustic_core::blob::packer::Actor where U: core::convert::From<T>
pub fn rustic_core::blob::packer::Actor::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::blob::packer::Actor where U: core::convert::Into<T>
pub type rustic_core::blob::packer::Actor::Error = core::convert::Infallible
pub fn rustic_core::blob::packer::Actor::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::blob::packer::Actor where U: core::convert::TryFrom<T>
pub type rustic_core::blob::packer::Actor::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::blob::packer::Actor::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::blob::packer::Actor where T: 'static + core::marker::Sized
pub fn rustic_core::blob::packer::Actor::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::blob::packer::Actor where T: core::marker::Sized
pub fn rustic_core::blob::packer::Actor::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::blob::packer::Actor where T: core::marker::Sized
pub fn rustic_core::blob::packer::Actor::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::blob::packer::Actor
pub fn rustic_core::blob::packer::Actor::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::blob::packer::Actor
pub type rustic_core::blob::packer::Actor::Init = T
pub const rustic_core::blob::packer::Actor::ALIGN: usize
pub unsafe fn rustic_core::blob::packer::Actor::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::blob::packer::Actor::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::blob::packer::Actor::drop(ptr: usize)
pub unsafe fn rustic_core::blob::packer::Actor::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::blob::packer::Actor
impl<T> tracing::instrument::WithSubscriber for rustic_core::blob::packer::Actor
impl<T> typenum::type_operators::Same<T> for rustic_core::blob::packer::Actor
pub type rustic_core::blob::packer::Actor::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::blob::packer::Actor where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::blob::packer::Actor::vzip(self) -> V
pub struct rustic_core::blob::packer::FileWriterHandle<BE: rustic_core::backend::decrypt::DecryptWriteBackend>
pub rustic_core::blob::packer::FileWriterHandle::be: BE
pub rustic_core::blob::packer::FileWriterHandle::cacheable: bool
pub rustic_core::blob::packer::FileWriterHandle::indexer: alloc::sync::Arc<std::sync::rwlock::RwLock<rustic_core::index::indexer::Indexer<BE>>>
impl<BE: rustic_core::backend::decrypt::DecryptWriteBackend> rustic_core::blob::packer::FileWriterHandle<BE>
pub fn rustic_core::blob::packer::FileWriterHandle<BE>::index(&self, index: rustic_core::repofile::indexfile::IndexPack) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::blob::packer::FileWriterHandle<BE>::process(&self, load: (bytes::bytes::Bytes, rustic_core::id::Id, rustic_core::repofile::indexfile::IndexPack)) -> rustic_core::error::RusticResult<rustic_core::repofile::indexfile::IndexPack>
impl<BE: core::clone::Clone + rustic_core::backend::decrypt::DecryptWriteBackend> core::clone::Clone for rustic_core::blob::packer::FileWriterHandle<BE>
pub fn rustic_core::blob::packer::FileWriterHandle<BE>::clone(&self) -> rustic_core::blob::packer::FileWriterHandle<BE>
impl<BE> core::marker::Send for rustic_core::blob::packer::FileWriterHandle<BE>
impl<BE> core::marker::Sync for rustic_core::blob::packer::FileWriterHandle<BE>
impl<BE> core::marker::Unpin for rustic_core::blob::packer::FileWriterHandle<BE> where BE: core::marker::Unpin
impl<BE> core::panic::unwind_safe::RefUnwindSafe for rustic_core::blob::packer::FileWriterHandle<BE> where BE: core::panic::unwind_safe::RefUnwindSafe
impl<BE> core::panic::unwind_safe::UnwindSafe for rustic_core::blob::packer::FileWriterHandle<BE> where BE: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::blob::packer::FileWriterHandle<BE> where U: core::convert::From<T>
pub fn rustic_core::blob::packer::FileWriterHandle<BE>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::blob::packer::FileWriterHandle<BE> where U: core::convert::Into<T>
pub type rustic_core::blob::packer::FileWriterHandle<BE>::Error = core::convert::Infallible
pub fn rustic_core::blob::packer::FileWriterHandle<BE>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::blob::packer::FileWriterHandle<BE> where U: core::convert::TryFrom<T>
pub type rustic_core::blob::packer::FileWriterHandle<BE>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::blob::packer::FileWriterHandle<BE>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::blob::packer::FileWriterHandle<BE> where T: core::clone::Clone
pub type rustic_core::blob::packer::FileWriterHandle<BE>::Owned = T
pub fn rustic_core::blob::packer::FileWriterHandle<BE>::clone_into(&self, target: &mut T)
pub fn rustic_core::blob::packer::FileWriterHandle<BE>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::blob::packer::FileWriterHandle<BE> where T: 'static + core::marker::Sized
pub fn rustic_core::blob::packer::FileWriterHandle<BE>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::blob::packer::FileWriterHandle<BE> where T: core::marker::Sized
pub fn rustic_core::blob::packer::FileWriterHandle<BE>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::blob::packer::FileWriterHandle<BE> where T: core::marker::Sized
pub fn rustic_core::blob::packer::FileWriterHandle<BE>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::blob::packer::FileWriterHandle<BE>
pub fn rustic_core::blob::packer::FileWriterHandle<BE>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::blob::packer::FileWriterHandle<BE>
pub type rustic_core::blob::packer::FileWriterHandle<BE>::Init = T
pub const rustic_core::blob::packer::FileWriterHandle<BE>::ALIGN: usize
pub unsafe fn rustic_core::blob::packer::FileWriterHandle<BE>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::blob::packer::FileWriterHandle<BE>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::blob::packer::FileWriterHandle<BE>::drop(ptr: usize)
pub unsafe fn rustic_core::blob::packer::FileWriterHandle<BE>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::blob::packer::FileWriterHandle<BE>
impl<T> tracing::instrument::WithSubscriber for rustic_core::blob::packer::FileWriterHandle<BE>
impl<T> typenum::type_operators::Same<T> for rustic_core::blob::packer::FileWriterHandle<BE>
pub type rustic_core::blob::packer::FileWriterHandle<BE>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::blob::packer::FileWriterHandle<BE> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::blob::packer::FileWriterHandle<BE>::vzip(self) -> V
pub struct rustic_core::blob::packer::PackSizer
pub rustic_core::blob::packer::PackSizer::current_size: u64
pub rustic_core::blob::packer::PackSizer::default_size: u32
pub rustic_core::blob::packer::PackSizer::grow_factor: u32
pub rustic_core::blob::packer::PackSizer::max_packsize_tolerate_percent: u32
pub rustic_core::blob::packer::PackSizer::min_packsize_tolerate_percent: u32
pub rustic_core::blob::packer::PackSizer::size_limit: u32
impl rustic_core::blob::packer::PackSizer
pub fn rustic_core::blob::packer::PackSizer::add_size(&mut self, added: u32)
pub fn rustic_core::blob::packer::PackSizer::from_config(config: &rustic_core::repofile::configfile::ConfigFile, blob_type: rustic_core::blob::BlobType, current_size: u64) -> Self
pub fn rustic_core::blob::packer::PackSizer::pack_size(&self) -> u32
pub fn rustic_core::blob::packer::PackSizer::size_ok(&self, size: u32) -> bool
impl core::clone::Clone for rustic_core::blob::packer::PackSizer
pub fn rustic_core::blob::packer::PackSizer::clone(&self) -> rustic_core::blob::packer::PackSizer
impl core::fmt::Debug for rustic_core::blob::packer::PackSizer
pub fn rustic_core::blob::packer::PackSizer::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::blob::packer::PackSizer
impl core::marker::Send for rustic_core::blob::packer::PackSizer
impl core::marker::Sync for rustic_core::blob::packer::PackSizer
impl core::marker::Unpin for rustic_core::blob::packer::PackSizer
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::blob::packer::PackSizer
impl core::panic::unwind_safe::UnwindSafe for rustic_core::blob::packer::PackSizer
impl<T, U> core::convert::Into<U> for rustic_core::blob::packer::PackSizer where U: core::convert::From<T>
pub fn rustic_core::blob::packer::PackSizer::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::blob::packer::PackSizer where U: core::convert::Into<T>
pub type rustic_core::blob::packer::PackSizer::Error = core::convert::Infallible
pub fn rustic_core::blob::packer::PackSizer::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::blob::packer::PackSizer where U: core::convert::TryFrom<T>
pub type rustic_core::blob::packer::PackSizer::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::blob::packer::PackSizer::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::blob::packer::PackSizer where T: core::clone::Clone
pub type rustic_core::blob::packer::PackSizer::Owned = T
pub fn rustic_core::blob::packer::PackSizer::clone_into(&self, target: &mut T)
pub fn rustic_core::blob::packer::PackSizer::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::blob::packer::PackSizer where T: 'static + core::marker::Sized
pub fn rustic_core::blob::packer::PackSizer::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::blob::packer::PackSizer where T: core::marker::Sized
pub fn rustic_core::blob::packer::PackSizer::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::blob::packer::PackSizer where T: core::marker::Sized
pub fn rustic_core::blob::packer::PackSizer::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::blob::packer::PackSizer
pub fn rustic_core::blob::packer::PackSizer::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::blob::packer::PackSizer
pub type rustic_core::blob::packer::PackSizer::Init = T
pub const rustic_core::blob::packer::PackSizer::ALIGN: usize
pub unsafe fn rustic_core::blob::packer::PackSizer::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::blob::packer::PackSizer::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::blob::packer::PackSizer::drop(ptr: usize)
pub unsafe fn rustic_core::blob::packer::PackSizer::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::blob::packer::PackSizer
impl<T> tracing::instrument::WithSubscriber for rustic_core::blob::packer::PackSizer
impl<T> typenum::type_operators::Same<T> for rustic_core::blob::packer::PackSizer
pub type rustic_core::blob::packer::PackSizer::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::blob::packer::PackSizer where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::blob::packer::PackSizer::vzip(self) -> V
pub struct rustic_core::blob::packer::Packer<BE: rustic_core::backend::decrypt::DecryptWriteBackend>
pub rustic_core::blob::packer::Packer::finish: crossbeam_channel::channel::Receiver<rustic_core::error::RusticResult<rustic_core::blob::packer::PackerStats>>
pub rustic_core::blob::packer::Packer::indexer: alloc::sync::Arc<std::sync::rwlock::RwLock<rustic_core::index::indexer::Indexer<BE>>>
pub rustic_core::blob::packer::Packer::raw_packer: alloc::sync::Arc<std::sync::rwlock::RwLock<rustic_core::blob::packer::RawPacker<BE>>>
pub rustic_core::blob::packer::Packer::sender: crossbeam_channel::channel::Sender<(bytes::bytes::Bytes, rustic_core::id::Id, core::option::Option<u32>)>
impl<BE: rustic_core::backend::decrypt::DecryptWriteBackend> rustic_core::blob::packer::Packer<BE>
pub fn rustic_core::blob::packer::Packer<BE>::add(&self, data: bytes::bytes::Bytes, id: rustic_core::id::Id) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::blob::packer::Packer<BE>::add_raw(&self, data: &[u8], id: &rustic_core::id::Id, data_len: u64, uncompressed_length: core::option::Option<core::num::nonzero::NonZeroU32>, size_limit: core::option::Option<u32>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::blob::packer::Packer<BE>::add_with_sizelimit(&self, data: bytes::bytes::Bytes, id: rustic_core::id::Id, size_limit: core::option::Option<u32>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::blob::packer::Packer<BE>::finalize(self) -> rustic_core::error::RusticResult<rustic_core::blob::packer::PackerStats>
pub fn rustic_core::blob::packer::Packer<BE>::new(be: BE, blob_type: rustic_core::blob::BlobType, indexer: alloc::sync::Arc<std::sync::rwlock::RwLock<rustic_core::index::indexer::Indexer<BE>>>, config: &rustic_core::repofile::configfile::ConfigFile, total_size: u64) -> rustic_core::error::RusticResult<Self>
impl<BE: core::clone::Clone + rustic_core::backend::decrypt::DecryptWriteBackend> core::clone::Clone for rustic_core::blob::packer::Packer<BE>
pub fn rustic_core::blob::packer::Packer<BE>::clone(&self) -> rustic_core::blob::packer::Packer<BE>
impl<BE> core::marker::Send for rustic_core::blob::packer::Packer<BE>
impl<BE> core::marker::Sync for rustic_core::blob::packer::Packer<BE>
impl<BE> core::marker::Unpin for rustic_core::blob::packer::Packer<BE>
impl<BE> core::panic::unwind_safe::RefUnwindSafe for rustic_core::blob::packer::Packer<BE>
impl<BE> core::panic::unwind_safe::UnwindSafe for rustic_core::blob::packer::Packer<BE>
impl<T, U> core::convert::Into<U> for rustic_core::blob::packer::Packer<BE> where U: core::convert::From<T>
pub fn rustic_core::blob::packer::Packer<BE>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::blob::packer::Packer<BE> where U: core::convert::Into<T>
pub type rustic_core::blob::packer::Packer<BE>::Error = core::convert::Infallible
pub fn rustic_core::blob::packer::Packer<BE>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::blob::packer::Packer<BE> where U: core::convert::TryFrom<T>
pub type rustic_core::blob::packer::Packer<BE>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::blob::packer::Packer<BE>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::blob::packer::Packer<BE> where T: core::clone::Clone
pub type rustic_core::blob::packer::Packer<BE>::Owned = T
pub fn rustic_core::blob::packer::Packer<BE>::clone_into(&self, target: &mut T)
pub fn rustic_core::blob::packer::Packer<BE>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::blob::packer::Packer<BE> where T: 'static + core::marker::Sized
pub fn rustic_core::blob::packer::Packer<BE>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::blob::packer::Packer<BE> where T: core::marker::Sized
pub fn rustic_core::blob::packer::Packer<BE>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::blob::packer::Packer<BE> where T: core::marker::Sized
pub fn rustic_core::blob::packer::Packer<BE>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::blob::packer::Packer<BE>
pub fn rustic_core::blob::packer::Packer<BE>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::blob::packer::Packer<BE>
pub type rustic_core::blob::packer::Packer<BE>::Init = T
pub const rustic_core::blob::packer::Packer<BE>::ALIGN: usize
pub unsafe fn rustic_core::blob::packer::Packer<BE>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::blob::packer::Packer<BE>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::blob::packer::Packer<BE>::drop(ptr: usize)
pub unsafe fn rustic_core::blob::packer::Packer<BE>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::blob::packer::Packer<BE>
impl<T> tracing::instrument::WithSubscriber for rustic_core::blob::packer::Packer<BE>
impl<T> typenum::type_operators::Same<T> for rustic_core::blob::packer::Packer<BE>
pub type rustic_core::blob::packer::Packer<BE>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::blob::packer::Packer<BE> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::blob::packer::Packer<BE>::vzip(self) -> V
pub struct rustic_core::blob::packer::PackerStats
pub rustic_core::blob::packer::PackerStats::blobs: u64
pub rustic_core::blob::packer::PackerStats::data: u64
pub rustic_core::blob::packer::PackerStats::data_packed: u64
impl rustic_core::blob::packer::PackerStats
pub fn rustic_core::blob::packer::PackerStats::apply(self, summary: &mut rustic_core::repofile::snapshotfile::SnapshotSummary, tpe: rustic_core::blob::BlobType)
impl core::clone::Clone for rustic_core::blob::packer::PackerStats
pub fn rustic_core::blob::packer::PackerStats::clone(&self) -> rustic_core::blob::packer::PackerStats
impl core::default::Default for rustic_core::blob::packer::PackerStats
pub fn rustic_core::blob::packer::PackerStats::default() -> rustic_core::blob::packer::PackerStats
impl core::fmt::Debug for rustic_core::blob::packer::PackerStats
pub fn rustic_core::blob::packer::PackerStats::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::blob::packer::PackerStats
impl core::marker::Send for rustic_core::blob::packer::PackerStats
impl core::marker::Sync for rustic_core::blob::packer::PackerStats
impl core::marker::Unpin for rustic_core::blob::packer::PackerStats
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::blob::packer::PackerStats
impl core::panic::unwind_safe::UnwindSafe for rustic_core::blob::packer::PackerStats
impl<T, U> core::convert::Into<U> for rustic_core::blob::packer::PackerStats where U: core::convert::From<T>
pub fn rustic_core::blob::packer::PackerStats::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::blob::packer::PackerStats where U: core::convert::Into<T>
pub type rustic_core::blob::packer::PackerStats::Error = core::convert::Infallible
pub fn rustic_core::blob::packer::PackerStats::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::blob::packer::PackerStats where U: core::convert::TryFrom<T>
pub type rustic_core::blob::packer::PackerStats::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::blob::packer::PackerStats::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::blob::packer::PackerStats where T: core::clone::Clone
pub type rustic_core::blob::packer::PackerStats::Owned = T
pub fn rustic_core::blob::packer::PackerStats::clone_into(&self, target: &mut T)
pub fn rustic_core::blob::packer::PackerStats::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::blob::packer::PackerStats where T: 'static + core::marker::Sized
pub fn rustic_core::blob::packer::PackerStats::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::blob::packer::PackerStats where T: core::marker::Sized
pub fn rustic_core::blob::packer::PackerStats::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::blob::packer::PackerStats where T: core::marker::Sized
pub fn rustic_core::blob::packer::PackerStats::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::blob::packer::PackerStats
pub fn rustic_core::blob::packer::PackerStats::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::blob::packer::PackerStats
pub type rustic_core::blob::packer::PackerStats::Init = T
pub const rustic_core::blob::packer::PackerStats::ALIGN: usize
pub unsafe fn rustic_core::blob::packer::PackerStats::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::blob::packer::PackerStats::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::blob::packer::PackerStats::drop(ptr: usize)
pub unsafe fn rustic_core::blob::packer::PackerStats::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::blob::packer::PackerStats
impl<T> tracing::instrument::WithSubscriber for rustic_core::blob::packer::PackerStats
impl<T> typenum::type_operators::Same<T> for rustic_core::blob::packer::PackerStats
pub type rustic_core::blob::packer::PackerStats::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::blob::packer::PackerStats where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::blob::packer::PackerStats::vzip(self) -> V
pub struct rustic_core::blob::packer::RawPacker<BE: rustic_core::backend::decrypt::DecryptWriteBackend>
pub rustic_core::blob::packer::RawPacker::be: BE
pub rustic_core::blob::packer::RawPacker::blob_type: rustic_core::blob::BlobType
pub rustic_core::blob::packer::RawPacker::count: u32
pub rustic_core::blob::packer::RawPacker::created: std::time::SystemTime
pub rustic_core::blob::packer::RawPacker::file: bytes::bytes_mut::BytesMut
pub rustic_core::blob::packer::RawPacker::file_writer: core::option::Option<rustic_core::blob::packer::Actor>
pub rustic_core::blob::packer::RawPacker::index: rustic_core::repofile::indexfile::IndexPack
pub rustic_core::blob::packer::RawPacker::pack_sizer: rustic_core::blob::packer::PackSizer
pub rustic_core::blob::packer::RawPacker::size: u32
pub rustic_core::blob::packer::RawPacker::stats: rustic_core::blob::packer::PackerStats
impl<BE: rustic_core::backend::decrypt::DecryptWriteBackend> rustic_core::blob::packer::RawPacker<BE>
pub fn rustic_core::blob::packer::RawPacker<BE>::add_raw(&mut self, data: &[u8], id: &rustic_core::id::Id, data_len: u64, uncompressed_length: core::option::Option<core::num::nonzero::NonZeroU32>, size_limit: core::option::Option<u32>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::blob::packer::RawPacker<BE>::finalize(&mut self) -> rustic_core::error::RusticResult<rustic_core::blob::packer::PackerStats>
pub fn rustic_core::blob::packer::RawPacker<BE>::has(&self, id: &rustic_core::id::Id) -> bool
pub fn rustic_core::blob::packer::RawPacker<BE>::new(be: BE, blob_type: rustic_core::blob::BlobType, indexer: alloc::sync::Arc<std::sync::rwlock::RwLock<rustic_core::index::indexer::Indexer<BE>>>, config: &rustic_core::repofile::configfile::ConfigFile, total_size: u64) -> Self
pub fn rustic_core::blob::packer::RawPacker<BE>::save(&mut self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::blob::packer::RawPacker<BE>::write_data(&mut self, data: &[u8]) -> rustic_core::error::RusticResult<u32>
pub fn rustic_core::blob::packer::RawPacker<BE>::write_header(&mut self) -> rustic_core::error::RusticResult<()>
impl<BE> core::marker::Send for rustic_core::blob::packer::RawPacker<BE>
impl<BE> core::marker::Sync for rustic_core::blob::packer::RawPacker<BE>
impl<BE> core::marker::Unpin for rustic_core::blob::packer::RawPacker<BE> where BE: core::marker::Unpin
impl<BE> core::panic::unwind_safe::RefUnwindSafe for rustic_core::blob::packer::RawPacker<BE> where BE: core::panic::unwind_safe::RefUnwindSafe
impl<BE> core::panic::unwind_safe::UnwindSafe for rustic_core::blob::packer::RawPacker<BE> where BE: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::blob::packer::RawPacker<BE> where U: core::convert::From<T>
pub fn rustic_core::blob::packer::RawPacker<BE>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::blob::packer::RawPacker<BE> where U: core::convert::Into<T>
pub type rustic_core::blob::packer::RawPacker<BE>::Error = core::convert::Infallible
pub fn rustic_core::blob::packer::RawPacker<BE>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::blob::packer::RawPacker<BE> where U: core::convert::TryFrom<T>
pub type rustic_core::blob::packer::RawPacker<BE>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::blob::packer::RawPacker<BE>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::blob::packer::RawPacker<BE> where T: 'static + core::marker::Sized
pub fn rustic_core::blob::packer::RawPacker<BE>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::blob::packer::RawPacker<BE> where T: core::marker::Sized
pub fn rustic_core::blob::packer::RawPacker<BE>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::blob::packer::RawPacker<BE> where T: core::marker::Sized
pub fn rustic_core::blob::packer::RawPacker<BE>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::blob::packer::RawPacker<BE>
pub fn rustic_core::blob::packer::RawPacker<BE>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::blob::packer::RawPacker<BE>
pub type rustic_core::blob::packer::RawPacker<BE>::Init = T
pub const rustic_core::blob::packer::RawPacker<BE>::ALIGN: usize
pub unsafe fn rustic_core::blob::packer::RawPacker<BE>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::blob::packer::RawPacker<BE>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::blob::packer::RawPacker<BE>::drop(ptr: usize)
pub unsafe fn rustic_core::blob::packer::RawPacker<BE>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::blob::packer::RawPacker<BE>
impl<T> tracing::instrument::WithSubscriber for rustic_core::blob::packer::RawPacker<BE>
impl<T> typenum::type_operators::Same<T> for rustic_core::blob::packer::RawPacker<BE>
pub type rustic_core::blob::packer::RawPacker<BE>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::blob::packer::RawPacker<BE> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::blob::packer::RawPacker<BE>::vzip(self) -> V
pub struct rustic_core::blob::packer::Repacker<BE> where BE: rustic_core::backend::decrypt::DecryptFullBackend
pub rustic_core::blob::packer::Repacker::be: BE
pub rustic_core::blob::packer::Repacker::packer: rustic_core::blob::packer::Packer<BE>
pub rustic_core::blob::packer::Repacker::size_limit: u32
impl<BE: rustic_core::backend::decrypt::DecryptFullBackend> rustic_core::blob::packer::Repacker<BE>
pub fn rustic_core::blob::packer::Repacker<BE>::add(&self, pack_id: &rustic_core::id::Id, blob: &rustic_core::repofile::indexfile::IndexBlob) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::blob::packer::Repacker<BE>::add_fast(&self, pack_id: &rustic_core::id::Id, blob: &rustic_core::repofile::indexfile::IndexBlob) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::blob::packer::Repacker<BE>::finalize(self) -> rustic_core::error::RusticResult<rustic_core::blob::packer::PackerStats>
pub fn rustic_core::blob::packer::Repacker<BE>::new(be: BE, blob_type: rustic_core::blob::BlobType, indexer: alloc::sync::Arc<std::sync::rwlock::RwLock<rustic_core::index::indexer::Indexer<BE>>>, config: &rustic_core::repofile::configfile::ConfigFile, total_size: u64) -> rustic_core::error::RusticResult<Self>
impl<BE> core::marker::Send for rustic_core::blob::packer::Repacker<BE>
impl<BE> core::marker::Sync for rustic_core::blob::packer::Repacker<BE>
impl<BE> core::marker::Unpin for rustic_core::blob::packer::Repacker<BE> where BE: core::marker::Unpin
impl<BE> core::panic::unwind_safe::RefUnwindSafe for rustic_core::blob::packer::Repacker<BE> where BE: core::panic::unwind_safe::RefUnwindSafe
impl<BE> core::panic::unwind_safe::UnwindSafe for rustic_core::blob::packer::Repacker<BE> where BE: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::blob::packer::Repacker<BE> where U: core::convert::From<T>
pub fn rustic_core::blob::packer::Repacker<BE>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::blob::packer::Repacker<BE> where U: core::convert::Into<T>
pub type rustic_core::blob::packer::Repacker<BE>::Error = core::convert::Infallible
pub fn rustic_core::blob::packer::Repacker<BE>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::blob::packer::Repacker<BE> where U: core::convert::TryFrom<T>
pub type rustic_core::blob::packer::Repacker<BE>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::blob::packer::Repacker<BE>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::blob::packer::Repacker<BE> where T: 'static + core::marker::Sized
pub fn rustic_core::blob::packer::Repacker<BE>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::blob::packer::Repacker<BE> where T: core::marker::Sized
pub fn rustic_core::blob::packer::Repacker<BE>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::blob::packer::Repacker<BE> where T: core::marker::Sized
pub fn rustic_core::blob::packer::Repacker<BE>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::blob::packer::Repacker<BE>
pub fn rustic_core::blob::packer::Repacker<BE>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::blob::packer::Repacker<BE>
pub type rustic_core::blob::packer::Repacker<BE>::Init = T
pub const rustic_core::blob::packer::Repacker<BE>::ALIGN: usize
pub unsafe fn rustic_core::blob::packer::Repacker<BE>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::blob::packer::Repacker<BE>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::blob::packer::Repacker<BE>::drop(ptr: usize)
pub unsafe fn rustic_core::blob::packer::Repacker<BE>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::blob::packer::Repacker<BE>
impl<T> tracing::instrument::WithSubscriber for rustic_core::blob::packer::Repacker<BE>
impl<T> typenum::type_operators::Same<T> for rustic_core::blob::packer::Repacker<BE>
pub type rustic_core::blob::packer::Repacker<BE>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::blob::packer::Repacker<BE> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::blob::packer::Repacker<BE>::vzip(self) -> V
pub mod rustic_core::blob::tree
pub mod rustic_core::blob::tree::constants
pub const rustic_core::blob::tree::constants::MAX_TREE_LOADER: usize = 4usize
pub struct rustic_core::blob::tree::NodeStreamer<BE> where BE: rustic_core::index::IndexedBackend
pub rustic_core::blob::tree::NodeStreamer::be: BE
pub rustic_core::blob::tree::NodeStreamer::inner: alloc::vec::into_iter::IntoIter<rustic_core::backend::node::Node>
pub rustic_core::blob::tree::NodeStreamer::open_iterators: alloc::vec::Vec<alloc::vec::into_iter::IntoIter<rustic_core::backend::node::Node>>
pub rustic_core::blob::tree::NodeStreamer::overrides: core::option::Option<ignore::overrides::Override>
pub rustic_core::blob::tree::NodeStreamer::path: std::path::PathBuf
pub rustic_core::blob::tree::NodeStreamer::recursive: bool
impl<BE> rustic_core::blob::tree::NodeStreamer<BE> where BE: rustic_core::index::IndexedBackend
pub fn rustic_core::blob::tree::NodeStreamer<BE>::new(be: BE, node: &rustic_core::backend::node::Node) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::blob::tree::NodeStreamer<BE>::new_streamer(be: BE, node: &rustic_core::backend::node::Node, overrides: core::option::Option<ignore::overrides::Override>, recursive: bool) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::blob::tree::NodeStreamer<BE>::new_with_glob(be: BE, node: &rustic_core::backend::node::Node, opts: &rustic_core::blob::tree::TreeStreamerOptions) -> rustic_core::error::RusticResult<Self>
impl<BE> core::iter::traits::iterator::Iterator for rustic_core::blob::tree::NodeStreamer<BE> where BE: rustic_core::index::IndexedBackend
pub type rustic_core::blob::tree::NodeStreamer<BE>::Item = core::result::Result<(std::path::PathBuf, rustic_core::backend::node::Node), rustic_core::error::RusticError>
pub fn rustic_core::blob::tree::NodeStreamer<BE>::next(&mut self) -> core::option::Option<Self::Item>
impl<BE> core::clone::Clone for rustic_core::blob::tree::NodeStreamer<BE> where BE: rustic_core::index::IndexedBackend + core::clone::Clone
pub fn rustic_core::blob::tree::NodeStreamer<BE>::clone(&self) -> rustic_core::blob::tree::NodeStreamer<BE>
impl<BE> core::fmt::Debug for rustic_core::blob::tree::NodeStreamer<BE> where BE: rustic_core::index::IndexedBackend + core::fmt::Debug
pub fn rustic_core::blob::tree::NodeStreamer<BE>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<BE> core::marker::Send for rustic_core::blob::tree::NodeStreamer<BE>
impl<BE> core::marker::Sync for rustic_core::blob::tree::NodeStreamer<BE>
impl<BE> core::marker::Unpin for rustic_core::blob::tree::NodeStreamer<BE> where BE: core::marker::Unpin
impl<BE> core::panic::unwind_safe::RefUnwindSafe for rustic_core::blob::tree::NodeStreamer<BE> where BE: core::panic::unwind_safe::RefUnwindSafe
impl<BE> core::panic::unwind_safe::UnwindSafe for rustic_core::blob::tree::NodeStreamer<BE> where BE: core::panic::unwind_safe::UnwindSafe
impl<I> core::iter::traits::collect::IntoIterator for rustic_core::blob::tree::NodeStreamer<BE> where I: core::iter::traits::iterator::Iterator
pub type rustic_core::blob::tree::NodeStreamer<BE>::IntoIter = I
pub type rustic_core::blob::tree::NodeStreamer<BE>::Item = <I as core::iter::traits::iterator::Iterator>::Item
pub fn rustic_core::blob::tree::NodeStreamer<BE>::into_iter(self) -> I
impl<I> pariter::IteratorExt for rustic_core::blob::tree::NodeStreamer<BE> where I: core::iter::traits::iterator::Iterator
impl<I> rand::seq::IteratorRandom for rustic_core::blob::tree::NodeStreamer<BE> where I: core::iter::traits::iterator::Iterator
impl<T, U> core::convert::Into<U> for rustic_core::blob::tree::NodeStreamer<BE> where U: core::convert::From<T>
pub fn rustic_core::blob::tree::NodeStreamer<BE>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::blob::tree::NodeStreamer<BE> where U: core::convert::Into<T>
pub type rustic_core::blob::tree::NodeStreamer<BE>::Error = core::convert::Infallible
pub fn rustic_core::blob::tree::NodeStreamer<BE>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::blob::tree::NodeStreamer<BE> where U: core::convert::TryFrom<T>
pub type rustic_core::blob::tree::NodeStreamer<BE>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::blob::tree::NodeStreamer<BE>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::blob::tree::NodeStreamer<BE> where T: core::clone::Clone
pub type rustic_core::blob::tree::NodeStreamer<BE>::Owned = T
pub fn rustic_core::blob::tree::NodeStreamer<BE>::clone_into(&self, target: &mut T)
pub fn rustic_core::blob::tree::NodeStreamer<BE>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::blob::tree::NodeStreamer<BE> where T: 'static + core::marker::Sized
pub fn rustic_core::blob::tree::NodeStreamer<BE>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::blob::tree::NodeStreamer<BE> where T: core::marker::Sized
pub fn rustic_core::blob::tree::NodeStreamer<BE>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::blob::tree::NodeStreamer<BE> where T: core::marker::Sized
pub fn rustic_core::blob::tree::NodeStreamer<BE>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::blob::tree::NodeStreamer<BE>
pub fn rustic_core::blob::tree::NodeStreamer<BE>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::blob::tree::NodeStreamer<BE>
pub type rustic_core::blob::tree::NodeStreamer<BE>::Init = T
pub const rustic_core::blob::tree::NodeStreamer<BE>::ALIGN: usize
pub unsafe fn rustic_core::blob::tree::NodeStreamer<BE>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::blob::tree::NodeStreamer<BE>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::blob::tree::NodeStreamer<BE>::drop(ptr: usize)
pub unsafe fn rustic_core::blob::tree::NodeStreamer<BE>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> itertools::Itertools for rustic_core::blob::tree::NodeStreamer<BE> where T: core::iter::traits::iterator::Iterator + core::marker::Sized
impl<T> tracing::instrument::Instrument for rustic_core::blob::tree::NodeStreamer<BE>
impl<T> tracing::instrument::WithSubscriber for rustic_core::blob::tree::NodeStreamer<BE>
impl<T> typenum::type_operators::Same<T> for rustic_core::blob::tree::NodeStreamer<BE>
pub type rustic_core::blob::tree::NodeStreamer<BE>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::blob::tree::NodeStreamer<BE> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::blob::tree::NodeStreamer<BE>::vzip(self) -> V
pub struct rustic_core::blob::tree::Tree
pub rustic_core::blob::tree::Tree::nodes: alloc::vec::Vec<rustic_core::backend::node::Node>
impl rustic_core::blob::tree::Tree
pub fn rustic_core::blob::tree::Tree::add(&mut self, node: rustic_core::backend::node::Node)
pub fn rustic_core::blob::tree::Tree::from_backend(be: &impl rustic_core::index::IndexedBackend, id: rustic_core::id::Id) -> rustic_core::error::RusticResult<Self>
pub const fn rustic_core::blob::tree::Tree::new() -> Self
pub fn rustic_core::blob::tree::Tree::node_from_path(be: &impl rustic_core::index::IndexedBackend, id: rustic_core::id::Id, path: &std::path::Path) -> rustic_core::error::RusticResult<rustic_core::backend::node::Node>
pub fn rustic_core::blob::tree::Tree::serialize(&self) -> rustic_core::error::RusticResult<(alloc::vec::Vec<u8>, rustic_core::id::Id)>
impl core::iter::traits::collect::IntoIterator for rustic_core::blob::tree::Tree
pub type rustic_core::blob::tree::Tree::IntoIter = alloc::vec::into_iter::IntoIter<rustic_core::backend::node::Node, alloc::alloc::Global>
pub type rustic_core::blob::tree::Tree::Item = rustic_core::backend::node::Node
pub fn rustic_core::blob::tree::Tree::into_iter(self) -> Self::IntoIter
impl core::clone::Clone for rustic_core::blob::tree::Tree
pub fn rustic_core::blob::tree::Tree::clone(&self) -> rustic_core::blob::tree::Tree
impl core::default::Default for rustic_core::blob::tree::Tree
pub fn rustic_core::blob::tree::Tree::default() -> rustic_core::blob::tree::Tree
impl core::fmt::Debug for rustic_core::blob::tree::Tree
pub fn rustic_core::blob::tree::Tree::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::blob::tree::Tree
pub fn rustic_core::blob::tree::Tree::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::blob::tree::Tree
pub fn rustic_core::blob::tree::Tree::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::blob::tree::Tree
impl core::marker::Sync for rustic_core::blob::tree::Tree
impl core::marker::Unpin for rustic_core::blob::tree::Tree
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::blob::tree::Tree
impl core::panic::unwind_safe::UnwindSafe for rustic_core::blob::tree::Tree
impl<T, U> core::convert::Into<U> for rustic_core::blob::tree::Tree where U: core::convert::From<T>
pub fn rustic_core::blob::tree::Tree::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::blob::tree::Tree where U: core::convert::Into<T>
pub type rustic_core::blob::tree::Tree::Error = core::convert::Infallible
pub fn rustic_core::blob::tree::Tree::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::blob::tree::Tree where U: core::convert::TryFrom<T>
pub type rustic_core::blob::tree::Tree::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::blob::tree::Tree::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::blob::tree::Tree where T: core::clone::Clone
pub type rustic_core::blob::tree::Tree::Owned = T
pub fn rustic_core::blob::tree::Tree::clone_into(&self, target: &mut T)
pub fn rustic_core::blob::tree::Tree::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::blob::tree::Tree where T: 'static + core::marker::Sized
pub fn rustic_core::blob::tree::Tree::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::blob::tree::Tree where T: core::marker::Sized
pub fn rustic_core::blob::tree::Tree::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::blob::tree::Tree where T: core::marker::Sized
pub fn rustic_core::blob::tree::Tree::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::blob::tree::Tree
pub fn rustic_core::blob::tree::Tree::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::blob::tree::Tree
pub type rustic_core::blob::tree::Tree::Init = T
pub const rustic_core::blob::tree::Tree::ALIGN: usize
pub unsafe fn rustic_core::blob::tree::Tree::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::blob::tree::Tree::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::blob::tree::Tree::drop(ptr: usize)
pub unsafe fn rustic_core::blob::tree::Tree::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::blob::tree::Tree where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::blob::tree::Tree
impl<T> tracing::instrument::WithSubscriber for rustic_core::blob::tree::Tree
impl<T> typenum::type_operators::Same<T> for rustic_core::blob::tree::Tree
pub type rustic_core::blob::tree::Tree::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::blob::tree::Tree where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::blob::tree::Tree::vzip(self) -> V
pub struct rustic_core::blob::tree::TreeStreamerOnce<P>
pub rustic_core::blob::tree::TreeStreamerOnce::counter: alloc::vec::Vec<usize>
pub rustic_core::blob::tree::TreeStreamerOnce::finished_ids: usize
pub rustic_core::blob::tree::TreeStreamerOnce::p: P
pub rustic_core::blob::tree::TreeStreamerOnce::queue_in: core::option::Option<crossbeam_channel::channel::Sender<(std::path::PathBuf, rustic_core::id::Id, usize)>>
pub rustic_core::blob::tree::TreeStreamerOnce::queue_out: crossbeam_channel::channel::Receiver<rustic_core::error::RusticResult<(std::path::PathBuf, rustic_core::blob::tree::Tree, usize)>>
pub rustic_core::blob::tree::TreeStreamerOnce::visited: std::collections::hash::set::HashSet<rustic_core::id::Id>
impl<P: rustic_core::progress::Progress> rustic_core::blob::tree::TreeStreamerOnce<P>
pub fn rustic_core::blob::tree::TreeStreamerOnce<P>::add_pending(&mut self, path: std::path::PathBuf, id: rustic_core::id::Id, count: usize) -> rustic_core::error::RusticResult<bool>
pub fn rustic_core::blob::tree::TreeStreamerOnce<P>::new<BE: rustic_core::index::IndexedBackend>(be: BE, ids: alloc::vec::Vec<rustic_core::id::Id>, p: P) -> rustic_core::error::RusticResult<Self>
impl<P: rustic_core::progress::Progress> core::iter::traits::iterator::Iterator for rustic_core::blob::tree::TreeStreamerOnce<P>
pub type rustic_core::blob::tree::TreeStreamerOnce<P>::Item = core::result::Result<(std::path::PathBuf, rustic_core::blob::tree::Tree), rustic_core::error::RusticError>
pub fn rustic_core::blob::tree::TreeStreamerOnce<P>::next(&mut self) -> core::option::Option<Self::Item>
impl<P: core::fmt::Debug> core::fmt::Debug for rustic_core::blob::tree::TreeStreamerOnce<P>
pub fn rustic_core::blob::tree::TreeStreamerOnce<P>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<P> core::marker::Send for rustic_core::blob::tree::TreeStreamerOnce<P> where P: core::marker::Send
impl<P> core::marker::Sync for rustic_core::blob::tree::TreeStreamerOnce<P> where P: core::marker::Sync
impl<P> core::marker::Unpin for rustic_core::blob::tree::TreeStreamerOnce<P> where P: core::marker::Unpin
impl<P> core::panic::unwind_safe::RefUnwindSafe for rustic_core::blob::tree::TreeStreamerOnce<P> where P: core::panic::unwind_safe::RefUnwindSafe
impl<P> core::panic::unwind_safe::UnwindSafe for rustic_core::blob::tree::TreeStreamerOnce<P> where P: core::panic::unwind_safe::UnwindSafe
impl<I> core::iter::traits::collect::IntoIterator for rustic_core::blob::tree::TreeStreamerOnce<P> where I: core::iter::traits::iterator::Iterator
pub type rustic_core::blob::tree::TreeStreamerOnce<P>::IntoIter = I
pub type rustic_core::blob::tree::TreeStreamerOnce<P>::Item = <I as core::iter::traits::iterator::Iterator>::Item
pub fn rustic_core::blob::tree::TreeStreamerOnce<P>::into_iter(self) -> I
impl<I> pariter::IteratorExt for rustic_core::blob::tree::TreeStreamerOnce<P> where I: core::iter::traits::iterator::Iterator
impl<I> rand::seq::IteratorRandom for rustic_core::blob::tree::TreeStreamerOnce<P> where I: core::iter::traits::iterator::Iterator
impl<T, U> core::convert::Into<U> for rustic_core::blob::tree::TreeStreamerOnce<P> where U: core::convert::From<T>
pub fn rustic_core::blob::tree::TreeStreamerOnce<P>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::blob::tree::TreeStreamerOnce<P> where U: core::convert::Into<T>
pub type rustic_core::blob::tree::TreeStreamerOnce<P>::Error = core::convert::Infallible
pub fn rustic_core::blob::tree::TreeStreamerOnce<P>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::blob::tree::TreeStreamerOnce<P> where U: core::convert::TryFrom<T>
pub type rustic_core::blob::tree::TreeStreamerOnce<P>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::blob::tree::TreeStreamerOnce<P>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::blob::tree::TreeStreamerOnce<P> where T: 'static + core::marker::Sized
pub fn rustic_core::blob::tree::TreeStreamerOnce<P>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::blob::tree::TreeStreamerOnce<P> where T: core::marker::Sized
pub fn rustic_core::blob::tree::TreeStreamerOnce<P>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::blob::tree::TreeStreamerOnce<P> where T: core::marker::Sized
pub fn rustic_core::blob::tree::TreeStreamerOnce<P>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::blob::tree::TreeStreamerOnce<P>
pub fn rustic_core::blob::tree::TreeStreamerOnce<P>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::blob::tree::TreeStreamerOnce<P>
pub type rustic_core::blob::tree::TreeStreamerOnce<P>::Init = T
pub const rustic_core::blob::tree::TreeStreamerOnce<P>::ALIGN: usize
pub unsafe fn rustic_core::blob::tree::TreeStreamerOnce<P>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::blob::tree::TreeStreamerOnce<P>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::blob::tree::TreeStreamerOnce<P>::drop(ptr: usize)
pub unsafe fn rustic_core::blob::tree::TreeStreamerOnce<P>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> itertools::Itertools for rustic_core::blob::tree::TreeStreamerOnce<P> where T: core::iter::traits::iterator::Iterator + core::marker::Sized
impl<T> tracing::instrument::Instrument for rustic_core::blob::tree::TreeStreamerOnce<P>
impl<T> tracing::instrument::WithSubscriber for rustic_core::blob::tree::TreeStreamerOnce<P>
impl<T> typenum::type_operators::Same<T> for rustic_core::blob::tree::TreeStreamerOnce<P>
pub type rustic_core::blob::tree::TreeStreamerOnce<P>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::blob::tree::TreeStreamerOnce<P> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::blob::tree::TreeStreamerOnce<P>::vzip(self) -> V
pub struct rustic_core::blob::tree::TreeStreamerOptions
pub rustic_core::blob::tree::TreeStreamerOptions::glob: alloc::vec::Vec<alloc::string::String>
pub rustic_core::blob::tree::TreeStreamerOptions::glob_file: alloc::vec::Vec<alloc::string::String>
pub rustic_core::blob::tree::TreeStreamerOptions::iglob: alloc::vec::Vec<alloc::string::String>
pub rustic_core::blob::tree::TreeStreamerOptions::iglob_file: alloc::vec::Vec<alloc::string::String>
pub rustic_core::blob::tree::TreeStreamerOptions::recursive: bool
impl rustic_core::blob::tree::TreeStreamerOptions
pub fn rustic_core::blob::tree::TreeStreamerOptions::glob(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::blob::tree::TreeStreamerOptions::glob_file(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::blob::tree::TreeStreamerOptions::iglob(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::blob::tree::TreeStreamerOptions::iglob_file(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::blob::tree::TreeStreamerOptions::recursive(self, value: impl core::convert::Into<bool>) -> Self
impl core::default::Default for rustic_core::blob::tree::TreeStreamerOptions
pub fn rustic_core::blob::tree::TreeStreamerOptions::default() -> Self
impl core::clone::Clone for rustic_core::blob::tree::TreeStreamerOptions
pub fn rustic_core::blob::tree::TreeStreamerOptions::clone(&self) -> rustic_core::blob::tree::TreeStreamerOptions
impl core::fmt::Debug for rustic_core::blob::tree::TreeStreamerOptions
pub fn rustic_core::blob::tree::TreeStreamerOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::blob::tree::TreeStreamerOptions
impl core::marker::Sync for rustic_core::blob::tree::TreeStreamerOptions
impl core::marker::Unpin for rustic_core::blob::tree::TreeStreamerOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::blob::tree::TreeStreamerOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::blob::tree::TreeStreamerOptions
impl<T, U> core::convert::Into<U> for rustic_core::blob::tree::TreeStreamerOptions where U: core::convert::From<T>
pub fn rustic_core::blob::tree::TreeStreamerOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::blob::tree::TreeStreamerOptions where U: core::convert::Into<T>
pub type rustic_core::blob::tree::TreeStreamerOptions::Error = core::convert::Infallible
pub fn rustic_core::blob::tree::TreeStreamerOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::blob::tree::TreeStreamerOptions where U: core::convert::TryFrom<T>
pub type rustic_core::blob::tree::TreeStreamerOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::blob::tree::TreeStreamerOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::blob::tree::TreeStreamerOptions where T: core::clone::Clone
pub type rustic_core::blob::tree::TreeStreamerOptions::Owned = T
pub fn rustic_core::blob::tree::TreeStreamerOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::blob::tree::TreeStreamerOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::blob::tree::TreeStreamerOptions where T: 'static + core::marker::Sized
pub fn rustic_core::blob::tree::TreeStreamerOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::blob::tree::TreeStreamerOptions where T: core::marker::Sized
pub fn rustic_core::blob::tree::TreeStreamerOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::blob::tree::TreeStreamerOptions where T: core::marker::Sized
pub fn rustic_core::blob::tree::TreeStreamerOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::blob::tree::TreeStreamerOptions
pub fn rustic_core::blob::tree::TreeStreamerOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::blob::tree::TreeStreamerOptions
pub type rustic_core::blob::tree::TreeStreamerOptions::Init = T
pub const rustic_core::blob::tree::TreeStreamerOptions::ALIGN: usize
pub unsafe fn rustic_core::blob::tree::TreeStreamerOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::blob::tree::TreeStreamerOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::blob::tree::TreeStreamerOptions::drop(ptr: usize)
pub unsafe fn rustic_core::blob::tree::TreeStreamerOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::blob::tree::TreeStreamerOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::blob::tree::TreeStreamerOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::blob::tree::TreeStreamerOptions
pub type rustic_core::blob::tree::TreeStreamerOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::blob::tree::TreeStreamerOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::blob::tree::TreeStreamerOptions::vzip(self) -> V
pub fn rustic_core::blob::tree::comp_to_osstr(p: std::path::Component<'_>) -> rustic_core::error::RusticResult<core::option::Option<std::ffi::os_str::OsString>>
pub fn rustic_core::blob::tree::deserialize_null_default<'de, D, T>(deserializer: D) -> core::result::Result<T, <D as serde::de::Deserializer>::Error> where T: core::default::Default + serde::de::Deserialize<'de>, D: serde::de::Deserializer<'de>
pub fn rustic_core::blob::tree::merge_nodes(be: &impl rustic_core::index::IndexedBackend, nodes: alloc::vec::Vec<rustic_core::backend::node::Node>, cmp: &impl core::ops::function::Fn(&rustic_core::backend::node::Node, &rustic_core::backend::node::Node) -> core::cmp::Ordering, save: &impl core::ops::function::Fn(rustic_core::blob::tree::Tree) -> rustic_core::error::RusticResult<(rustic_core::id::Id, u64)>, summary: &mut rustic_core::repofile::snapshotfile::SnapshotSummary) -> rustic_core::error::RusticResult<rustic_core::backend::node::Node>
pub fn rustic_core::blob::tree::merge_trees(be: &impl rustic_core::index::IndexedBackend, trees: &[rustic_core::id::Id], cmp: &impl core::ops::function::Fn(&rustic_core::backend::node::Node, &rustic_core::backend::node::Node) -> core::cmp::Ordering, save: &impl core::ops::function::Fn(rustic_core::blob::tree::Tree) -> rustic_core::error::RusticResult<(rustic_core::id::Id, u64)>, summary: &mut rustic_core::repofile::snapshotfile::SnapshotSummary) -> rustic_core::error::RusticResult<rustic_core::id::Id>
pub type rustic_core::blob::tree::NodeStreamItem = rustic_core::error::RusticResult<(std::path::PathBuf, rustic_core::backend::node::Node)>
pub type rustic_core::blob::tree::TreeStreamItem = rustic_core::error::RusticResult<(std::path::PathBuf, rustic_core::blob::tree::Tree)>
pub enum rustic_core::blob::BlobType
pub rustic_core::blob::BlobType::Data
pub rustic_core::blob::BlobType::Tree
impl rustic_core::blob::BlobType
pub const fn rustic_core::blob::BlobType::is_cacheable(self) -> bool
impl core::clone::Clone for rustic_core::blob::BlobType
pub fn rustic_core::blob::BlobType::clone(&self) -> rustic_core::blob::BlobType
impl core::cmp::Eq for rustic_core::blob::BlobType
impl core::cmp::Ord for rustic_core::blob::BlobType
pub fn rustic_core::blob::BlobType::cmp(&self, other: &rustic_core::blob::BlobType) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::blob::BlobType> for rustic_core::blob::BlobType
pub fn rustic_core::blob::BlobType::eq(&self, other: &rustic_core::blob::BlobType) -> bool
impl core::cmp::PartialOrd<rustic_core::blob::BlobType> for rustic_core::blob::BlobType
pub fn rustic_core::blob::BlobType::partial_cmp(&self, other: &rustic_core::blob::BlobType) -> core::option::Option<core::cmp::Ordering>
impl core::fmt::Debug for rustic_core::blob::BlobType
pub fn rustic_core::blob::BlobType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for rustic_core::blob::BlobType
pub fn rustic_core::blob::BlobType::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::Copy for rustic_core::blob::BlobType
impl core::marker::StructuralEq for rustic_core::blob::BlobType
impl core::marker::StructuralPartialEq for rustic_core::blob::BlobType
impl enum_map::internal::Enum for rustic_core::blob::BlobType
pub const rustic_core::blob::BlobType::LENGTH: usize
pub fn rustic_core::blob::BlobType::from_usize(value: usize) -> Self
pub fn rustic_core::blob::BlobType::into_usize(self) -> usize
impl serde::ser::Serialize for rustic_core::blob::BlobType
pub fn rustic_core::blob::BlobType::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::blob::BlobType
pub fn rustic_core::blob::BlobType::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl<V> enum_map::internal::EnumArray<V> for rustic_core::blob::BlobType
pub type rustic_core::blob::BlobType::Array = [V; 2]
impl core::marker::Send for rustic_core::blob::BlobType
impl core::marker::Sync for rustic_core::blob::BlobType
impl core::marker::Unpin for rustic_core::blob::BlobType
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::blob::BlobType
impl core::panic::unwind_safe::UnwindSafe for rustic_core::blob::BlobType
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::blob::BlobType where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::blob::BlobType::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::blob::BlobType where U: core::convert::From<T>
pub fn rustic_core::blob::BlobType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::blob::BlobType where U: core::convert::Into<T>
pub type rustic_core::blob::BlobType::Error = core::convert::Infallible
pub fn rustic_core::blob::BlobType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::blob::BlobType where U: core::convert::TryFrom<T>
pub type rustic_core::blob::BlobType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::blob::BlobType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::blob::BlobType where T: core::clone::Clone
pub type rustic_core::blob::BlobType::Owned = T
pub fn rustic_core::blob::BlobType::clone_into(&self, target: &mut T)
pub fn rustic_core::blob::BlobType::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::blob::BlobType where T: 'static + core::marker::Sized
pub fn rustic_core::blob::BlobType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::blob::BlobType where T: core::marker::Sized
pub fn rustic_core::blob::BlobType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::blob::BlobType where T: core::marker::Sized
pub fn rustic_core::blob::BlobType::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::blob::BlobType
pub fn rustic_core::blob::BlobType::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::blob::BlobType
pub type rustic_core::blob::BlobType::Init = T
pub const rustic_core::blob::BlobType::ALIGN: usize
pub unsafe fn rustic_core::blob::BlobType::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::blob::BlobType::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::blob::BlobType::drop(ptr: usize)
pub unsafe fn rustic_core::blob::BlobType::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::blob::BlobType where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::blob::BlobType
impl<T> tracing::instrument::WithSubscriber for rustic_core::blob::BlobType
impl<T> typenum::type_operators::Same<T> for rustic_core::blob::BlobType
pub type rustic_core::blob::BlobType::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::blob::BlobType where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::blob::BlobType::vzip(self) -> V
pub struct rustic_core::blob::Blob
pub rustic_core::blob::Blob::id: rustic_core::id::Id
pub rustic_core::blob::Blob::tpe: rustic_core::blob::BlobType
impl rustic_core::blob::Blob
pub fn rustic_core::blob::Blob::new(tpe: rustic_core::blob::BlobType, id: rustic_core::id::Id) -> rustic_core::blob::Blob
impl core::clone::Clone for rustic_core::blob::Blob
pub fn rustic_core::blob::Blob::clone(&self) -> rustic_core::blob::Blob
impl core::cmp::Eq for rustic_core::blob::Blob
impl core::cmp::PartialEq<rustic_core::blob::Blob> for rustic_core::blob::Blob
pub fn rustic_core::blob::Blob::eq(&self, other: &rustic_core::blob::Blob) -> bool
impl core::fmt::Debug for rustic_core::blob::Blob
pub fn rustic_core::blob::Blob::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::blob::Blob
impl core::marker::StructuralPartialEq for rustic_core::blob::Blob
impl core::marker::Send for rustic_core::blob::Blob
impl core::marker::Sync for rustic_core::blob::Blob
impl core::marker::Unpin for rustic_core::blob::Blob
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::blob::Blob
impl core::panic::unwind_safe::UnwindSafe for rustic_core::blob::Blob
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::blob::Blob where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::blob::Blob::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::blob::Blob where U: core::convert::From<T>
pub fn rustic_core::blob::Blob::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::blob::Blob where U: core::convert::Into<T>
pub type rustic_core::blob::Blob::Error = core::convert::Infallible
pub fn rustic_core::blob::Blob::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::blob::Blob where U: core::convert::TryFrom<T>
pub type rustic_core::blob::Blob::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::blob::Blob::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::blob::Blob where T: core::clone::Clone
pub type rustic_core::blob::Blob::Owned = T
pub fn rustic_core::blob::Blob::clone_into(&self, target: &mut T)
pub fn rustic_core::blob::Blob::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::blob::Blob where T: 'static + core::marker::Sized
pub fn rustic_core::blob::Blob::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::blob::Blob where T: core::marker::Sized
pub fn rustic_core::blob::Blob::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::blob::Blob where T: core::marker::Sized
pub fn rustic_core::blob::Blob::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::blob::Blob
pub fn rustic_core::blob::Blob::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::blob::Blob
pub type rustic_core::blob::Blob::Init = T
pub const rustic_core::blob::Blob::ALIGN: usize
pub unsafe fn rustic_core::blob::Blob::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::blob::Blob::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::blob::Blob::drop(ptr: usize)
pub unsafe fn rustic_core::blob::Blob::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::blob::Blob
impl<T> tracing::instrument::WithSubscriber for rustic_core::blob::Blob
impl<T> typenum::type_operators::Same<T> for rustic_core::blob::Blob
pub type rustic_core::blob::Blob::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::blob::Blob where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::blob::Blob::vzip(self) -> V
pub const rustic_core::blob::ALL_BLOB_TYPES: _
pub trait rustic_core::blob::Initialize<T: core::default::Default + core::marker::Sized>
pub fn rustic_core::blob::Initialize::init<F: core::ops::function::FnMut(rustic_core::blob::BlobType) -> T>(init: F) -> enum_map::EnumMap<rustic_core::blob::BlobType, T>
impl<T: core::default::Default> rustic_core::blob::Initialize<T> for enum_map::EnumMap<rustic_core::blob::BlobType, T>
pub fn enum_map::EnumMap<rustic_core::blob::BlobType, T>::init<F: core::ops::function::FnMut(rustic_core::blob::BlobType) -> T>(init: F) -> Self
pub type rustic_core::blob::BlobTypeMap<T> = enum_map::EnumMap<rustic_core::blob::BlobType, T>
pub mod rustic_core::cdc
pub mod rustic_core::cdc::polynom
pub trait rustic_core::cdc::polynom::Polynom
pub fn rustic_core::cdc::polynom::Polynom::degree(&self) -> i32
pub fn rustic_core::cdc::polynom::Polynom::modulo(self, m: Self) -> Self
impl rustic_core::cdc::polynom::Polynom for u64
pub fn u64::degree(&self) -> i32
pub fn u64::modulo(self, m: Self) -> Self
pub type rustic_core::cdc::polynom::Polynom64 = u64
pub mod rustic_core::cdc::rolling_hash
pub struct rustic_core::cdc::rolling_hash::Rabin64
pub rustic_core::cdc::rolling_hash::Rabin64::hash: u64
pub rustic_core::cdc::rolling_hash::Rabin64::mod_table: [u64; 256]
pub rustic_core::cdc::rolling_hash::Rabin64::out_table: [u64; 256]
pub rustic_core::cdc::rolling_hash::Rabin64::polynom_shift: i32
pub rustic_core::cdc::rolling_hash::Rabin64::window_data: alloc::vec::Vec<u8>
pub rustic_core::cdc::rolling_hash::Rabin64::window_index: usize
pub rustic_core::cdc::rolling_hash::Rabin64::window_size: usize
pub rustic_core::cdc::rolling_hash::Rabin64::window_size_mask: usize
impl rustic_core::cdc::rolling_hash::Rabin64
pub fn rustic_core::cdc::rolling_hash::Rabin64::calculate_mod_table(mod_polynom: u64) -> [u64; 256]
pub fn rustic_core::cdc::rolling_hash::Rabin64::calculate_out_table(window_size: usize, mod_polynom: u64) -> [u64; 256]
pub fn rustic_core::cdc::rolling_hash::Rabin64::new_with_polynom(window_size_nb_bits: u32, mod_polynom: u64) -> Self
impl rustic_core::cdc::rolling_hash::RollingHash64 for rustic_core::cdc::rolling_hash::Rabin64
pub fn rustic_core::cdc::rolling_hash::Rabin64::get_hash(&self) -> &u64
pub fn rustic_core::cdc::rolling_hash::Rabin64::prefill_window<I>(&mut self, iter: &mut I) -> usize where I: core::iter::traits::iterator::Iterator<Item = u8>
pub fn rustic_core::cdc::rolling_hash::Rabin64::reset(&mut self)
pub fn rustic_core::cdc::rolling_hash::Rabin64::reset_and_prefill_window<I>(&mut self, iter: &mut I) -> usize where I: core::iter::traits::iterator::Iterator<Item = u8>
pub fn rustic_core::cdc::rolling_hash::Rabin64::slide(&mut self, byte: u8)
impl core::clone::Clone for rustic_core::cdc::rolling_hash::Rabin64
pub fn rustic_core::cdc::rolling_hash::Rabin64::clone(&self) -> rustic_core::cdc::rolling_hash::Rabin64
impl core::marker::Send for rustic_core::cdc::rolling_hash::Rabin64
impl core::marker::Sync for rustic_core::cdc::rolling_hash::Rabin64
impl core::marker::Unpin for rustic_core::cdc::rolling_hash::Rabin64
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::cdc::rolling_hash::Rabin64
impl core::panic::unwind_safe::UnwindSafe for rustic_core::cdc::rolling_hash::Rabin64
impl<T, U> core::convert::Into<U> for rustic_core::cdc::rolling_hash::Rabin64 where U: core::convert::From<T>
pub fn rustic_core::cdc::rolling_hash::Rabin64::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::cdc::rolling_hash::Rabin64 where U: core::convert::Into<T>
pub type rustic_core::cdc::rolling_hash::Rabin64::Error = core::convert::Infallible
pub fn rustic_core::cdc::rolling_hash::Rabin64::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::cdc::rolling_hash::Rabin64 where U: core::convert::TryFrom<T>
pub type rustic_core::cdc::rolling_hash::Rabin64::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::cdc::rolling_hash::Rabin64::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::cdc::rolling_hash::Rabin64 where T: core::clone::Clone
pub type rustic_core::cdc::rolling_hash::Rabin64::Owned = T
pub fn rustic_core::cdc::rolling_hash::Rabin64::clone_into(&self, target: &mut T)
pub fn rustic_core::cdc::rolling_hash::Rabin64::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::cdc::rolling_hash::Rabin64 where T: 'static + core::marker::Sized
pub fn rustic_core::cdc::rolling_hash::Rabin64::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::cdc::rolling_hash::Rabin64 where T: core::marker::Sized
pub fn rustic_core::cdc::rolling_hash::Rabin64::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::cdc::rolling_hash::Rabin64 where T: core::marker::Sized
pub fn rustic_core::cdc::rolling_hash::Rabin64::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::cdc::rolling_hash::Rabin64
pub fn rustic_core::cdc::rolling_hash::Rabin64::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::cdc::rolling_hash::Rabin64
pub type rustic_core::cdc::rolling_hash::Rabin64::Init = T
pub const rustic_core::cdc::rolling_hash::Rabin64::ALIGN: usize
pub unsafe fn rustic_core::cdc::rolling_hash::Rabin64::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::cdc::rolling_hash::Rabin64::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::cdc::rolling_hash::Rabin64::drop(ptr: usize)
pub unsafe fn rustic_core::cdc::rolling_hash::Rabin64::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::cdc::rolling_hash::Rabin64
impl<T> tracing::instrument::WithSubscriber for rustic_core::cdc::rolling_hash::Rabin64
impl<T> typenum::type_operators::Same<T> for rustic_core::cdc::rolling_hash::Rabin64
pub type rustic_core::cdc::rolling_hash::Rabin64::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::cdc::rolling_hash::Rabin64 where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::cdc::rolling_hash::Rabin64::vzip(self) -> V
pub trait rustic_core::cdc::rolling_hash::RollingHash64
pub fn rustic_core::cdc::rolling_hash::RollingHash64::get_hash(&self) -> &u64
pub fn rustic_core::cdc::rolling_hash::RollingHash64::prefill_window<I>(&mut self, iter: &mut I) -> usize where I: core::iter::traits::iterator::Iterator<Item = u8>
pub fn rustic_core::cdc::rolling_hash::RollingHash64::reset(&mut self)
pub fn rustic_core::cdc::rolling_hash::RollingHash64::reset_and_prefill_window<I>(&mut self, iter: &mut I) -> usize where I: core::iter::traits::iterator::Iterator<Item = u8>
pub fn rustic_core::cdc::rolling_hash::RollingHash64::slide(&mut self, byte: u8)
impl rustic_core::cdc::rolling_hash::RollingHash64 for rustic_core::cdc::rolling_hash::Rabin64
pub fn rustic_core::cdc::rolling_hash::Rabin64::get_hash(&self) -> &u64
pub fn rustic_core::cdc::rolling_hash::Rabin64::prefill_window<I>(&mut self, iter: &mut I) -> usize where I: core::iter::traits::iterator::Iterator<Item = u8>
pub fn rustic_core::cdc::rolling_hash::Rabin64::reset(&mut self)
pub fn rustic_core::cdc::rolling_hash::Rabin64::reset_and_prefill_window<I>(&mut self, iter: &mut I) -> usize where I: core::iter::traits::iterator::Iterator<Item = u8>
pub fn rustic_core::cdc::rolling_hash::Rabin64::slide(&mut self, byte: u8)
pub mod rustic_core::chunker
pub mod rustic_core::chunker::constants
pub const rustic_core::chunker::constants::BUF_SIZE: _
pub const rustic_core::chunker::constants::KB: usize = 1_024usize
pub const rustic_core::chunker::constants::MAX_SIZE: _
pub const rustic_core::chunker::constants::MB: _
pub const rustic_core::chunker::constants::MIN_SIZE: _
pub const rustic_core::chunker::constants::RAND_POLY_MAX_TRIES: i32 = 1_000_000i32
pub const rustic_core::chunker::constants::SPLITMASK: _
pub struct rustic_core::chunker::ChunkIter<R: std::io::Read + core::marker::Send>
pub rustic_core::chunker::ChunkIter::buf: alloc::vec::Vec<u8>
pub rustic_core::chunker::ChunkIter::finished: bool
pub rustic_core::chunker::ChunkIter::max_size: usize
pub rustic_core::chunker::ChunkIter::min_size: usize
pub rustic_core::chunker::ChunkIter::pos: usize
pub rustic_core::chunker::ChunkIter::predicate: fn(u64) -> bool
pub rustic_core::chunker::ChunkIter::rabin: rustic_core::cdc::rolling_hash::Rabin64
pub rustic_core::chunker::ChunkIter::reader: R
pub rustic_core::chunker::ChunkIter::size_hint: usize
impl<R: std::io::Read + core::marker::Send> rustic_core::chunker::ChunkIter<R>
pub fn rustic_core::chunker::ChunkIter<R>::new(reader: R, size_hint: usize, rabin: rustic_core::cdc::rolling_hash::Rabin64) -> Self
impl<R: std::io::Read + core::marker::Send> core::iter::traits::iterator::Iterator for rustic_core::chunker::ChunkIter<R>
pub type rustic_core::chunker::ChunkIter<R>::Item = core::result::Result<alloc::vec::Vec<u8, alloc::alloc::Global>, std::io::error::Error>
pub fn rustic_core::chunker::ChunkIter<R>::next(&mut self) -> core::option::Option<std::io::error::Result<alloc::vec::Vec<u8>>>
impl<R> core::marker::Send for rustic_core::chunker::ChunkIter<R>
impl<R> core::marker::Sync for rustic_core::chunker::ChunkIter<R> where R: core::marker::Sync
impl<R> core::marker::Unpin for rustic_core::chunker::ChunkIter<R> where R: core::marker::Unpin
impl<R> core::panic::unwind_safe::RefUnwindSafe for rustic_core::chunker::ChunkIter<R> where R: core::panic::unwind_safe::RefUnwindSafe
impl<R> core::panic::unwind_safe::UnwindSafe for rustic_core::chunker::ChunkIter<R> where R: core::panic::unwind_safe::UnwindSafe
impl<I> core::iter::traits::collect::IntoIterator for rustic_core::chunker::ChunkIter<R> where I: core::iter::traits::iterator::Iterator
pub type rustic_core::chunker::ChunkIter<R>::IntoIter = I
pub type rustic_core::chunker::ChunkIter<R>::Item = <I as core::iter::traits::iterator::Iterator>::Item
pub fn rustic_core::chunker::ChunkIter<R>::into_iter(self) -> I
impl<I> pariter::IteratorExt for rustic_core::chunker::ChunkIter<R> where I: core::iter::traits::iterator::Iterator
impl<I> rand::seq::IteratorRandom for rustic_core::chunker::ChunkIter<R> where I: core::iter::traits::iterator::Iterator
impl<T, U> core::convert::Into<U> for rustic_core::chunker::ChunkIter<R> where U: core::convert::From<T>
pub fn rustic_core::chunker::ChunkIter<R>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::chunker::ChunkIter<R> where U: core::convert::Into<T>
pub type rustic_core::chunker::ChunkIter<R>::Error = core::convert::Infallible
pub fn rustic_core::chunker::ChunkIter<R>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::chunker::ChunkIter<R> where U: core::convert::TryFrom<T>
pub type rustic_core::chunker::ChunkIter<R>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::chunker::ChunkIter<R>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::chunker::ChunkIter<R> where T: 'static + core::marker::Sized
pub fn rustic_core::chunker::ChunkIter<R>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::chunker::ChunkIter<R> where T: core::marker::Sized
pub fn rustic_core::chunker::ChunkIter<R>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::chunker::ChunkIter<R> where T: core::marker::Sized
pub fn rustic_core::chunker::ChunkIter<R>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::chunker::ChunkIter<R>
pub fn rustic_core::chunker::ChunkIter<R>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::chunker::ChunkIter<R>
pub type rustic_core::chunker::ChunkIter<R>::Init = T
pub const rustic_core::chunker::ChunkIter<R>::ALIGN: usize
pub unsafe fn rustic_core::chunker::ChunkIter<R>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::chunker::ChunkIter<R>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::chunker::ChunkIter<R>::drop(ptr: usize)
pub unsafe fn rustic_core::chunker::ChunkIter<R>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> itertools::Itertools for rustic_core::chunker::ChunkIter<R> where T: core::iter::traits::iterator::Iterator + core::marker::Sized
impl<T> tracing::instrument::Instrument for rustic_core::chunker::ChunkIter<R>
impl<T> tracing::instrument::WithSubscriber for rustic_core::chunker::ChunkIter<R>
impl<T> typenum::type_operators::Same<T> for rustic_core::chunker::ChunkIter<R>
pub type rustic_core::chunker::ChunkIter<R>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::chunker::ChunkIter<R> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::chunker::ChunkIter<R>::vzip(self) -> V
pub trait rustic_core::chunker::PolynomExtend
pub fn rustic_core::chunker::PolynomExtend::add(self, other: Self) -> Self
pub fn rustic_core::chunker::PolynomExtend::gcd(self, other: Self) -> Self
pub fn rustic_core::chunker::PolynomExtend::irreducible(&self) -> bool
pub fn rustic_core::chunker::PolynomExtend::mulmod(self, other: Self, modulo: Self) -> Self
impl rustic_core::chunker::PolynomExtend for u64
pub fn u64::add(self, other: Self) -> Self
pub fn u64::gcd(self, other: Self) -> Self
pub fn u64::irreducible(&self) -> bool
pub fn u64::mulmod(self, other: Self, modulo: Self) -> Self
pub const fn rustic_core::chunker::default_predicate(x: u64) -> bool
pub fn rustic_core::chunker::qp(p: i32, g: u64) -> u64
pub fn rustic_core::chunker::random_poly() -> rustic_core::error::RusticResult<u64>
pub mod rustic_core::commands
pub mod rustic_core::commands::backup
#[non_exhaustive] pub struct rustic_core::commands::backup::BackupOptions
pub rustic_core::commands::backup::BackupOptions::as_path: core::option::Option<std::path::PathBuf>
pub rustic_core::commands::backup::BackupOptions::dry_run: bool
pub rustic_core::commands::backup::BackupOptions::ignore_filter_opts: rustic_core::backend::ignore::LocalSourceFilterOptions
pub rustic_core::commands::backup::BackupOptions::ignore_save_opts: rustic_core::backend::ignore::LocalSourceSaveOptions
pub rustic_core::commands::backup::BackupOptions::parent_opts: rustic_core::commands::backup::ParentOptions
pub rustic_core::commands::backup::BackupOptions::stdin_filename: alloc::string::String
impl rustic_core::commands::backup::BackupOptions
pub fn rustic_core::commands::backup::BackupOptions::as_path(self, value: impl core::convert::Into<core::option::Option<std::path::PathBuf>>) -> Self
pub fn rustic_core::commands::backup::BackupOptions::dry_run(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::backup::BackupOptions::ignore_filter_opts(self, value: impl core::convert::Into<rustic_core::backend::ignore::LocalSourceFilterOptions>) -> Self
pub fn rustic_core::commands::backup::BackupOptions::ignore_save_opts(self, value: impl core::convert::Into<rustic_core::backend::ignore::LocalSourceSaveOptions>) -> Self
pub fn rustic_core::commands::backup::BackupOptions::parent_opts(self, value: impl core::convert::Into<rustic_core::commands::backup::ParentOptions>) -> Self
pub fn rustic_core::commands::backup::BackupOptions::stdin_filename(self, value: impl core::convert::Into<alloc::string::String>) -> Self
impl core::clone::Clone for rustic_core::commands::backup::BackupOptions
pub fn rustic_core::commands::backup::BackupOptions::clone(&self) -> rustic_core::commands::backup::BackupOptions
impl core::default::Default for rustic_core::commands::backup::BackupOptions
pub fn rustic_core::commands::backup::BackupOptions::default() -> rustic_core::commands::backup::BackupOptions
impl core::fmt::Debug for rustic_core::commands::backup::BackupOptions
pub fn rustic_core::commands::backup::BackupOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::commands::backup::BackupOptions
pub fn rustic_core::commands::backup::BackupOptions::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::commands::backup::BackupOptions where rustic_core::commands::backup::BackupOptions: core::default::Default
pub fn rustic_core::commands::backup::BackupOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::commands::backup::BackupOptions
impl core::marker::Sync for rustic_core::commands::backup::BackupOptions
impl core::marker::Unpin for rustic_core::commands::backup::BackupOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::backup::BackupOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::backup::BackupOptions
impl<T, U> core::convert::Into<U> for rustic_core::commands::backup::BackupOptions where U: core::convert::From<T>
pub fn rustic_core::commands::backup::BackupOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::backup::BackupOptions where U: core::convert::Into<T>
pub type rustic_core::commands::backup::BackupOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::backup::BackupOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::backup::BackupOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::backup::BackupOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::backup::BackupOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::backup::BackupOptions where T: core::clone::Clone
pub type rustic_core::commands::backup::BackupOptions::Owned = T
pub fn rustic_core::commands::backup::BackupOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::backup::BackupOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::backup::BackupOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::backup::BackupOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::backup::BackupOptions where T: core::marker::Sized
pub fn rustic_core::commands::backup::BackupOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::backup::BackupOptions where T: core::marker::Sized
pub fn rustic_core::commands::backup::BackupOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::backup::BackupOptions
pub fn rustic_core::commands::backup::BackupOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::backup::BackupOptions
pub type rustic_core::commands::backup::BackupOptions::Init = T
pub const rustic_core::commands::backup::BackupOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::backup::BackupOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::backup::BackupOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::backup::BackupOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::backup::BackupOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::commands::backup::BackupOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::commands::backup::BackupOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::backup::BackupOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::backup::BackupOptions
pub type rustic_core::commands::backup::BackupOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::backup::BackupOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::backup::BackupOptions::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::commands::backup::ParentOptions
pub rustic_core::commands::backup::ParentOptions::force: bool
pub rustic_core::commands::backup::ParentOptions::group_by: core::option::Option<rustic_core::repofile::snapshotfile::SnapshotGroupCriterion>
pub rustic_core::commands::backup::ParentOptions::ignore_ctime: bool
pub rustic_core::commands::backup::ParentOptions::ignore_inode: bool
pub rustic_core::commands::backup::ParentOptions::parent: core::option::Option<alloc::string::String>
impl rustic_core::commands::backup::ParentOptions
pub fn rustic_core::commands::backup::ParentOptions::force(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::backup::ParentOptions::group_by(self, value: impl core::convert::Into<core::option::Option<rustic_core::repofile::snapshotfile::SnapshotGroupCriterion>>) -> Self
pub fn rustic_core::commands::backup::ParentOptions::ignore_ctime(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::backup::ParentOptions::ignore_inode(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::backup::ParentOptions::parent(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
impl rustic_core::commands::backup::ParentOptions
pub fn rustic_core::commands::backup::ParentOptions::get_parent<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedTree>(&self, repo: &rustic_core::repository::Repository<P, S>, snap: &rustic_core::repofile::snapshotfile::SnapshotFile, backup_stdin: bool) -> (core::option::Option<rustic_core::id::Id>, rustic_core::archiver::parent::Parent)
impl core::clone::Clone for rustic_core::commands::backup::ParentOptions
pub fn rustic_core::commands::backup::ParentOptions::clone(&self) -> rustic_core::commands::backup::ParentOptions
impl core::default::Default for rustic_core::commands::backup::ParentOptions
pub fn rustic_core::commands::backup::ParentOptions::default() -> rustic_core::commands::backup::ParentOptions
impl core::fmt::Debug for rustic_core::commands::backup::ParentOptions
pub fn rustic_core::commands::backup::ParentOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::commands::backup::ParentOptions
pub fn rustic_core::commands::backup::ParentOptions::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::commands::backup::ParentOptions where rustic_core::commands::backup::ParentOptions: core::default::Default
pub fn rustic_core::commands::backup::ParentOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::commands::backup::ParentOptions
impl core::marker::Sync for rustic_core::commands::backup::ParentOptions
impl core::marker::Unpin for rustic_core::commands::backup::ParentOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::backup::ParentOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::backup::ParentOptions
impl<T, U> core::convert::Into<U> for rustic_core::commands::backup::ParentOptions where U: core::convert::From<T>
pub fn rustic_core::commands::backup::ParentOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::backup::ParentOptions where U: core::convert::Into<T>
pub type rustic_core::commands::backup::ParentOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::backup::ParentOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::backup::ParentOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::backup::ParentOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::backup::ParentOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::backup::ParentOptions where T: core::clone::Clone
pub type rustic_core::commands::backup::ParentOptions::Owned = T
pub fn rustic_core::commands::backup::ParentOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::backup::ParentOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::backup::ParentOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::backup::ParentOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::backup::ParentOptions where T: core::marker::Sized
pub fn rustic_core::commands::backup::ParentOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::backup::ParentOptions where T: core::marker::Sized
pub fn rustic_core::commands::backup::ParentOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::backup::ParentOptions
pub fn rustic_core::commands::backup::ParentOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::backup::ParentOptions
pub type rustic_core::commands::backup::ParentOptions::Init = T
pub const rustic_core::commands::backup::ParentOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::backup::ParentOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::backup::ParentOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::backup::ParentOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::backup::ParentOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::commands::backup::ParentOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::commands::backup::ParentOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::backup::ParentOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::backup::ParentOptions
pub type rustic_core::commands::backup::ParentOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::backup::ParentOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::backup::ParentOptions::vzip(self) -> V
pub fn rustic_core::commands::backup::backup<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedIds>(repo: &rustic_core::repository::Repository<P, S>, opts: &rustic_core::commands::backup::BackupOptions, source: rustic_core::repofile::snapshotfile::PathList, snap: rustic_core::repofile::snapshotfile::SnapshotFile) -> rustic_core::error::RusticResult<rustic_core::repofile::snapshotfile::SnapshotFile>
pub mod rustic_core::commands::cat
pub fn rustic_core::commands::cat::cat_blob<P, S: rustic_core::repository::IndexedFull>(repo: &rustic_core::repository::Repository<P, S>, tpe: rustic_core::blob::BlobType, id: &str) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::commands::cat::cat_file<P, S: rustic_core::repository::Open>(repo: &rustic_core::repository::Repository<P, S>, tpe: rustic_core::backend::FileType, id: &str) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::commands::cat::cat_tree<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedTree>(repo: &rustic_core::repository::Repository<P, S>, snap: &str, sn_filter: impl core::ops::function::FnMut(&rustic_core::repofile::snapshotfile::SnapshotFile) -> bool + core::marker::Send + core::marker::Sync) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub mod rustic_core::commands::check
pub struct rustic_core::commands::check::CheckOptions
pub rustic_core::commands::check::CheckOptions::read_data: bool
pub rustic_core::commands::check::CheckOptions::trust_cache: bool
impl rustic_core::commands::check::CheckOptions
pub fn rustic_core::commands::check::CheckOptions::read_data(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::check::CheckOptions::trust_cache(self, value: impl core::convert::Into<bool>) -> Self
impl rustic_core::commands::check::CheckOptions
pub fn rustic_core::commands::check::CheckOptions::run<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::Open>(self, repo: &rustic_core::repository::Repository<P, S>) -> rustic_core::error::RusticResult<()>
impl core::clone::Clone for rustic_core::commands::check::CheckOptions
pub fn rustic_core::commands::check::CheckOptions::clone(&self) -> rustic_core::commands::check::CheckOptions
impl core::default::Default for rustic_core::commands::check::CheckOptions
pub fn rustic_core::commands::check::CheckOptions::default() -> rustic_core::commands::check::CheckOptions
impl core::fmt::Debug for rustic_core::commands::check::CheckOptions
pub fn rustic_core::commands::check::CheckOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::check::CheckOptions
impl core::marker::Send for rustic_core::commands::check::CheckOptions
impl core::marker::Sync for rustic_core::commands::check::CheckOptions
impl core::marker::Unpin for rustic_core::commands::check::CheckOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::check::CheckOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::check::CheckOptions
impl<T, U> core::convert::Into<U> for rustic_core::commands::check::CheckOptions where U: core::convert::From<T>
pub fn rustic_core::commands::check::CheckOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::check::CheckOptions where U: core::convert::Into<T>
pub type rustic_core::commands::check::CheckOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::check::CheckOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::check::CheckOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::check::CheckOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::check::CheckOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::check::CheckOptions where T: core::clone::Clone
pub type rustic_core::commands::check::CheckOptions::Owned = T
pub fn rustic_core::commands::check::CheckOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::check::CheckOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::check::CheckOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::check::CheckOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::check::CheckOptions where T: core::marker::Sized
pub fn rustic_core::commands::check::CheckOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::check::CheckOptions where T: core::marker::Sized
pub fn rustic_core::commands::check::CheckOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::check::CheckOptions
pub fn rustic_core::commands::check::CheckOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::check::CheckOptions
pub type rustic_core::commands::check::CheckOptions::Init = T
pub const rustic_core::commands::check::CheckOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::check::CheckOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::check::CheckOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::check::CheckOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::check::CheckOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::check::CheckOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::check::CheckOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::check::CheckOptions
pub type rustic_core::commands::check::CheckOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::check::CheckOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::check::CheckOptions::vzip(self) -> V
pub fn rustic_core::commands::check::check_cache_files(_concurrency: usize, cache: &rustic_core::backend::cache::Cache, be: &impl rustic_core::backend::ReadBackend, file_type: rustic_core::backend::FileType, p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::check::check_hot_files(be: &impl rustic_core::backend::ReadBackend, be_hot: &impl rustic_core::backend::ReadBackend, file_type: rustic_core::backend::FileType, pb: &impl rustic_core::progress::ProgressBars) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::check::check_pack(be: &impl rustic_core::backend::decrypt::DecryptReadBackend, index_pack: rustic_core::repofile::indexfile::IndexPack, data: bytes::bytes::Bytes, p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::check::check_packs(be: &impl rustic_core::backend::decrypt::DecryptReadBackend, hot_be: &core::option::Option<impl rustic_core::backend::ReadBackend>, read_data: bool, pb: &impl rustic_core::progress::ProgressBars) -> rustic_core::error::RusticResult<rustic_core::index::binarysorted::IndexCollector>
pub fn rustic_core::commands::check::check_packs_list(be: &impl rustic_core::backend::ReadBackend, packs: std::collections::hash::map::HashMap<rustic_core::id::Id, u32>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::check::check_snapshots(index: &impl rustic_core::index::IndexedBackend, pb: &impl rustic_core::progress::ProgressBars) -> rustic_core::error::RusticResult<()>
pub mod rustic_core::commands::config
pub struct rustic_core::commands::config::ConfigOptions
pub rustic_core::commands::config::ConfigOptions::set_compression: core::option::Option<i32>
pub rustic_core::commands::config::ConfigOptions::set_datapack_growfactor: core::option::Option<u32>
pub rustic_core::commands::config::ConfigOptions::set_datapack_size: core::option::Option<bytesize::ByteSize>
pub rustic_core::commands::config::ConfigOptions::set_datapack_size_limit: core::option::Option<bytesize::ByteSize>
pub rustic_core::commands::config::ConfigOptions::set_max_packsize_tolerate_percent: core::option::Option<u32>
pub rustic_core::commands::config::ConfigOptions::set_min_packsize_tolerate_percent: core::option::Option<u32>
pub rustic_core::commands::config::ConfigOptions::set_treepack_growfactor: core::option::Option<u32>
pub rustic_core::commands::config::ConfigOptions::set_treepack_size: core::option::Option<bytesize::ByteSize>
pub rustic_core::commands::config::ConfigOptions::set_treepack_size_limit: core::option::Option<bytesize::ByteSize>
pub rustic_core::commands::config::ConfigOptions::set_version: core::option::Option<u32>
impl rustic_core::commands::config::ConfigOptions
pub fn rustic_core::commands::config::ConfigOptions::apply(&self, config: &mut rustic_core::repofile::configfile::ConfigFile) -> rustic_core::error::RusticResult<()>
impl rustic_core::commands::config::ConfigOptions
pub fn rustic_core::commands::config::ConfigOptions::set_compression(self, value: impl core::convert::Into<core::option::Option<i32>>) -> Self
pub fn rustic_core::commands::config::ConfigOptions::set_datapack_growfactor(self, value: impl core::convert::Into<core::option::Option<u32>>) -> Self
pub fn rustic_core::commands::config::ConfigOptions::set_datapack_size(self, value: impl core::convert::Into<core::option::Option<bytesize::ByteSize>>) -> Self
pub fn rustic_core::commands::config::ConfigOptions::set_datapack_size_limit(self, value: impl core::convert::Into<core::option::Option<bytesize::ByteSize>>) -> Self
pub fn rustic_core::commands::config::ConfigOptions::set_max_packsize_tolerate_percent(self, value: impl core::convert::Into<core::option::Option<u32>>) -> Self
pub fn rustic_core::commands::config::ConfigOptions::set_min_packsize_tolerate_percent(self, value: impl core::convert::Into<core::option::Option<u32>>) -> Self
pub fn rustic_core::commands::config::ConfigOptions::set_treepack_growfactor(self, value: impl core::convert::Into<core::option::Option<u32>>) -> Self
pub fn rustic_core::commands::config::ConfigOptions::set_treepack_size(self, value: impl core::convert::Into<core::option::Option<bytesize::ByteSize>>) -> Self
pub fn rustic_core::commands::config::ConfigOptions::set_treepack_size_limit(self, value: impl core::convert::Into<core::option::Option<bytesize::ByteSize>>) -> Self
pub fn rustic_core::commands::config::ConfigOptions::set_version(self, value: impl core::convert::Into<core::option::Option<u32>>) -> Self
impl core::clone::Clone for rustic_core::commands::config::ConfigOptions
pub fn rustic_core::commands::config::ConfigOptions::clone(&self) -> rustic_core::commands::config::ConfigOptions
impl core::default::Default for rustic_core::commands::config::ConfigOptions
pub fn rustic_core::commands::config::ConfigOptions::default() -> rustic_core::commands::config::ConfigOptions
impl core::fmt::Debug for rustic_core::commands::config::ConfigOptions
pub fn rustic_core::commands::config::ConfigOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::config::ConfigOptions
impl core::marker::Send for rustic_core::commands::config::ConfigOptions
impl core::marker::Sync for rustic_core::commands::config::ConfigOptions
impl core::marker::Unpin for rustic_core::commands::config::ConfigOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::config::ConfigOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::config::ConfigOptions
impl<T, U> core::convert::Into<U> for rustic_core::commands::config::ConfigOptions where U: core::convert::From<T>
pub fn rustic_core::commands::config::ConfigOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::config::ConfigOptions where U: core::convert::Into<T>
pub type rustic_core::commands::config::ConfigOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::config::ConfigOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::config::ConfigOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::config::ConfigOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::config::ConfigOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::config::ConfigOptions where T: core::clone::Clone
pub type rustic_core::commands::config::ConfigOptions::Owned = T
pub fn rustic_core::commands::config::ConfigOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::config::ConfigOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::config::ConfigOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::config::ConfigOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::config::ConfigOptions where T: core::marker::Sized
pub fn rustic_core::commands::config::ConfigOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::config::ConfigOptions where T: core::marker::Sized
pub fn rustic_core::commands::config::ConfigOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::config::ConfigOptions
pub fn rustic_core::commands::config::ConfigOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::config::ConfigOptions
pub type rustic_core::commands::config::ConfigOptions::Init = T
pub const rustic_core::commands::config::ConfigOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::config::ConfigOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::config::ConfigOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::config::ConfigOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::config::ConfigOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::config::ConfigOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::config::ConfigOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::config::ConfigOptions
pub type rustic_core::commands::config::ConfigOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::config::ConfigOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::config::ConfigOptions::vzip(self) -> V
pub fn rustic_core::commands::config::apply_config<P, S: rustic_core::repository::Open>(repo: &rustic_core::repository::Repository<P, S>, opts: &rustic_core::commands::config::ConfigOptions) -> rustic_core::error::RusticResult<bool>
pub fn rustic_core::commands::config::save_config<P, S>(repo: &rustic_core::repository::Repository<P, S>, new_config: rustic_core::repofile::configfile::ConfigFile, key: rustic_core::crypto::aespoly1305::Key) -> rustic_core::error::RusticResult<()>
pub mod rustic_core::commands::copy
pub struct rustic_core::commands::copy::CopySnapshot
pub rustic_core::commands::copy::CopySnapshot::relevant: bool
pub rustic_core::commands::copy::CopySnapshot::sn: rustic_core::repofile::snapshotfile::SnapshotFile
impl core::fmt::Debug for rustic_core::commands::copy::CopySnapshot
pub fn rustic_core::commands::copy::CopySnapshot::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::commands::copy::CopySnapshot
impl core::marker::Sync for rustic_core::commands::copy::CopySnapshot
impl core::marker::Unpin for rustic_core::commands::copy::CopySnapshot
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::copy::CopySnapshot
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::copy::CopySnapshot
impl<T, U> core::convert::Into<U> for rustic_core::commands::copy::CopySnapshot where U: core::convert::From<T>
pub fn rustic_core::commands::copy::CopySnapshot::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::copy::CopySnapshot where U: core::convert::Into<T>
pub type rustic_core::commands::copy::CopySnapshot::Error = core::convert::Infallible
pub fn rustic_core::commands::copy::CopySnapshot::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::copy::CopySnapshot where U: core::convert::TryFrom<T>
pub type rustic_core::commands::copy::CopySnapshot::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::copy::CopySnapshot::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::copy::CopySnapshot where T: 'static + core::marker::Sized
pub fn rustic_core::commands::copy::CopySnapshot::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::copy::CopySnapshot where T: core::marker::Sized
pub fn rustic_core::commands::copy::CopySnapshot::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::copy::CopySnapshot where T: core::marker::Sized
pub fn rustic_core::commands::copy::CopySnapshot::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::copy::CopySnapshot
pub fn rustic_core::commands::copy::CopySnapshot::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::copy::CopySnapshot
pub type rustic_core::commands::copy::CopySnapshot::Init = T
pub const rustic_core::commands::copy::CopySnapshot::ALIGN: usize
pub unsafe fn rustic_core::commands::copy::CopySnapshot::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::copy::CopySnapshot::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::copy::CopySnapshot::drop(ptr: usize)
pub unsafe fn rustic_core::commands::copy::CopySnapshot::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::copy::CopySnapshot
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::copy::CopySnapshot
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::copy::CopySnapshot
pub type rustic_core::commands::copy::CopySnapshot::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::copy::CopySnapshot where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::copy::CopySnapshot::vzip(self) -> V
pub fn rustic_core::commands::copy::copy<'a, Q, R: rustic_core::repository::IndexedFull, P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedIds>(repo: &rustic_core::repository::Repository<Q, R>, repo_dest: &rustic_core::repository::Repository<P, S>, snapshots: impl core::iter::traits::collect::IntoIterator<Item = &'a rustic_core::repofile::snapshotfile::SnapshotFile>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::copy::relevant_snapshots<F, P: rustic_core::progress::ProgressBars, S: rustic_core::repository::Open>(snaps: &[rustic_core::repofile::snapshotfile::SnapshotFile], dest_repo: &rustic_core::repository::Repository<P, S>, filter: F) -> rustic_core::error::RusticResult<alloc::vec::Vec<rustic_core::commands::copy::CopySnapshot>> where F: core::ops::function::FnMut(&rustic_core::repofile::snapshotfile::SnapshotFile) -> bool
pub mod rustic_core::commands::dump
pub fn rustic_core::commands::dump::dump<P, S: rustic_core::repository::IndexedFull>(repo: &rustic_core::repository::Repository<P, S>, node: &rustic_core::backend::node::Node, w: &mut impl std::io::Write) -> rustic_core::error::RusticResult<()>
pub mod rustic_core::commands::forget
pub struct rustic_core::commands::forget::ForgetGroup
pub rustic_core::commands::forget::ForgetGroup::group: rustic_core::repofile::snapshotfile::SnapshotGroup
pub rustic_core::commands::forget::ForgetGroup::snapshots: alloc::vec::Vec<rustic_core::commands::forget::ForgetSnapshot>
impl core::fmt::Debug for rustic_core::commands::forget::ForgetGroup
pub fn rustic_core::commands::forget::ForgetGroup::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::commands::forget::ForgetGroup
pub fn rustic_core::commands::forget::ForgetGroup::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl core::marker::Send for rustic_core::commands::forget::ForgetGroup
impl core::marker::Sync for rustic_core::commands::forget::ForgetGroup
impl core::marker::Unpin for rustic_core::commands::forget::ForgetGroup
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::forget::ForgetGroup
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::forget::ForgetGroup
impl<T, U> core::convert::Into<U> for rustic_core::commands::forget::ForgetGroup where U: core::convert::From<T>
pub fn rustic_core::commands::forget::ForgetGroup::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::forget::ForgetGroup where U: core::convert::Into<T>
pub type rustic_core::commands::forget::ForgetGroup::Error = core::convert::Infallible
pub fn rustic_core::commands::forget::ForgetGroup::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::forget::ForgetGroup where U: core::convert::TryFrom<T>
pub type rustic_core::commands::forget::ForgetGroup::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::forget::ForgetGroup::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::forget::ForgetGroup where T: 'static + core::marker::Sized
pub fn rustic_core::commands::forget::ForgetGroup::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::forget::ForgetGroup where T: core::marker::Sized
pub fn rustic_core::commands::forget::ForgetGroup::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::forget::ForgetGroup where T: core::marker::Sized
pub fn rustic_core::commands::forget::ForgetGroup::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::forget::ForgetGroup
pub fn rustic_core::commands::forget::ForgetGroup::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::forget::ForgetGroup
pub type rustic_core::commands::forget::ForgetGroup::Init = T
pub const rustic_core::commands::forget::ForgetGroup::ALIGN: usize
pub unsafe fn rustic_core::commands::forget::ForgetGroup::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::forget::ForgetGroup::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::forget::ForgetGroup::drop(ptr: usize)
pub unsafe fn rustic_core::commands::forget::ForgetGroup::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::forget::ForgetGroup
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::forget::ForgetGroup
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::forget::ForgetGroup
pub type rustic_core::commands::forget::ForgetGroup::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::forget::ForgetGroup where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::forget::ForgetGroup::vzip(self) -> V
pub struct rustic_core::commands::forget::ForgetGroups(pub alloc::vec::Vec<rustic_core::commands::forget::ForgetGroup>)
impl rustic_core::commands::forget::ForgetGroups
pub fn rustic_core::commands::forget::ForgetGroups::into_forget_ids(self) -> alloc::vec::Vec<rustic_core::id::Id>
impl core::fmt::Debug for rustic_core::commands::forget::ForgetGroups
pub fn rustic_core::commands::forget::ForgetGroups::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::commands::forget::ForgetGroups
pub fn rustic_core::commands::forget::ForgetGroups::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl core::marker::Send for rustic_core::commands::forget::ForgetGroups
impl core::marker::Sync for rustic_core::commands::forget::ForgetGroups
impl core::marker::Unpin for rustic_core::commands::forget::ForgetGroups
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::forget::ForgetGroups
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::forget::ForgetGroups
impl<T, U> core::convert::Into<U> for rustic_core::commands::forget::ForgetGroups where U: core::convert::From<T>
pub fn rustic_core::commands::forget::ForgetGroups::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::forget::ForgetGroups where U: core::convert::Into<T>
pub type rustic_core::commands::forget::ForgetGroups::Error = core::convert::Infallible
pub fn rustic_core::commands::forget::ForgetGroups::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::forget::ForgetGroups where U: core::convert::TryFrom<T>
pub type rustic_core::commands::forget::ForgetGroups::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::forget::ForgetGroups::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::forget::ForgetGroups where T: 'static + core::marker::Sized
pub fn rustic_core::commands::forget::ForgetGroups::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::forget::ForgetGroups where T: core::marker::Sized
pub fn rustic_core::commands::forget::ForgetGroups::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::forget::ForgetGroups where T: core::marker::Sized
pub fn rustic_core::commands::forget::ForgetGroups::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::forget::ForgetGroups
pub fn rustic_core::commands::forget::ForgetGroups::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::forget::ForgetGroups
pub type rustic_core::commands::forget::ForgetGroups::Init = T
pub const rustic_core::commands::forget::ForgetGroups::ALIGN: usize
pub unsafe fn rustic_core::commands::forget::ForgetGroups::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::forget::ForgetGroups::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::forget::ForgetGroups::drop(ptr: usize)
pub unsafe fn rustic_core::commands::forget::ForgetGroups::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::forget::ForgetGroups
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::forget::ForgetGroups
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::forget::ForgetGroups
pub type rustic_core::commands::forget::ForgetGroups::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::forget::ForgetGroups where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::forget::ForgetGroups::vzip(self) -> V
pub struct rustic_core::commands::forget::ForgetSnapshot
pub rustic_core::commands::forget::ForgetSnapshot::keep: bool
pub rustic_core::commands::forget::ForgetSnapshot::reasons: alloc::vec::Vec<alloc::string::String>
pub rustic_core::commands::forget::ForgetSnapshot::snapshot: rustic_core::repofile::snapshotfile::SnapshotFile
impl core::fmt::Debug for rustic_core::commands::forget::ForgetSnapshot
pub fn rustic_core::commands::forget::ForgetSnapshot::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::commands::forget::ForgetSnapshot
pub fn rustic_core::commands::forget::ForgetSnapshot::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl core::marker::Send for rustic_core::commands::forget::ForgetSnapshot
impl core::marker::Sync for rustic_core::commands::forget::ForgetSnapshot
impl core::marker::Unpin for rustic_core::commands::forget::ForgetSnapshot
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::forget::ForgetSnapshot
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::forget::ForgetSnapshot
impl<T, U> core::convert::Into<U> for rustic_core::commands::forget::ForgetSnapshot where U: core::convert::From<T>
pub fn rustic_core::commands::forget::ForgetSnapshot::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::forget::ForgetSnapshot where U: core::convert::Into<T>
pub type rustic_core::commands::forget::ForgetSnapshot::Error = core::convert::Infallible
pub fn rustic_core::commands::forget::ForgetSnapshot::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::forget::ForgetSnapshot where U: core::convert::TryFrom<T>
pub type rustic_core::commands::forget::ForgetSnapshot::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::forget::ForgetSnapshot::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::forget::ForgetSnapshot where T: 'static + core::marker::Sized
pub fn rustic_core::commands::forget::ForgetSnapshot::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::forget::ForgetSnapshot where T: core::marker::Sized
pub fn rustic_core::commands::forget::ForgetSnapshot::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::forget::ForgetSnapshot where T: core::marker::Sized
pub fn rustic_core::commands::forget::ForgetSnapshot::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::forget::ForgetSnapshot
pub fn rustic_core::commands::forget::ForgetSnapshot::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::forget::ForgetSnapshot
pub type rustic_core::commands::forget::ForgetSnapshot::Init = T
pub const rustic_core::commands::forget::ForgetSnapshot::ALIGN: usize
pub unsafe fn rustic_core::commands::forget::ForgetSnapshot::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::forget::ForgetSnapshot::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::forget::ForgetSnapshot::drop(ptr: usize)
pub unsafe fn rustic_core::commands::forget::ForgetSnapshot::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::forget::ForgetSnapshot
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::forget::ForgetSnapshot
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::forget::ForgetSnapshot
pub type rustic_core::commands::forget::ForgetSnapshot::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::forget::ForgetSnapshot where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::forget::ForgetSnapshot::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::commands::forget::KeepOptions
pub rustic_core::commands::forget::KeepOptions::keep_daily: i32
pub rustic_core::commands::forget::KeepOptions::keep_half_yearly: i32
pub rustic_core::commands::forget::KeepOptions::keep_hourly: i32
pub rustic_core::commands::forget::KeepOptions::keep_ids: alloc::vec::Vec<alloc::string::String>
pub rustic_core::commands::forget::KeepOptions::keep_last: i32
pub rustic_core::commands::forget::KeepOptions::keep_monthly: i32
pub rustic_core::commands::forget::KeepOptions::keep_quarter_yearly: i32
pub rustic_core::commands::forget::KeepOptions::keep_tags: alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>
pub rustic_core::commands::forget::KeepOptions::keep_weekly: i32
pub rustic_core::commands::forget::KeepOptions::keep_within: humantime::wrapper::Duration
pub rustic_core::commands::forget::KeepOptions::keep_within_daily: humantime::wrapper::Duration
pub rustic_core::commands::forget::KeepOptions::keep_within_half_yearly: humantime::wrapper::Duration
pub rustic_core::commands::forget::KeepOptions::keep_within_hourly: humantime::wrapper::Duration
pub rustic_core::commands::forget::KeepOptions::keep_within_monthly: humantime::wrapper::Duration
pub rustic_core::commands::forget::KeepOptions::keep_within_quarter_yearly: humantime::wrapper::Duration
pub rustic_core::commands::forget::KeepOptions::keep_within_weekly: humantime::wrapper::Duration
pub rustic_core::commands::forget::KeepOptions::keep_within_yearly: humantime::wrapper::Duration
pub rustic_core::commands::forget::KeepOptions::keep_yearly: i32
impl rustic_core::commands::forget::KeepOptions
pub fn rustic_core::commands::forget::KeepOptions::apply(&self, snapshots: alloc::vec::Vec<rustic_core::repofile::snapshotfile::SnapshotFile>, now: chrono::datetime::DateTime<chrono::offset::local::Local>) -> alloc::vec::Vec<rustic_core::commands::forget::ForgetSnapshot>
pub fn rustic_core::commands::forget::KeepOptions::matches(&mut self, sn: &rustic_core::repofile::snapshotfile::SnapshotFile, last: core::option::Option<&rustic_core::repofile::snapshotfile::SnapshotFile>, has_next: bool, latest_time: chrono::datetime::DateTime<chrono::offset::local::Local>) -> alloc::vec::Vec<&str>
impl rustic_core::commands::forget::KeepOptions
pub fn rustic_core::commands::forget::KeepOptions::keep_daily(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_half_yearly(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_hourly(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_ids(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_last(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_monthly(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_quarter_yearly(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_tags(self, value: impl core::convert::Into<alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_weekly(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_within(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_within_daily(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_within_half_yearly(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_within_hourly(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_within_monthly(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_within_quarter_yearly(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_within_weekly(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_within_yearly(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_yearly(self, value: impl core::convert::Into<i32>) -> Self
impl core::default::Default for rustic_core::commands::forget::KeepOptions
pub fn rustic_core::commands::forget::KeepOptions::default() -> Self
impl core::clone::Clone for rustic_core::commands::forget::KeepOptions
pub fn rustic_core::commands::forget::KeepOptions::clone(&self) -> rustic_core::commands::forget::KeepOptions
impl core::cmp::Eq for rustic_core::commands::forget::KeepOptions
impl core::cmp::PartialEq<rustic_core::commands::forget::KeepOptions> for rustic_core::commands::forget::KeepOptions
pub fn rustic_core::commands::forget::KeepOptions::eq(&self, other: &rustic_core::commands::forget::KeepOptions) -> bool
impl core::fmt::Debug for rustic_core::commands::forget::KeepOptions
pub fn rustic_core::commands::forget::KeepOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::commands::forget::KeepOptions
impl core::marker::StructuralPartialEq for rustic_core::commands::forget::KeepOptions
impl<'de> serde::de::Deserialize<'de> for rustic_core::commands::forget::KeepOptions where rustic_core::commands::forget::KeepOptions: core::default::Default
pub fn rustic_core::commands::forget::KeepOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::commands::forget::KeepOptions
impl core::marker::Sync for rustic_core::commands::forget::KeepOptions
impl core::marker::Unpin for rustic_core::commands::forget::KeepOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::forget::KeepOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::forget::KeepOptions
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::commands::forget::KeepOptions where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::commands::forget::KeepOptions::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::commands::forget::KeepOptions where U: core::convert::From<T>
pub fn rustic_core::commands::forget::KeepOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::forget::KeepOptions where U: core::convert::Into<T>
pub type rustic_core::commands::forget::KeepOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::forget::KeepOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::forget::KeepOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::forget::KeepOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::forget::KeepOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::forget::KeepOptions where T: core::clone::Clone
pub type rustic_core::commands::forget::KeepOptions::Owned = T
pub fn rustic_core::commands::forget::KeepOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::forget::KeepOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::forget::KeepOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::forget::KeepOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::forget::KeepOptions where T: core::marker::Sized
pub fn rustic_core::commands::forget::KeepOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::forget::KeepOptions where T: core::marker::Sized
pub fn rustic_core::commands::forget::KeepOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::forget::KeepOptions
pub fn rustic_core::commands::forget::KeepOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::forget::KeepOptions
pub type rustic_core::commands::forget::KeepOptions::Init = T
pub const rustic_core::commands::forget::KeepOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::forget::KeepOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::forget::KeepOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::forget::KeepOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::forget::KeepOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::commands::forget::KeepOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::commands::forget::KeepOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::forget::KeepOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::forget::KeepOptions
pub type rustic_core::commands::forget::KeepOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::forget::KeepOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::forget::KeepOptions::vzip(self) -> V
pub const fn rustic_core::commands::forget::always_false(_sn1: &rustic_core::repofile::snapshotfile::SnapshotFile, _sn2: &rustic_core::repofile::snapshotfile::SnapshotFile) -> bool
pub fn rustic_core::commands::forget::equal_day(sn1: &rustic_core::repofile::snapshotfile::SnapshotFile, sn2: &rustic_core::repofile::snapshotfile::SnapshotFile) -> bool
pub fn rustic_core::commands::forget::equal_half_year(sn1: &rustic_core::repofile::snapshotfile::SnapshotFile, sn2: &rustic_core::repofile::snapshotfile::SnapshotFile) -> bool
pub fn rustic_core::commands::forget::equal_hour(sn1: &rustic_core::repofile::snapshotfile::SnapshotFile, sn2: &rustic_core::repofile::snapshotfile::SnapshotFile) -> bool
pub fn rustic_core::commands::forget::equal_month(sn1: &rustic_core::repofile::snapshotfile::SnapshotFile, sn2: &rustic_core::repofile::snapshotfile::SnapshotFile) -> bool
pub fn rustic_core::commands::forget::equal_quarter_year(sn1: &rustic_core::repofile::snapshotfile::SnapshotFile, sn2: &rustic_core::repofile::snapshotfile::SnapshotFile) -> bool
pub fn rustic_core::commands::forget::equal_week(sn1: &rustic_core::repofile::snapshotfile::SnapshotFile, sn2: &rustic_core::repofile::snapshotfile::SnapshotFile) -> bool
pub fn rustic_core::commands::forget::equal_year(sn1: &rustic_core::repofile::snapshotfile::SnapshotFile, sn2: &rustic_core::repofile::snapshotfile::SnapshotFile) -> bool
pub fn rustic_core::commands::forget::get_forget_snapshots<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::Open>(repo: &rustic_core::repository::Repository<P, S>, keep: &rustic_core::commands::forget::KeepOptions, group_by: rustic_core::repofile::snapshotfile::SnapshotGroupCriterion, filter: impl core::ops::function::FnMut(&rustic_core::repofile::snapshotfile::SnapshotFile) -> bool) -> rustic_core::error::RusticResult<rustic_core::commands::forget::ForgetGroups>
pub type rustic_core::commands::forget::CheckFunction = fn(&rustic_core::repofile::snapshotfile::SnapshotFile, &rustic_core::repofile::snapshotfile::SnapshotFile) -> bool
pub mod rustic_core::commands::init
pub fn rustic_core::commands::init::init<P, S>(repo: &rustic_core::repository::Repository<P, S>, pass: &str, key_opts: &rustic_core::commands::key::KeyOptions, config_opts: &rustic_core::commands::config::ConfigOptions) -> rustic_core::error::RusticResult<(rustic_core::crypto::aespoly1305::Key, rustic_core::repofile::configfile::ConfigFile)>
pub fn rustic_core::commands::init::init_with_config<P, S>(repo: &rustic_core::repository::Repository<P, S>, pass: &str, key_opts: &rustic_core::commands::key::KeyOptions, config: &rustic_core::repofile::configfile::ConfigFile) -> rustic_core::error::RusticResult<rustic_core::crypto::aespoly1305::Key>
pub mod rustic_core::commands::key
pub struct rustic_core::commands::key::KeyOptions
pub rustic_core::commands::key::KeyOptions::hostname: core::option::Option<alloc::string::String>
pub rustic_core::commands::key::KeyOptions::username: core::option::Option<alloc::string::String>
pub rustic_core::commands::key::KeyOptions::with_created: bool
impl rustic_core::commands::key::KeyOptions
pub fn rustic_core::commands::key::KeyOptions::add<P, S>(&self, repo: &rustic_core::repository::Repository<P, S>, pass: &str, key: rustic_core::crypto::aespoly1305::Key) -> rustic_core::error::RusticResult<rustic_core::id::Id>
pub fn rustic_core::commands::key::KeyOptions::add_key<P, S: rustic_core::repository::Open>(&self, repo: &rustic_core::repository::Repository<P, S>, pass: &str) -> rustic_core::error::RusticResult<rustic_core::id::Id>
pub fn rustic_core::commands::key::KeyOptions::init_key<P, S>(&self, repo: &rustic_core::repository::Repository<P, S>, pass: &str) -> rustic_core::error::RusticResult<(rustic_core::crypto::aespoly1305::Key, rustic_core::id::Id)>
impl rustic_core::commands::key::KeyOptions
pub fn rustic_core::commands::key::KeyOptions::hostname(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
pub fn rustic_core::commands::key::KeyOptions::username(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
pub fn rustic_core::commands::key::KeyOptions::with_created(self, value: impl core::convert::Into<bool>) -> Self
impl core::clone::Clone for rustic_core::commands::key::KeyOptions
pub fn rustic_core::commands::key::KeyOptions::clone(&self) -> rustic_core::commands::key::KeyOptions
impl core::default::Default for rustic_core::commands::key::KeyOptions
pub fn rustic_core::commands::key::KeyOptions::default() -> rustic_core::commands::key::KeyOptions
impl core::fmt::Debug for rustic_core::commands::key::KeyOptions
pub fn rustic_core::commands::key::KeyOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::commands::key::KeyOptions
impl core::marker::Sync for rustic_core::commands::key::KeyOptions
impl core::marker::Unpin for rustic_core::commands::key::KeyOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::key::KeyOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::key::KeyOptions
impl<T, U> core::convert::Into<U> for rustic_core::commands::key::KeyOptions where U: core::convert::From<T>
pub fn rustic_core::commands::key::KeyOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::key::KeyOptions where U: core::convert::Into<T>
pub type rustic_core::commands::key::KeyOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::key::KeyOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::key::KeyOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::key::KeyOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::key::KeyOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::key::KeyOptions where T: core::clone::Clone
pub type rustic_core::commands::key::KeyOptions::Owned = T
pub fn rustic_core::commands::key::KeyOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::key::KeyOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::key::KeyOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::key::KeyOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::key::KeyOptions where T: core::marker::Sized
pub fn rustic_core::commands::key::KeyOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::key::KeyOptions where T: core::marker::Sized
pub fn rustic_core::commands::key::KeyOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::key::KeyOptions
pub fn rustic_core::commands::key::KeyOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::key::KeyOptions
pub type rustic_core::commands::key::KeyOptions::Init = T
pub const rustic_core::commands::key::KeyOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::key::KeyOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::key::KeyOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::key::KeyOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::key::KeyOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::key::KeyOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::key::KeyOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::key::KeyOptions
pub type rustic_core::commands::key::KeyOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::key::KeyOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::key::KeyOptions::vzip(self) -> V
pub mod rustic_core::commands::merge
pub fn rustic_core::commands::merge::merge_snapshots<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedTree>(repo: &rustic_core::repository::Repository<P, S>, snapshots: &[rustic_core::repofile::snapshotfile::SnapshotFile], cmp: &impl core::ops::function::Fn(&rustic_core::backend::node::Node, &rustic_core::backend::node::Node) -> core::cmp::Ordering, snap: rustic_core::repofile::snapshotfile::SnapshotFile) -> rustic_core::error::RusticResult<rustic_core::repofile::snapshotfile::SnapshotFile>
pub fn rustic_core::commands::merge::merge_trees<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedTree>(repo: &rustic_core::repository::Repository<P, S>, trees: &[rustic_core::id::Id], cmp: &impl core::ops::function::Fn(&rustic_core::backend::node::Node, &rustic_core::backend::node::Node) -> core::cmp::Ordering, summary: &mut rustic_core::repofile::snapshotfile::SnapshotSummary) -> rustic_core::error::RusticResult<rustic_core::id::Id>
pub mod rustic_core::commands::prune
pub mod rustic_core::commands::prune::constants
pub const rustic_core::commands::prune::constants::MIN_INDEX_LEN: usize = 10_000usize
pub enum rustic_core::commands::prune::LimitOption
pub rustic_core::commands::prune::LimitOption::Percentage(u64)
pub rustic_core::commands::prune::LimitOption::Size(bytesize::ByteSize)
pub rustic_core::commands::prune::LimitOption::Unlimited
impl core::str::traits::FromStr for rustic_core::commands::prune::LimitOption
pub type rustic_core::commands::prune::LimitOption::Err = rustic_core::error::CommandErrorKind
pub fn rustic_core::commands::prune::LimitOption::from_str(s: &str) -> core::result::Result<Self, Self::Err>
impl core::clone::Clone for rustic_core::commands::prune::LimitOption
pub fn rustic_core::commands::prune::LimitOption::clone(&self) -> rustic_core::commands::prune::LimitOption
impl core::fmt::Debug for rustic_core::commands::prune::LimitOption
pub fn rustic_core::commands::prune::LimitOption::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::prune::LimitOption
impl core::marker::Send for rustic_core::commands::prune::LimitOption
impl core::marker::Sync for rustic_core::commands::prune::LimitOption
impl core::marker::Unpin for rustic_core::commands::prune::LimitOption
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::prune::LimitOption
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::prune::LimitOption
impl<T, U> core::convert::Into<U> for rustic_core::commands::prune::LimitOption where U: core::convert::From<T>
pub fn rustic_core::commands::prune::LimitOption::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::prune::LimitOption where U: core::convert::Into<T>
pub type rustic_core::commands::prune::LimitOption::Error = core::convert::Infallible
pub fn rustic_core::commands::prune::LimitOption::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::prune::LimitOption where U: core::convert::TryFrom<T>
pub type rustic_core::commands::prune::LimitOption::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::prune::LimitOption::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::prune::LimitOption where T: core::clone::Clone
pub type rustic_core::commands::prune::LimitOption::Owned = T
pub fn rustic_core::commands::prune::LimitOption::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::prune::LimitOption::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::prune::LimitOption where T: 'static + core::marker::Sized
pub fn rustic_core::commands::prune::LimitOption::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::prune::LimitOption where T: core::marker::Sized
pub fn rustic_core::commands::prune::LimitOption::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::prune::LimitOption where T: core::marker::Sized
pub fn rustic_core::commands::prune::LimitOption::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::prune::LimitOption
pub fn rustic_core::commands::prune::LimitOption::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::prune::LimitOption
pub type rustic_core::commands::prune::LimitOption::Init = T
pub const rustic_core::commands::prune::LimitOption::ALIGN: usize
pub unsafe fn rustic_core::commands::prune::LimitOption::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::prune::LimitOption::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::prune::LimitOption::drop(ptr: usize)
pub unsafe fn rustic_core::commands::prune::LimitOption::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::prune::LimitOption
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::prune::LimitOption
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::prune::LimitOption
pub type rustic_core::commands::prune::LimitOption::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::prune::LimitOption where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::prune::LimitOption::vzip(self) -> V
pub enum rustic_core::commands::prune::PackToDo
pub rustic_core::commands::prune::PackToDo::Delete
pub rustic_core::commands::prune::PackToDo::Keep
pub rustic_core::commands::prune::PackToDo::KeepMarked
pub rustic_core::commands::prune::PackToDo::KeepMarkedAndCorrect
pub rustic_core::commands::prune::PackToDo::MarkDelete
pub rustic_core::commands::prune::PackToDo::Recover
pub rustic_core::commands::prune::PackToDo::Repack
pub rustic_core::commands::prune::PackToDo::Undecided
impl core::default::Default for rustic_core::commands::prune::PackToDo
pub fn rustic_core::commands::prune::PackToDo::default() -> Self
impl core::clone::Clone for rustic_core::commands::prune::PackToDo
pub fn rustic_core::commands::prune::PackToDo::clone(&self) -> rustic_core::commands::prune::PackToDo
impl core::cmp::Eq for rustic_core::commands::prune::PackToDo
impl core::cmp::PartialEq<rustic_core::commands::prune::PackToDo> for rustic_core::commands::prune::PackToDo
pub fn rustic_core::commands::prune::PackToDo::eq(&self, other: &rustic_core::commands::prune::PackToDo) -> bool
impl core::fmt::Debug for rustic_core::commands::prune::PackToDo
pub fn rustic_core::commands::prune::PackToDo::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::prune::PackToDo
impl core::marker::StructuralEq for rustic_core::commands::prune::PackToDo
impl core::marker::StructuralPartialEq for rustic_core::commands::prune::PackToDo
impl core::marker::Send for rustic_core::commands::prune::PackToDo
impl core::marker::Sync for rustic_core::commands::prune::PackToDo
impl core::marker::Unpin for rustic_core::commands::prune::PackToDo
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::prune::PackToDo
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::prune::PackToDo
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::commands::prune::PackToDo where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::commands::prune::PackToDo::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::commands::prune::PackToDo where U: core::convert::From<T>
pub fn rustic_core::commands::prune::PackToDo::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::prune::PackToDo where U: core::convert::Into<T>
pub type rustic_core::commands::prune::PackToDo::Error = core::convert::Infallible
pub fn rustic_core::commands::prune::PackToDo::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::prune::PackToDo where U: core::convert::TryFrom<T>
pub type rustic_core::commands::prune::PackToDo::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::prune::PackToDo::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::prune::PackToDo where T: core::clone::Clone
pub type rustic_core::commands::prune::PackToDo::Owned = T
pub fn rustic_core::commands::prune::PackToDo::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::prune::PackToDo::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::prune::PackToDo where T: 'static + core::marker::Sized
pub fn rustic_core::commands::prune::PackToDo::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::prune::PackToDo where T: core::marker::Sized
pub fn rustic_core::commands::prune::PackToDo::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::prune::PackToDo where T: core::marker::Sized
pub fn rustic_core::commands::prune::PackToDo::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::prune::PackToDo
pub fn rustic_core::commands::prune::PackToDo::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::prune::PackToDo
pub type rustic_core::commands::prune::PackToDo::Init = T
pub const rustic_core::commands::prune::PackToDo::ALIGN: usize
pub unsafe fn rustic_core::commands::prune::PackToDo::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::prune::PackToDo::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::prune::PackToDo::drop(ptr: usize)
pub unsafe fn rustic_core::commands::prune::PackToDo::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::prune::PackToDo
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::prune::PackToDo
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::prune::PackToDo
pub type rustic_core::commands::prune::PackToDo::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::prune::PackToDo where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::prune::PackToDo::vzip(self) -> V
pub enum rustic_core::commands::prune::RepackReason
pub rustic_core::commands::prune::RepackReason::PartlyUsed
pub rustic_core::commands::prune::RepackReason::SizeMismatch
pub rustic_core::commands::prune::RepackReason::ToCompress
impl core::cmp::Eq for rustic_core::commands::prune::RepackReason
impl core::cmp::PartialEq<rustic_core::commands::prune::RepackReason> for rustic_core::commands::prune::RepackReason
pub fn rustic_core::commands::prune::RepackReason::eq(&self, other: &rustic_core::commands::prune::RepackReason) -> bool
impl core::fmt::Debug for rustic_core::commands::prune::RepackReason
pub fn rustic_core::commands::prune::RepackReason::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::commands::prune::RepackReason
impl core::marker::StructuralPartialEq for rustic_core::commands::prune::RepackReason
impl core::marker::Send for rustic_core::commands::prune::RepackReason
impl core::marker::Sync for rustic_core::commands::prune::RepackReason
impl core::marker::Unpin for rustic_core::commands::prune::RepackReason
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::prune::RepackReason
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::prune::RepackReason
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::commands::prune::RepackReason where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::commands::prune::RepackReason::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::commands::prune::RepackReason where U: core::convert::From<T>
pub fn rustic_core::commands::prune::RepackReason::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::prune::RepackReason where U: core::convert::Into<T>
pub type rustic_core::commands::prune::RepackReason::Error = core::convert::Infallible
pub fn rustic_core::commands::prune::RepackReason::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::prune::RepackReason where U: core::convert::TryFrom<T>
pub type rustic_core::commands::prune::RepackReason::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::prune::RepackReason::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::prune::RepackReason where T: 'static + core::marker::Sized
pub fn rustic_core::commands::prune::RepackReason::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::prune::RepackReason where T: core::marker::Sized
pub fn rustic_core::commands::prune::RepackReason::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::prune::RepackReason where T: core::marker::Sized
pub fn rustic_core::commands::prune::RepackReason::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::prune::RepackReason
pub fn rustic_core::commands::prune::RepackReason::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::prune::RepackReason
pub type rustic_core::commands::prune::RepackReason::Init = T
pub const rustic_core::commands::prune::RepackReason::ALIGN: usize
pub unsafe fn rustic_core::commands::prune::RepackReason::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::prune::RepackReason::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::prune::RepackReason::drop(ptr: usize)
pub unsafe fn rustic_core::commands::prune::RepackReason::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::prune::RepackReason
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::prune::RepackReason
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::prune::RepackReason
pub type rustic_core::commands::prune::RepackReason::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::prune::RepackReason where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::prune::RepackReason::vzip(self) -> V
pub struct rustic_core::commands::prune::DeleteStats
pub rustic_core::commands::prune::DeleteStats::keep: u64
pub rustic_core::commands::prune::DeleteStats::recover: u64
pub rustic_core::commands::prune::DeleteStats::remove: u64
impl rustic_core::commands::prune::DeleteStats
pub const fn rustic_core::commands::prune::DeleteStats::total(&self) -> u64
impl core::clone::Clone for rustic_core::commands::prune::DeleteStats
pub fn rustic_core::commands::prune::DeleteStats::clone(&self) -> rustic_core::commands::prune::DeleteStats
impl core::default::Default for rustic_core::commands::prune::DeleteStats
pub fn rustic_core::commands::prune::DeleteStats::default() -> rustic_core::commands::prune::DeleteStats
impl core::fmt::Debug for rustic_core::commands::prune::DeleteStats
pub fn rustic_core::commands::prune::DeleteStats::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::prune::DeleteStats
impl core::marker::Send for rustic_core::commands::prune::DeleteStats
impl core::marker::Sync for rustic_core::commands::prune::DeleteStats
impl core::marker::Unpin for rustic_core::commands::prune::DeleteStats
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::prune::DeleteStats
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::prune::DeleteStats
impl<T, U> core::convert::Into<U> for rustic_core::commands::prune::DeleteStats where U: core::convert::From<T>
pub fn rustic_core::commands::prune::DeleteStats::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::prune::DeleteStats where U: core::convert::Into<T>
pub type rustic_core::commands::prune::DeleteStats::Error = core::convert::Infallible
pub fn rustic_core::commands::prune::DeleteStats::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::prune::DeleteStats where U: core::convert::TryFrom<T>
pub type rustic_core::commands::prune::DeleteStats::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::prune::DeleteStats::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::prune::DeleteStats where T: core::clone::Clone
pub type rustic_core::commands::prune::DeleteStats::Owned = T
pub fn rustic_core::commands::prune::DeleteStats::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::prune::DeleteStats::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::prune::DeleteStats where T: 'static + core::marker::Sized
pub fn rustic_core::commands::prune::DeleteStats::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::prune::DeleteStats where T: core::marker::Sized
pub fn rustic_core::commands::prune::DeleteStats::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::prune::DeleteStats where T: core::marker::Sized
pub fn rustic_core::commands::prune::DeleteStats::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::prune::DeleteStats
pub fn rustic_core::commands::prune::DeleteStats::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::prune::DeleteStats
pub type rustic_core::commands::prune::DeleteStats::Init = T
pub const rustic_core::commands::prune::DeleteStats::ALIGN: usize
pub unsafe fn rustic_core::commands::prune::DeleteStats::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::prune::DeleteStats::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::prune::DeleteStats::drop(ptr: usize)
pub unsafe fn rustic_core::commands::prune::DeleteStats::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::prune::DeleteStats
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::prune::DeleteStats
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::prune::DeleteStats
pub type rustic_core::commands::prune::DeleteStats::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::prune::DeleteStats where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::prune::DeleteStats::vzip(self) -> V
pub struct rustic_core::commands::prune::PackInfo
pub rustic_core::commands::prune::PackInfo::blob_type: rustic_core::blob::BlobType
pub rustic_core::commands::prune::PackInfo::unused_blobs: u16
pub rustic_core::commands::prune::PackInfo::unused_size: u32
pub rustic_core::commands::prune::PackInfo::used_blobs: u16
pub rustic_core::commands::prune::PackInfo::used_size: u32
impl rustic_core::commands::prune::PackInfo
pub fn rustic_core::commands::prune::PackInfo::from_pack(pack: &rustic_core::commands::prune::PrunePack, used_ids: &mut std::collections::hash::map::HashMap<rustic_core::id::Id, u8>) -> Self
impl core::cmp::Ord for rustic_core::commands::prune::PackInfo
pub fn rustic_core::commands::prune::PackInfo::cmp(&self, other: &Self) -> core::cmp::Ordering
impl core::cmp::PartialOrd<rustic_core::commands::prune::PackInfo> for rustic_core::commands::prune::PackInfo
pub fn rustic_core::commands::prune::PackInfo::partial_cmp(&self, other: &Self) -> core::option::Option<core::cmp::Ordering>
impl core::clone::Clone for rustic_core::commands::prune::PackInfo
pub fn rustic_core::commands::prune::PackInfo::clone(&self) -> rustic_core::commands::prune::PackInfo
impl core::cmp::Eq for rustic_core::commands::prune::PackInfo
impl core::cmp::PartialEq<rustic_core::commands::prune::PackInfo> for rustic_core::commands::prune::PackInfo
pub fn rustic_core::commands::prune::PackInfo::eq(&self, other: &rustic_core::commands::prune::PackInfo) -> bool
impl core::fmt::Debug for rustic_core::commands::prune::PackInfo
pub fn rustic_core::commands::prune::PackInfo::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::prune::PackInfo
impl core::marker::StructuralEq for rustic_core::commands::prune::PackInfo
impl core::marker::StructuralPartialEq for rustic_core::commands::prune::PackInfo
impl core::marker::Send for rustic_core::commands::prune::PackInfo
impl core::marker::Sync for rustic_core::commands::prune::PackInfo
impl core::marker::Unpin for rustic_core::commands::prune::PackInfo
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::prune::PackInfo
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::prune::PackInfo
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::commands::prune::PackInfo where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::commands::prune::PackInfo::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::commands::prune::PackInfo where U: core::convert::From<T>
pub fn rustic_core::commands::prune::PackInfo::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::prune::PackInfo where U: core::convert::Into<T>
pub type rustic_core::commands::prune::PackInfo::Error = core::convert::Infallible
pub fn rustic_core::commands::prune::PackInfo::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::prune::PackInfo where U: core::convert::TryFrom<T>
pub type rustic_core::commands::prune::PackInfo::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::prune::PackInfo::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::prune::PackInfo where T: core::clone::Clone
pub type rustic_core::commands::prune::PackInfo::Owned = T
pub fn rustic_core::commands::prune::PackInfo::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::prune::PackInfo::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::prune::PackInfo where T: 'static + core::marker::Sized
pub fn rustic_core::commands::prune::PackInfo::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::prune::PackInfo where T: core::marker::Sized
pub fn rustic_core::commands::prune::PackInfo::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::prune::PackInfo where T: core::marker::Sized
pub fn rustic_core::commands::prune::PackInfo::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::prune::PackInfo
pub fn rustic_core::commands::prune::PackInfo::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::prune::PackInfo
pub type rustic_core::commands::prune::PackInfo::Init = T
pub const rustic_core::commands::prune::PackInfo::ALIGN: usize
pub unsafe fn rustic_core::commands::prune::PackInfo::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::prune::PackInfo::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::prune::PackInfo::drop(ptr: usize)
pub unsafe fn rustic_core::commands::prune::PackInfo::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::prune::PackInfo
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::prune::PackInfo
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::prune::PackInfo
pub type rustic_core::commands::prune::PackInfo::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::prune::PackInfo where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::prune::PackInfo::vzip(self) -> V
pub struct rustic_core::commands::prune::PackStats
pub rustic_core::commands::prune::PackStats::keep: u64
pub rustic_core::commands::prune::PackStats::partly_used: u64
pub rustic_core::commands::prune::PackStats::repack: u64
pub rustic_core::commands::prune::PackStats::unused: u64
pub rustic_core::commands::prune::PackStats::used: u64
impl core::clone::Clone for rustic_core::commands::prune::PackStats
pub fn rustic_core::commands::prune::PackStats::clone(&self) -> rustic_core::commands::prune::PackStats
impl core::default::Default for rustic_core::commands::prune::PackStats
pub fn rustic_core::commands::prune::PackStats::default() -> rustic_core::commands::prune::PackStats
impl core::fmt::Debug for rustic_core::commands::prune::PackStats
pub fn rustic_core::commands::prune::PackStats::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::prune::PackStats
impl core::marker::Send for rustic_core::commands::prune::PackStats
impl core::marker::Sync for rustic_core::commands::prune::PackStats
impl core::marker::Unpin for rustic_core::commands::prune::PackStats
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::prune::PackStats
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::prune::PackStats
impl<T, U> core::convert::Into<U> for rustic_core::commands::prune::PackStats where U: core::convert::From<T>
pub fn rustic_core::commands::prune::PackStats::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::prune::PackStats where U: core::convert::Into<T>
pub type rustic_core::commands::prune::PackStats::Error = core::convert::Infallible
pub fn rustic_core::commands::prune::PackStats::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::prune::PackStats where U: core::convert::TryFrom<T>
pub type rustic_core::commands::prune::PackStats::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::prune::PackStats::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::prune::PackStats where T: core::clone::Clone
pub type rustic_core::commands::prune::PackStats::Owned = T
pub fn rustic_core::commands::prune::PackStats::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::prune::PackStats::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::prune::PackStats where T: 'static + core::marker::Sized
pub fn rustic_core::commands::prune::PackStats::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::prune::PackStats where T: core::marker::Sized
pub fn rustic_core::commands::prune::PackStats::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::prune::PackStats where T: core::marker::Sized
pub fn rustic_core::commands::prune::PackStats::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::prune::PackStats
pub fn rustic_core::commands::prune::PackStats::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::prune::PackStats
pub type rustic_core::commands::prune::PackStats::Init = T
pub const rustic_core::commands::prune::PackStats::ALIGN: usize
pub unsafe fn rustic_core::commands::prune::PackStats::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::prune::PackStats::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::prune::PackStats::drop(ptr: usize)
pub unsafe fn rustic_core::commands::prune::PackStats::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::prune::PackStats
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::prune::PackStats
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::prune::PackStats
pub type rustic_core::commands::prune::PackStats::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::prune::PackStats where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::prune::PackStats::vzip(self) -> V
pub struct rustic_core::commands::prune::PruneIndex
pub rustic_core::commands::prune::PruneIndex::id: rustic_core::id::Id
pub rustic_core::commands::prune::PruneIndex::modified: bool
pub rustic_core::commands::prune::PruneIndex::packs: alloc::vec::Vec<rustic_core::commands::prune::PrunePack>
impl rustic_core::commands::prune::PruneIndex
pub fn rustic_core::commands::prune::PruneIndex::len(&self) -> usize
impl core::fmt::Debug for rustic_core::commands::prune::PruneIndex
pub fn rustic_core::commands::prune::PruneIndex::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::commands::prune::PruneIndex
impl core::marker::Sync for rustic_core::commands::prune::PruneIndex
impl core::marker::Unpin for rustic_core::commands::prune::PruneIndex
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::prune::PruneIndex
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::prune::PruneIndex
impl<T, U> core::convert::Into<U> for rustic_core::commands::prune::PruneIndex where U: core::convert::From<T>
pub fn rustic_core::commands::prune::PruneIndex::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::prune::PruneIndex where U: core::convert::Into<T>
pub type rustic_core::commands::prune::PruneIndex::Error = core::convert::Infallible
pub fn rustic_core::commands::prune::PruneIndex::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::prune::PruneIndex where U: core::convert::TryFrom<T>
pub type rustic_core::commands::prune::PruneIndex::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::prune::PruneIndex::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::prune::PruneIndex where T: 'static + core::marker::Sized
pub fn rustic_core::commands::prune::PruneIndex::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::prune::PruneIndex where T: core::marker::Sized
pub fn rustic_core::commands::prune::PruneIndex::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::prune::PruneIndex where T: core::marker::Sized
pub fn rustic_core::commands::prune::PruneIndex::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::prune::PruneIndex
pub fn rustic_core::commands::prune::PruneIndex::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::prune::PruneIndex
pub type rustic_core::commands::prune::PruneIndex::Init = T
pub const rustic_core::commands::prune::PruneIndex::ALIGN: usize
pub unsafe fn rustic_core::commands::prune::PruneIndex::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::prune::PruneIndex::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::prune::PruneIndex::drop(ptr: usize)
pub unsafe fn rustic_core::commands::prune::PruneIndex::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::prune::PruneIndex
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::prune::PruneIndex
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::prune::PruneIndex
pub type rustic_core::commands::prune::PruneIndex::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::prune::PruneIndex where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::prune::PruneIndex::vzip(self) -> V
pub struct rustic_core::commands::prune::PruneOptions
pub rustic_core::commands::prune::PruneOptions::fast_repack: bool
pub rustic_core::commands::prune::PruneOptions::ignore_snaps: alloc::vec::Vec<rustic_core::id::Id>
pub rustic_core::commands::prune::PruneOptions::instant_delete: bool
pub rustic_core::commands::prune::PruneOptions::keep_delete: humantime::wrapper::Duration
pub rustic_core::commands::prune::PruneOptions::keep_pack: humantime::wrapper::Duration
pub rustic_core::commands::prune::PruneOptions::max_repack: rustic_core::commands::prune::LimitOption
pub rustic_core::commands::prune::PruneOptions::max_unused: rustic_core::commands::prune::LimitOption
pub rustic_core::commands::prune::PruneOptions::no_resize: bool
pub rustic_core::commands::prune::PruneOptions::repack_all: bool
pub rustic_core::commands::prune::PruneOptions::repack_cacheable_only: core::option::Option<bool>
pub rustic_core::commands::prune::PruneOptions::repack_uncompressed: bool
impl rustic_core::commands::prune::PruneOptions
pub fn rustic_core::commands::prune::PruneOptions::fast_repack(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::ignore_snaps(self, value: impl core::convert::Into<alloc::vec::Vec<rustic_core::id::Id>>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::instant_delete(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::keep_delete(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::keep_pack(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::max_repack(self, value: impl core::convert::Into<rustic_core::commands::prune::LimitOption>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::max_unused(self, value: impl core::convert::Into<rustic_core::commands::prune::LimitOption>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::no_resize(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::repack_all(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::repack_cacheable_only(self, value: impl core::convert::Into<core::option::Option<bool>>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::repack_uncompressed(self, value: impl core::convert::Into<bool>) -> Self
impl rustic_core::commands::prune::PruneOptions
pub fn rustic_core::commands::prune::PruneOptions::get_plan<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::Open>(&self, repo: &rustic_core::repository::Repository<P, S>) -> rustic_core::error::RusticResult<rustic_core::commands::prune::PrunePlan>
impl core::default::Default for rustic_core::commands::prune::PruneOptions
pub fn rustic_core::commands::prune::PruneOptions::default() -> Self
impl core::clone::Clone for rustic_core::commands::prune::PruneOptions
pub fn rustic_core::commands::prune::PruneOptions::clone(&self) -> rustic_core::commands::prune::PruneOptions
impl core::fmt::Debug for rustic_core::commands::prune::PruneOptions
pub fn rustic_core::commands::prune::PruneOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::commands::prune::PruneOptions
impl core::marker::Sync for rustic_core::commands::prune::PruneOptions
impl core::marker::Unpin for rustic_core::commands::prune::PruneOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::prune::PruneOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::prune::PruneOptions
impl<T, U> core::convert::Into<U> for rustic_core::commands::prune::PruneOptions where U: core::convert::From<T>
pub fn rustic_core::commands::prune::PruneOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::prune::PruneOptions where U: core::convert::Into<T>
pub type rustic_core::commands::prune::PruneOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::prune::PruneOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::prune::PruneOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::prune::PruneOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::prune::PruneOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::prune::PruneOptions where T: core::clone::Clone
pub type rustic_core::commands::prune::PruneOptions::Owned = T
pub fn rustic_core::commands::prune::PruneOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::prune::PruneOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::prune::PruneOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::prune::PruneOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::prune::PruneOptions where T: core::marker::Sized
pub fn rustic_core::commands::prune::PruneOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::prune::PruneOptions where T: core::marker::Sized
pub fn rustic_core::commands::prune::PruneOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::prune::PruneOptions
pub fn rustic_core::commands::prune::PruneOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::prune::PruneOptions
pub type rustic_core::commands::prune::PruneOptions::Init = T
pub const rustic_core::commands::prune::PruneOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::prune::PruneOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::prune::PruneOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::prune::PruneOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::prune::PruneOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::prune::PruneOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::prune::PruneOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::prune::PruneOptions
pub type rustic_core::commands::prune::PruneOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::prune::PruneOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::prune::PruneOptions::vzip(self) -> V
pub struct rustic_core::commands::prune::PrunePack
pub rustic_core::commands::prune::PrunePack::blob_type: rustic_core::blob::BlobType
pub rustic_core::commands::prune::PrunePack::blobs: alloc::vec::Vec<rustic_core::repofile::indexfile::IndexBlob>
pub rustic_core::commands::prune::PrunePack::delete_mark: bool
pub rustic_core::commands::prune::PrunePack::id: rustic_core::id::Id
pub rustic_core::commands::prune::PrunePack::size: u32
pub rustic_core::commands::prune::PrunePack::time: core::option::Option<chrono::datetime::DateTime<chrono::offset::local::Local>>
pub rustic_core::commands::prune::PrunePack::to_do: rustic_core::commands::prune::PackToDo
impl rustic_core::commands::prune::PrunePack
pub fn rustic_core::commands::prune::PrunePack::from_index_pack(p: rustic_core::repofile::indexfile::IndexPack, delete_mark: bool) -> Self
pub fn rustic_core::commands::prune::PrunePack::from_index_pack_marked(p: rustic_core::repofile::indexfile::IndexPack) -> Self
pub fn rustic_core::commands::prune::PrunePack::from_index_pack_unmarked(p: rustic_core::repofile::indexfile::IndexPack) -> Self
pub fn rustic_core::commands::prune::PrunePack::into_index_pack(self) -> rustic_core::repofile::indexfile::IndexPack
pub fn rustic_core::commands::prune::PrunePack::into_index_pack_with_time(self, time: chrono::datetime::DateTime<chrono::offset::local::Local>) -> rustic_core::repofile::indexfile::IndexPack
pub fn rustic_core::commands::prune::PrunePack::is_compressed(&self) -> bool
pub fn rustic_core::commands::prune::PrunePack::set_todo(&mut self, todo: rustic_core::commands::prune::PackToDo, pi: &rustic_core::commands::prune::PackInfo, stats: &mut rustic_core::commands::prune::PruneStats)
impl core::fmt::Debug for rustic_core::commands::prune::PrunePack
pub fn rustic_core::commands::prune::PrunePack::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::commands::prune::PrunePack
impl core::marker::Sync for rustic_core::commands::prune::PrunePack
impl core::marker::Unpin for rustic_core::commands::prune::PrunePack
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::prune::PrunePack
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::prune::PrunePack
impl<T, U> core::convert::Into<U> for rustic_core::commands::prune::PrunePack where U: core::convert::From<T>
pub fn rustic_core::commands::prune::PrunePack::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::prune::PrunePack where U: core::convert::Into<T>
pub type rustic_core::commands::prune::PrunePack::Error = core::convert::Infallible
pub fn rustic_core::commands::prune::PrunePack::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::prune::PrunePack where U: core::convert::TryFrom<T>
pub type rustic_core::commands::prune::PrunePack::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::prune::PrunePack::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::prune::PrunePack where T: 'static + core::marker::Sized
pub fn rustic_core::commands::prune::PrunePack::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::prune::PrunePack where T: core::marker::Sized
pub fn rustic_core::commands::prune::PrunePack::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::prune::PrunePack where T: core::marker::Sized
pub fn rustic_core::commands::prune::PrunePack::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::prune::PrunePack
pub fn rustic_core::commands::prune::PrunePack::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::prune::PrunePack
pub type rustic_core::commands::prune::PrunePack::Init = T
pub const rustic_core::commands::prune::PrunePack::ALIGN: usize
pub unsafe fn rustic_core::commands::prune::PrunePack::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::prune::PrunePack::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::prune::PrunePack::drop(ptr: usize)
pub unsafe fn rustic_core::commands::prune::PrunePack::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::prune::PrunePack
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::prune::PrunePack
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::prune::PrunePack
pub type rustic_core::commands::prune::PrunePack::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::prune::PrunePack where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::prune::PrunePack::vzip(self) -> V
pub struct rustic_core::commands::prune::PrunePlan
pub rustic_core::commands::prune::PrunePlan::existing_packs: std::collections::hash::map::HashMap<rustic_core::id::Id, u32>
pub rustic_core::commands::prune::PrunePlan::index_files: alloc::vec::Vec<rustic_core::commands::prune::PruneIndex>
pub rustic_core::commands::prune::PrunePlan::repack_candidates: alloc::vec::Vec<(rustic_core::commands::prune::PackInfo, rustic_core::commands::prune::RepackReason, usize, usize)>
pub rustic_core::commands::prune::PrunePlan::stats: rustic_core::commands::prune::PruneStats
pub rustic_core::commands::prune::PrunePlan::time: chrono::datetime::DateTime<chrono::offset::local::Local>
pub rustic_core::commands::prune::PrunePlan::used_ids: std::collections::hash::map::HashMap<rustic_core::id::Id, u8>
impl rustic_core::commands::prune::PrunePlan
pub fn rustic_core::commands::prune::PrunePlan::check(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::prune::PrunePlan::check_existing_packs(&mut self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::prune::PrunePlan::count_used_blobs(&mut self)
pub fn rustic_core::commands::prune::PrunePlan::decide_packs(&mut self, keep_pack: chrono::duration::Duration, keep_delete: chrono::duration::Duration, repack_cacheable_only: bool, repack_uncompressed: bool, repack_all: bool, pack_sizer: &enum_map::EnumMap<rustic_core::blob::BlobType, rustic_core::blob::packer::PackSizer>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::prune::PrunePlan::decide_repack(&mut self, max_repack: &rustic_core::commands::prune::LimitOption, max_unused: &rustic_core::commands::prune::LimitOption, repack_uncompressed: bool, no_resize: bool, pack_sizer: &enum_map::EnumMap<rustic_core::blob::BlobType, rustic_core::blob::packer::PackSizer>)
pub fn rustic_core::commands::prune::PrunePlan::do_prune<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::Open>(self, repo: &rustic_core::repository::Repository<P, S>, opts: &rustic_core::commands::prune::PruneOptions) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::prune::PrunePlan::filter_index_files(&mut self, instant_delete: bool)
pub fn rustic_core::commands::prune::PrunePlan::new(used_ids: std::collections::hash::map::HashMap<rustic_core::id::Id, u8>, existing_packs: std::collections::hash::map::HashMap<rustic_core::id::Id, u32>, index_files: alloc::vec::Vec<(rustic_core::id::Id, rustic_core::repofile::indexfile::IndexFile)>) -> Self
pub fn rustic_core::commands::prune::PrunePlan::repack_packs(&self) -> alloc::vec::Vec<rustic_core::id::Id>
impl core::fmt::Debug for rustic_core::commands::prune::PrunePlan
pub fn rustic_core::commands::prune::PrunePlan::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::commands::prune::PrunePlan
impl core::marker::Sync for rustic_core::commands::prune::PrunePlan
impl core::marker::Unpin for rustic_core::commands::prune::PrunePlan
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::prune::PrunePlan
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::prune::PrunePlan
impl<T, U> core::convert::Into<U> for rustic_core::commands::prune::PrunePlan where U: core::convert::From<T>
pub fn rustic_core::commands::prune::PrunePlan::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::prune::PrunePlan where U: core::convert::Into<T>
pub type rustic_core::commands::prune::PrunePlan::Error = core::convert::Infallible
pub fn rustic_core::commands::prune::PrunePlan::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::prune::PrunePlan where U: core::convert::TryFrom<T>
pub type rustic_core::commands::prune::PrunePlan::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::prune::PrunePlan::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::prune::PrunePlan where T: 'static + core::marker::Sized
pub fn rustic_core::commands::prune::PrunePlan::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::prune::PrunePlan where T: core::marker::Sized
pub fn rustic_core::commands::prune::PrunePlan::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::prune::PrunePlan where T: core::marker::Sized
pub fn rustic_core::commands::prune::PrunePlan::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::prune::PrunePlan
pub fn rustic_core::commands::prune::PrunePlan::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::prune::PrunePlan
pub type rustic_core::commands::prune::PrunePlan::Init = T
pub const rustic_core::commands::prune::PrunePlan::ALIGN: usize
pub unsafe fn rustic_core::commands::prune::PrunePlan::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::prune::PrunePlan::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::prune::PrunePlan::drop(ptr: usize)
pub unsafe fn rustic_core::commands::prune::PrunePlan::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::prune::PrunePlan
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::prune::PrunePlan
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::prune::PrunePlan
pub type rustic_core::commands::prune::PrunePlan::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::prune::PrunePlan where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::prune::PrunePlan::vzip(self) -> V
pub struct rustic_core::commands::prune::PruneStats
pub rustic_core::commands::prune::PruneStats::blobs: enum_map::EnumMap<rustic_core::blob::BlobType, rustic_core::commands::prune::SizeStats>
pub rustic_core::commands::prune::PruneStats::index_files: u64
pub rustic_core::commands::prune::PruneStats::index_files_rebuild: u64
pub rustic_core::commands::prune::PruneStats::packs: rustic_core::commands::prune::PackStats
pub rustic_core::commands::prune::PruneStats::packs_to_delete: rustic_core::commands::prune::DeleteStats
pub rustic_core::commands::prune::PruneStats::packs_unref: u64
pub rustic_core::commands::prune::PruneStats::size: enum_map::EnumMap<rustic_core::blob::BlobType, rustic_core::commands::prune::SizeStats>
pub rustic_core::commands::prune::PruneStats::size_to_delete: rustic_core::commands::prune::DeleteStats
pub rustic_core::commands::prune::PruneStats::size_unref: u64
impl rustic_core::commands::prune::PruneStats
pub fn rustic_core::commands::prune::PruneStats::blobs_sum(&self) -> rustic_core::commands::prune::SizeStats
pub fn rustic_core::commands::prune::PruneStats::size_sum(&self) -> rustic_core::commands::prune::SizeStats
impl core::default::Default for rustic_core::commands::prune::PruneStats
pub fn rustic_core::commands::prune::PruneStats::default() -> rustic_core::commands::prune::PruneStats
impl core::fmt::Debug for rustic_core::commands::prune::PruneStats
pub fn rustic_core::commands::prune::PruneStats::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::commands::prune::PruneStats
impl core::marker::Sync for rustic_core::commands::prune::PruneStats
impl core::marker::Unpin for rustic_core::commands::prune::PruneStats
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::prune::PruneStats
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::prune::PruneStats
impl<T, U> core::convert::Into<U> for rustic_core::commands::prune::PruneStats where U: core::convert::From<T>
pub fn rustic_core::commands::prune::PruneStats::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::prune::PruneStats where U: core::convert::Into<T>
pub type rustic_core::commands::prune::PruneStats::Error = core::convert::Infallible
pub fn rustic_core::commands::prune::PruneStats::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::prune::PruneStats where U: core::convert::TryFrom<T>
pub type rustic_core::commands::prune::PruneStats::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::prune::PruneStats::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::prune::PruneStats where T: 'static + core::marker::Sized
pub fn rustic_core::commands::prune::PruneStats::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::prune::PruneStats where T: core::marker::Sized
pub fn rustic_core::commands::prune::PruneStats::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::prune::PruneStats where T: core::marker::Sized
pub fn rustic_core::commands::prune::PruneStats::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::prune::PruneStats
pub fn rustic_core::commands::prune::PruneStats::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::prune::PruneStats
pub type rustic_core::commands::prune::PruneStats::Init = T
pub const rustic_core::commands::prune::PruneStats::ALIGN: usize
pub unsafe fn rustic_core::commands::prune::PruneStats::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::prune::PruneStats::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::prune::PruneStats::drop(ptr: usize)
pub unsafe fn rustic_core::commands::prune::PruneStats::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::prune::PruneStats
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::prune::PruneStats
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::prune::PruneStats
pub type rustic_core::commands::prune::PruneStats::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::prune::PruneStats where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::prune::PruneStats::vzip(self) -> V
pub struct rustic_core::commands::prune::SizeStats
pub rustic_core::commands::prune::SizeStats::remove: u64
pub rustic_core::commands::prune::SizeStats::repack: u64
pub rustic_core::commands::prune::SizeStats::repackrm: u64
pub rustic_core::commands::prune::SizeStats::unused: u64
pub rustic_core::commands::prune::SizeStats::used: u64
impl rustic_core::commands::prune::SizeStats
pub const fn rustic_core::commands::prune::SizeStats::total(&self) -> u64
pub const fn rustic_core::commands::prune::SizeStats::total_after_prune(&self) -> u64
pub const fn rustic_core::commands::prune::SizeStats::unused_after_prune(&self) -> u64
impl core::ops::arith::Add<rustic_core::commands::prune::SizeStats> for rustic_core::commands::prune::SizeStats
pub type rustic_core::commands::prune::SizeStats::Output = rustic_core::commands::prune::SizeStats
pub fn rustic_core::commands::prune::SizeStats::add(self, rhs: rustic_core::commands::prune::SizeStats) -> rustic_core::commands::prune::SizeStats
impl core::clone::Clone for rustic_core::commands::prune::SizeStats
pub fn rustic_core::commands::prune::SizeStats::clone(&self) -> rustic_core::commands::prune::SizeStats
impl core::default::Default for rustic_core::commands::prune::SizeStats
pub fn rustic_core::commands::prune::SizeStats::default() -> rustic_core::commands::prune::SizeStats
impl core::fmt::Debug for rustic_core::commands::prune::SizeStats
pub fn rustic_core::commands::prune::SizeStats::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::prune::SizeStats
impl core::marker::Send for rustic_core::commands::prune::SizeStats
impl core::marker::Sync for rustic_core::commands::prune::SizeStats
impl core::marker::Unpin for rustic_core::commands::prune::SizeStats
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::prune::SizeStats
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::prune::SizeStats
impl<T, U> core::convert::Into<U> for rustic_core::commands::prune::SizeStats where U: core::convert::From<T>
pub fn rustic_core::commands::prune::SizeStats::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::prune::SizeStats where U: core::convert::Into<T>
pub type rustic_core::commands::prune::SizeStats::Error = core::convert::Infallible
pub fn rustic_core::commands::prune::SizeStats::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::prune::SizeStats where U: core::convert::TryFrom<T>
pub type rustic_core::commands::prune::SizeStats::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::prune::SizeStats::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::prune::SizeStats where T: core::clone::Clone
pub type rustic_core::commands::prune::SizeStats::Owned = T
pub fn rustic_core::commands::prune::SizeStats::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::prune::SizeStats::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::prune::SizeStats where T: 'static + core::marker::Sized
pub fn rustic_core::commands::prune::SizeStats::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::prune::SizeStats where T: core::marker::Sized
pub fn rustic_core::commands::prune::SizeStats::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::prune::SizeStats where T: core::marker::Sized
pub fn rustic_core::commands::prune::SizeStats::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::prune::SizeStats
pub fn rustic_core::commands::prune::SizeStats::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::prune::SizeStats
pub type rustic_core::commands::prune::SizeStats::Init = T
pub const rustic_core::commands::prune::SizeStats::ALIGN: usize
pub unsafe fn rustic_core::commands::prune::SizeStats::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::prune::SizeStats::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::prune::SizeStats::drop(ptr: usize)
pub unsafe fn rustic_core::commands::prune::SizeStats::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::prune::SizeStats
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::prune::SizeStats
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::prune::SizeStats
pub type rustic_core::commands::prune::SizeStats::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::prune::SizeStats where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::prune::SizeStats::vzip(self) -> V
pub fn rustic_core::commands::prune::find_used_blobs(index: &impl rustic_core::index::IndexedBackend, ignore_snaps: &[rustic_core::id::Id], pb: &impl rustic_core::progress::ProgressBars) -> rustic_core::error::RusticResult<std::collections::hash::map::HashMap<rustic_core::id::Id, u8>>
pub mod rustic_core::commands::repair
pub mod rustic_core::commands::repair::index
#[non_exhaustive] pub struct rustic_core::commands::repair::index::RepairIndexOptions
pub rustic_core::commands::repair::index::RepairIndexOptions::read_all: bool
impl rustic_core::commands::repair::index::RepairIndexOptions
pub fn rustic_core::commands::repair::index::RepairIndexOptions::read_all(self, value: impl core::convert::Into<bool>) -> Self
impl rustic_core::commands::repair::index::RepairIndexOptions
pub fn rustic_core::commands::repair::index::RepairIndexOptions::repair<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::Open>(self, repo: &rustic_core::repository::Repository<P, S>, dry_run: bool) -> rustic_core::error::RusticResult<()>
impl core::clone::Clone for rustic_core::commands::repair::index::RepairIndexOptions
pub fn rustic_core::commands::repair::index::RepairIndexOptions::clone(&self) -> rustic_core::commands::repair::index::RepairIndexOptions
impl core::default::Default for rustic_core::commands::repair::index::RepairIndexOptions
pub fn rustic_core::commands::repair::index::RepairIndexOptions::default() -> rustic_core::commands::repair::index::RepairIndexOptions
impl core::fmt::Debug for rustic_core::commands::repair::index::RepairIndexOptions
pub fn rustic_core::commands::repair::index::RepairIndexOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::repair::index::RepairIndexOptions
impl core::marker::Send for rustic_core::commands::repair::index::RepairIndexOptions
impl core::marker::Sync for rustic_core::commands::repair::index::RepairIndexOptions
impl core::marker::Unpin for rustic_core::commands::repair::index::RepairIndexOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::repair::index::RepairIndexOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::repair::index::RepairIndexOptions
impl<T, U> core::convert::Into<U> for rustic_core::commands::repair::index::RepairIndexOptions where U: core::convert::From<T>
pub fn rustic_core::commands::repair::index::RepairIndexOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::repair::index::RepairIndexOptions where U: core::convert::Into<T>
pub type rustic_core::commands::repair::index::RepairIndexOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::repair::index::RepairIndexOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::repair::index::RepairIndexOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::repair::index::RepairIndexOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::repair::index::RepairIndexOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::repair::index::RepairIndexOptions where T: core::clone::Clone
pub type rustic_core::commands::repair::index::RepairIndexOptions::Owned = T
pub fn rustic_core::commands::repair::index::RepairIndexOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::repair::index::RepairIndexOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::repair::index::RepairIndexOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::repair::index::RepairIndexOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::repair::index::RepairIndexOptions where T: core::marker::Sized
pub fn rustic_core::commands::repair::index::RepairIndexOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::repair::index::RepairIndexOptions where T: core::marker::Sized
pub fn rustic_core::commands::repair::index::RepairIndexOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::repair::index::RepairIndexOptions
pub fn rustic_core::commands::repair::index::RepairIndexOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::repair::index::RepairIndexOptions
pub type rustic_core::commands::repair::index::RepairIndexOptions::Init = T
pub const rustic_core::commands::repair::index::RepairIndexOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::repair::index::RepairIndexOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::repair::index::RepairIndexOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::repair::index::RepairIndexOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::repair::index::RepairIndexOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::repair::index::RepairIndexOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::repair::index::RepairIndexOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::repair::index::RepairIndexOptions
pub type rustic_core::commands::repair::index::RepairIndexOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::repair::index::RepairIndexOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::repair::index::RepairIndexOptions::vzip(self) -> V
pub mod rustic_core::commands::repair::snapshots
pub enum rustic_core::commands::repair::snapshots::Changed
pub rustic_core::commands::repair::snapshots::Changed::None
pub rustic_core::commands::repair::snapshots::Changed::SubTree
pub rustic_core::commands::repair::snapshots::Changed::This
impl core::clone::Clone for rustic_core::commands::repair::snapshots::Changed
pub fn rustic_core::commands::repair::snapshots::Changed::clone(&self) -> rustic_core::commands::repair::snapshots::Changed
impl core::marker::Copy for rustic_core::commands::repair::snapshots::Changed
impl core::marker::Send for rustic_core::commands::repair::snapshots::Changed
impl core::marker::Sync for rustic_core::commands::repair::snapshots::Changed
impl core::marker::Unpin for rustic_core::commands::repair::snapshots::Changed
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::repair::snapshots::Changed
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::repair::snapshots::Changed
impl<T, U> core::convert::Into<U> for rustic_core::commands::repair::snapshots::Changed where U: core::convert::From<T>
pub fn rustic_core::commands::repair::snapshots::Changed::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::repair::snapshots::Changed where U: core::convert::Into<T>
pub type rustic_core::commands::repair::snapshots::Changed::Error = core::convert::Infallible
pub fn rustic_core::commands::repair::snapshots::Changed::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::repair::snapshots::Changed where U: core::convert::TryFrom<T>
pub type rustic_core::commands::repair::snapshots::Changed::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::repair::snapshots::Changed::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::repair::snapshots::Changed where T: core::clone::Clone
pub type rustic_core::commands::repair::snapshots::Changed::Owned = T
pub fn rustic_core::commands::repair::snapshots::Changed::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::repair::snapshots::Changed::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::repair::snapshots::Changed where T: 'static + core::marker::Sized
pub fn rustic_core::commands::repair::snapshots::Changed::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::repair::snapshots::Changed where T: core::marker::Sized
pub fn rustic_core::commands::repair::snapshots::Changed::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::repair::snapshots::Changed where T: core::marker::Sized
pub fn rustic_core::commands::repair::snapshots::Changed::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::repair::snapshots::Changed
pub fn rustic_core::commands::repair::snapshots::Changed::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::repair::snapshots::Changed
pub type rustic_core::commands::repair::snapshots::Changed::Init = T
pub const rustic_core::commands::repair::snapshots::Changed::ALIGN: usize
pub unsafe fn rustic_core::commands::repair::snapshots::Changed::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::repair::snapshots::Changed::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::repair::snapshots::Changed::drop(ptr: usize)
pub unsafe fn rustic_core::commands::repair::snapshots::Changed::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::repair::snapshots::Changed
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::repair::snapshots::Changed
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::repair::snapshots::Changed
pub type rustic_core::commands::repair::snapshots::Changed::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::repair::snapshots::Changed where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::repair::snapshots::Changed::vzip(self) -> V
pub struct rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
pub rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::delete: bool
pub rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::suffix: alloc::string::String
pub rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::tag: alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>
impl rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::delete(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::suffix(self, value: impl core::convert::Into<alloc::string::String>) -> Self
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::tag(self, value: impl core::convert::Into<alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>>) -> Self
impl rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::repair<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedFull>(&self, repo: &rustic_core::repository::Repository<P, S>, snapshots: alloc::vec::Vec<rustic_core::repofile::snapshotfile::SnapshotFile>, dry_run: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::repair_tree<BE: rustic_core::backend::decrypt::DecryptWriteBackend>(&self, be: &impl rustic_core::index::IndexedBackend, packer: &mut rustic_core::blob::packer::Packer<BE>, id: core::option::Option<rustic_core::id::Id>, replaced: &mut std::collections::hash::map::HashMap<rustic_core::id::Id, (rustic_core::commands::repair::snapshots::Changed, rustic_core::id::Id)>, seen: &mut std::collections::hash::set::HashSet<rustic_core::id::Id>, dry_run: bool) -> rustic_core::error::RusticResult<(rustic_core::commands::repair::snapshots::Changed, rustic_core::id::Id)>
impl core::default::Default for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::default() -> Self
impl core::fmt::Debug for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
impl core::marker::Sync for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
impl core::marker::Unpin for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
impl<T, U> core::convert::Into<U> for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions where U: core::convert::From<T>
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions where U: core::convert::Into<T>
pub type rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions where T: core::marker::Sized
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions where T: core::marker::Sized
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
pub type rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::Init = T
pub const rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
pub type rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::vzip(self) -> V
pub mod rustic_core::commands::repoinfo
pub struct rustic_core::commands::repoinfo::BlobInfo
pub rustic_core::commands::repoinfo::BlobInfo::blob_type: rustic_core::blob::BlobType
pub rustic_core::commands::repoinfo::BlobInfo::count: u64
pub rustic_core::commands::repoinfo::BlobInfo::data_size: u64
pub rustic_core::commands::repoinfo::BlobInfo::size: u64
impl rustic_core::commands::repoinfo::BlobInfo
pub fn rustic_core::commands::repoinfo::BlobInfo::add(&mut self, ie: rustic_core::index::IndexEntry)
impl core::clone::Clone for rustic_core::commands::repoinfo::BlobInfo
pub fn rustic_core::commands::repoinfo::BlobInfo::clone(&self) -> rustic_core::commands::repoinfo::BlobInfo
impl core::fmt::Debug for rustic_core::commands::repoinfo::BlobInfo
pub fn rustic_core::commands::repoinfo::BlobInfo::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::repoinfo::BlobInfo
impl serde::ser::Serialize for rustic_core::commands::repoinfo::BlobInfo
pub fn rustic_core::commands::repoinfo::BlobInfo::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::commands::repoinfo::BlobInfo
pub fn rustic_core::commands::repoinfo::BlobInfo::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::commands::repoinfo::BlobInfo
impl core::marker::Sync for rustic_core::commands::repoinfo::BlobInfo
impl core::marker::Unpin for rustic_core::commands::repoinfo::BlobInfo
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::repoinfo::BlobInfo
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::repoinfo::BlobInfo
impl<T, U> core::convert::Into<U> for rustic_core::commands::repoinfo::BlobInfo where U: core::convert::From<T>
pub fn rustic_core::commands::repoinfo::BlobInfo::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::repoinfo::BlobInfo where U: core::convert::Into<T>
pub type rustic_core::commands::repoinfo::BlobInfo::Error = core::convert::Infallible
pub fn rustic_core::commands::repoinfo::BlobInfo::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::repoinfo::BlobInfo where U: core::convert::TryFrom<T>
pub type rustic_core::commands::repoinfo::BlobInfo::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::repoinfo::BlobInfo::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::repoinfo::BlobInfo where T: core::clone::Clone
pub type rustic_core::commands::repoinfo::BlobInfo::Owned = T
pub fn rustic_core::commands::repoinfo::BlobInfo::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::repoinfo::BlobInfo::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::repoinfo::BlobInfo where T: 'static + core::marker::Sized
pub fn rustic_core::commands::repoinfo::BlobInfo::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::repoinfo::BlobInfo where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::BlobInfo::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::repoinfo::BlobInfo where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::BlobInfo::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::repoinfo::BlobInfo
pub fn rustic_core::commands::repoinfo::BlobInfo::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::repoinfo::BlobInfo
pub type rustic_core::commands::repoinfo::BlobInfo::Init = T
pub const rustic_core::commands::repoinfo::BlobInfo::ALIGN: usize
pub unsafe fn rustic_core::commands::repoinfo::BlobInfo::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::repoinfo::BlobInfo::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::repoinfo::BlobInfo::drop(ptr: usize)
pub unsafe fn rustic_core::commands::repoinfo::BlobInfo::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::commands::repoinfo::BlobInfo where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::commands::repoinfo::BlobInfo
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::repoinfo::BlobInfo
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::repoinfo::BlobInfo
pub type rustic_core::commands::repoinfo::BlobInfo::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::repoinfo::BlobInfo where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::repoinfo::BlobInfo::vzip(self) -> V
pub struct rustic_core::commands::repoinfo::IndexInfos
pub rustic_core::commands::repoinfo::IndexInfos::blobs: alloc::vec::Vec<rustic_core::commands::repoinfo::BlobInfo>
pub rustic_core::commands::repoinfo::IndexInfos::blobs_delete: alloc::vec::Vec<rustic_core::commands::repoinfo::BlobInfo>
pub rustic_core::commands::repoinfo::IndexInfos::packs: alloc::vec::Vec<rustic_core::commands::repoinfo::PackInfo>
pub rustic_core::commands::repoinfo::IndexInfos::packs_delete: alloc::vec::Vec<rustic_core::commands::repoinfo::PackInfo>
impl core::clone::Clone for rustic_core::commands::repoinfo::IndexInfos
pub fn rustic_core::commands::repoinfo::IndexInfos::clone(&self) -> rustic_core::commands::repoinfo::IndexInfos
impl core::default::Default for rustic_core::commands::repoinfo::IndexInfos
pub fn rustic_core::commands::repoinfo::IndexInfos::default() -> rustic_core::commands::repoinfo::IndexInfos
impl core::fmt::Debug for rustic_core::commands::repoinfo::IndexInfos
pub fn rustic_core::commands::repoinfo::IndexInfos::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::commands::repoinfo::IndexInfos
pub fn rustic_core::commands::repoinfo::IndexInfos::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::commands::repoinfo::IndexInfos
pub fn rustic_core::commands::repoinfo::IndexInfos::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::commands::repoinfo::IndexInfos
impl core::marker::Sync for rustic_core::commands::repoinfo::IndexInfos
impl core::marker::Unpin for rustic_core::commands::repoinfo::IndexInfos
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::repoinfo::IndexInfos
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::repoinfo::IndexInfos
impl<T, U> core::convert::Into<U> for rustic_core::commands::repoinfo::IndexInfos where U: core::convert::From<T>
pub fn rustic_core::commands::repoinfo::IndexInfos::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::repoinfo::IndexInfos where U: core::convert::Into<T>
pub type rustic_core::commands::repoinfo::IndexInfos::Error = core::convert::Infallible
pub fn rustic_core::commands::repoinfo::IndexInfos::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::repoinfo::IndexInfos where U: core::convert::TryFrom<T>
pub type rustic_core::commands::repoinfo::IndexInfos::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::repoinfo::IndexInfos::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::repoinfo::IndexInfos where T: core::clone::Clone
pub type rustic_core::commands::repoinfo::IndexInfos::Owned = T
pub fn rustic_core::commands::repoinfo::IndexInfos::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::repoinfo::IndexInfos::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::repoinfo::IndexInfos where T: 'static + core::marker::Sized
pub fn rustic_core::commands::repoinfo::IndexInfos::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::repoinfo::IndexInfos where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::IndexInfos::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::repoinfo::IndexInfos where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::IndexInfos::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::repoinfo::IndexInfos
pub fn rustic_core::commands::repoinfo::IndexInfos::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::repoinfo::IndexInfos
pub type rustic_core::commands::repoinfo::IndexInfos::Init = T
pub const rustic_core::commands::repoinfo::IndexInfos::ALIGN: usize
pub unsafe fn rustic_core::commands::repoinfo::IndexInfos::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::repoinfo::IndexInfos::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::repoinfo::IndexInfos::drop(ptr: usize)
pub unsafe fn rustic_core::commands::repoinfo::IndexInfos::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::commands::repoinfo::IndexInfos where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::commands::repoinfo::IndexInfos
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::repoinfo::IndexInfos
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::repoinfo::IndexInfos
pub type rustic_core::commands::repoinfo::IndexInfos::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::repoinfo::IndexInfos where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::repoinfo::IndexInfos::vzip(self) -> V
pub struct rustic_core::commands::repoinfo::PackInfo
pub rustic_core::commands::repoinfo::PackInfo::blob_type: rustic_core::blob::BlobType
pub rustic_core::commands::repoinfo::PackInfo::count: u64
pub rustic_core::commands::repoinfo::PackInfo::max_size: core::option::Option<u64>
pub rustic_core::commands::repoinfo::PackInfo::min_size: core::option::Option<u64>
impl rustic_core::commands::repoinfo::PackInfo
pub fn rustic_core::commands::repoinfo::PackInfo::add(&mut self, ip: &rustic_core::repofile::indexfile::IndexPack)
impl core::clone::Clone for rustic_core::commands::repoinfo::PackInfo
pub fn rustic_core::commands::repoinfo::PackInfo::clone(&self) -> rustic_core::commands::repoinfo::PackInfo
impl core::fmt::Debug for rustic_core::commands::repoinfo::PackInfo
pub fn rustic_core::commands::repoinfo::PackInfo::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::repoinfo::PackInfo
impl serde::ser::Serialize for rustic_core::commands::repoinfo::PackInfo
pub fn rustic_core::commands::repoinfo::PackInfo::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::commands::repoinfo::PackInfo
pub fn rustic_core::commands::repoinfo::PackInfo::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::commands::repoinfo::PackInfo
impl core::marker::Sync for rustic_core::commands::repoinfo::PackInfo
impl core::marker::Unpin for rustic_core::commands::repoinfo::PackInfo
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::repoinfo::PackInfo
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::repoinfo::PackInfo
impl<T, U> core::convert::Into<U> for rustic_core::commands::repoinfo::PackInfo where U: core::convert::From<T>
pub fn rustic_core::commands::repoinfo::PackInfo::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::repoinfo::PackInfo where U: core::convert::Into<T>
pub type rustic_core::commands::repoinfo::PackInfo::Error = core::convert::Infallible
pub fn rustic_core::commands::repoinfo::PackInfo::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::repoinfo::PackInfo where U: core::convert::TryFrom<T>
pub type rustic_core::commands::repoinfo::PackInfo::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::repoinfo::PackInfo::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::repoinfo::PackInfo where T: core::clone::Clone
pub type rustic_core::commands::repoinfo::PackInfo::Owned = T
pub fn rustic_core::commands::repoinfo::PackInfo::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::repoinfo::PackInfo::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::repoinfo::PackInfo where T: 'static + core::marker::Sized
pub fn rustic_core::commands::repoinfo::PackInfo::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::repoinfo::PackInfo where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::PackInfo::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::repoinfo::PackInfo where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::PackInfo::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::repoinfo::PackInfo
pub fn rustic_core::commands::repoinfo::PackInfo::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::repoinfo::PackInfo
pub type rustic_core::commands::repoinfo::PackInfo::Init = T
pub const rustic_core::commands::repoinfo::PackInfo::ALIGN: usize
pub unsafe fn rustic_core::commands::repoinfo::PackInfo::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::repoinfo::PackInfo::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::repoinfo::PackInfo::drop(ptr: usize)
pub unsafe fn rustic_core::commands::repoinfo::PackInfo::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::commands::repoinfo::PackInfo where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::commands::repoinfo::PackInfo
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::repoinfo::PackInfo
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::repoinfo::PackInfo
pub type rustic_core::commands::repoinfo::PackInfo::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::repoinfo::PackInfo where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::repoinfo::PackInfo::vzip(self) -> V
pub struct rustic_core::commands::repoinfo::RepoFileInfo
pub rustic_core::commands::repoinfo::RepoFileInfo::count: u64
pub rustic_core::commands::repoinfo::RepoFileInfo::size: u64
pub rustic_core::commands::repoinfo::RepoFileInfo::tpe: rustic_core::backend::FileType
impl core::clone::Clone for rustic_core::commands::repoinfo::RepoFileInfo
pub fn rustic_core::commands::repoinfo::RepoFileInfo::clone(&self) -> rustic_core::commands::repoinfo::RepoFileInfo
impl core::fmt::Debug for rustic_core::commands::repoinfo::RepoFileInfo
pub fn rustic_core::commands::repoinfo::RepoFileInfo::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::repoinfo::RepoFileInfo
impl serde::ser::Serialize for rustic_core::commands::repoinfo::RepoFileInfo
pub fn rustic_core::commands::repoinfo::RepoFileInfo::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::commands::repoinfo::RepoFileInfo
pub fn rustic_core::commands::repoinfo::RepoFileInfo::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::commands::repoinfo::RepoFileInfo
impl core::marker::Sync for rustic_core::commands::repoinfo::RepoFileInfo
impl core::marker::Unpin for rustic_core::commands::repoinfo::RepoFileInfo
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::repoinfo::RepoFileInfo
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::repoinfo::RepoFileInfo
impl<T, U> core::convert::Into<U> for rustic_core::commands::repoinfo::RepoFileInfo where U: core::convert::From<T>
pub fn rustic_core::commands::repoinfo::RepoFileInfo::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::repoinfo::RepoFileInfo where U: core::convert::Into<T>
pub type rustic_core::commands::repoinfo::RepoFileInfo::Error = core::convert::Infallible
pub fn rustic_core::commands::repoinfo::RepoFileInfo::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::repoinfo::RepoFileInfo where U: core::convert::TryFrom<T>
pub type rustic_core::commands::repoinfo::RepoFileInfo::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::repoinfo::RepoFileInfo::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::repoinfo::RepoFileInfo where T: core::clone::Clone
pub type rustic_core::commands::repoinfo::RepoFileInfo::Owned = T
pub fn rustic_core::commands::repoinfo::RepoFileInfo::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::repoinfo::RepoFileInfo::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::repoinfo::RepoFileInfo where T: 'static + core::marker::Sized
pub fn rustic_core::commands::repoinfo::RepoFileInfo::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::repoinfo::RepoFileInfo where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::RepoFileInfo::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::repoinfo::RepoFileInfo where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::RepoFileInfo::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::repoinfo::RepoFileInfo
pub fn rustic_core::commands::repoinfo::RepoFileInfo::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::repoinfo::RepoFileInfo
pub type rustic_core::commands::repoinfo::RepoFileInfo::Init = T
pub const rustic_core::commands::repoinfo::RepoFileInfo::ALIGN: usize
pub unsafe fn rustic_core::commands::repoinfo::RepoFileInfo::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::repoinfo::RepoFileInfo::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::repoinfo::RepoFileInfo::drop(ptr: usize)
pub unsafe fn rustic_core::commands::repoinfo::RepoFileInfo::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::commands::repoinfo::RepoFileInfo where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::commands::repoinfo::RepoFileInfo
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::repoinfo::RepoFileInfo
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::repoinfo::RepoFileInfo
pub type rustic_core::commands::repoinfo::RepoFileInfo::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::repoinfo::RepoFileInfo where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::repoinfo::RepoFileInfo::vzip(self) -> V
pub struct rustic_core::commands::repoinfo::RepoFileInfos
pub rustic_core::commands::repoinfo::RepoFileInfos::repo: alloc::vec::Vec<rustic_core::commands::repoinfo::RepoFileInfo>
pub rustic_core::commands::repoinfo::RepoFileInfos::repo_hot: core::option::Option<alloc::vec::Vec<rustic_core::commands::repoinfo::RepoFileInfo>>
impl core::clone::Clone for rustic_core::commands::repoinfo::RepoFileInfos
pub fn rustic_core::commands::repoinfo::RepoFileInfos::clone(&self) -> rustic_core::commands::repoinfo::RepoFileInfos
impl core::default::Default for rustic_core::commands::repoinfo::RepoFileInfos
pub fn rustic_core::commands::repoinfo::RepoFileInfos::default() -> rustic_core::commands::repoinfo::RepoFileInfos
impl core::fmt::Debug for rustic_core::commands::repoinfo::RepoFileInfos
pub fn rustic_core::commands::repoinfo::RepoFileInfos::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::commands::repoinfo::RepoFileInfos
pub fn rustic_core::commands::repoinfo::RepoFileInfos::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::commands::repoinfo::RepoFileInfos
pub fn rustic_core::commands::repoinfo::RepoFileInfos::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::commands::repoinfo::RepoFileInfos
impl core::marker::Sync for rustic_core::commands::repoinfo::RepoFileInfos
impl core::marker::Unpin for rustic_core::commands::repoinfo::RepoFileInfos
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::repoinfo::RepoFileInfos
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::repoinfo::RepoFileInfos
impl<T, U> core::convert::Into<U> for rustic_core::commands::repoinfo::RepoFileInfos where U: core::convert::From<T>
pub fn rustic_core::commands::repoinfo::RepoFileInfos::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::repoinfo::RepoFileInfos where U: core::convert::Into<T>
pub type rustic_core::commands::repoinfo::RepoFileInfos::Error = core::convert::Infallible
pub fn rustic_core::commands::repoinfo::RepoFileInfos::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::repoinfo::RepoFileInfos where U: core::convert::TryFrom<T>
pub type rustic_core::commands::repoinfo::RepoFileInfos::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::repoinfo::RepoFileInfos::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::repoinfo::RepoFileInfos where T: core::clone::Clone
pub type rustic_core::commands::repoinfo::RepoFileInfos::Owned = T
pub fn rustic_core::commands::repoinfo::RepoFileInfos::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::repoinfo::RepoFileInfos::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::repoinfo::RepoFileInfos where T: 'static + core::marker::Sized
pub fn rustic_core::commands::repoinfo::RepoFileInfos::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::repoinfo::RepoFileInfos where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::RepoFileInfos::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::repoinfo::RepoFileInfos where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::RepoFileInfos::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::repoinfo::RepoFileInfos
pub fn rustic_core::commands::repoinfo::RepoFileInfos::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::repoinfo::RepoFileInfos
pub type rustic_core::commands::repoinfo::RepoFileInfos::Init = T
pub const rustic_core::commands::repoinfo::RepoFileInfos::ALIGN: usize
pub unsafe fn rustic_core::commands::repoinfo::RepoFileInfos::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::repoinfo::RepoFileInfos::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::repoinfo::RepoFileInfos::drop(ptr: usize)
pub unsafe fn rustic_core::commands::repoinfo::RepoFileInfos::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::commands::repoinfo::RepoFileInfos where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::commands::repoinfo::RepoFileInfos
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::repoinfo::RepoFileInfos
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::repoinfo::RepoFileInfos
pub type rustic_core::commands::repoinfo::RepoFileInfos::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::repoinfo::RepoFileInfos where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::repoinfo::RepoFileInfos::vzip(self) -> V
pub fn rustic_core::commands::repoinfo::collect_file_info(be: &impl rustic_core::backend::ReadBackend) -> rustic_core::error::RusticResult<alloc::vec::Vec<rustic_core::commands::repoinfo::RepoFileInfo>>
pub fn rustic_core::commands::repoinfo::collect_file_infos<P: rustic_core::progress::ProgressBars, S>(repo: &rustic_core::repository::Repository<P, S>) -> rustic_core::error::RusticResult<rustic_core::commands::repoinfo::RepoFileInfos>
pub fn rustic_core::commands::repoinfo::collect_index_infos<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::Open>(repo: &rustic_core::repository::Repository<P, S>) -> rustic_core::error::RusticResult<rustic_core::commands::repoinfo::IndexInfos>
pub mod rustic_core::commands::restore
pub mod rustic_core::commands::restore::constants
pub const rustic_core::commands::restore::constants::MAX_READER_THREADS_NUM: usize = 20usize
pub enum rustic_core::commands::restore::AddFileResult
pub rustic_core::commands::restore::AddFileResult::Existing
pub rustic_core::commands::restore::AddFileResult::Modify
pub rustic_core::commands::restore::AddFileResult::Verified
impl core::marker::Send for rustic_core::commands::restore::AddFileResult
impl core::marker::Sync for rustic_core::commands::restore::AddFileResult
impl core::marker::Unpin for rustic_core::commands::restore::AddFileResult
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::restore::AddFileResult
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::restore::AddFileResult
impl<T, U> core::convert::Into<U> for rustic_core::commands::restore::AddFileResult where U: core::convert::From<T>
pub fn rustic_core::commands::restore::AddFileResult::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::restore::AddFileResult where U: core::convert::Into<T>
pub type rustic_core::commands::restore::AddFileResult::Error = core::convert::Infallible
pub fn rustic_core::commands::restore::AddFileResult::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::restore::AddFileResult where U: core::convert::TryFrom<T>
pub type rustic_core::commands::restore::AddFileResult::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::restore::AddFileResult::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::restore::AddFileResult where T: 'static + core::marker::Sized
pub fn rustic_core::commands::restore::AddFileResult::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::restore::AddFileResult where T: core::marker::Sized
pub fn rustic_core::commands::restore::AddFileResult::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::restore::AddFileResult where T: core::marker::Sized
pub fn rustic_core::commands::restore::AddFileResult::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::restore::AddFileResult
pub fn rustic_core::commands::restore::AddFileResult::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::restore::AddFileResult
pub type rustic_core::commands::restore::AddFileResult::Init = T
pub const rustic_core::commands::restore::AddFileResult::ALIGN: usize
pub unsafe fn rustic_core::commands::restore::AddFileResult::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::restore::AddFileResult::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::restore::AddFileResult::drop(ptr: usize)
pub unsafe fn rustic_core::commands::restore::AddFileResult::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::restore::AddFileResult
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::restore::AddFileResult
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::restore::AddFileResult
pub type rustic_core::commands::restore::AddFileResult::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::restore::AddFileResult where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::restore::AddFileResult::vzip(self) -> V
pub struct rustic_core::commands::restore::BlobLocation
pub rustic_core::commands::restore::BlobLocation::length: u32
pub rustic_core::commands::restore::BlobLocation::offset: u32
pub rustic_core::commands::restore::BlobLocation::uncompressed_length: core::option::Option<core::num::nonzero::NonZeroU32>
impl rustic_core::commands::restore::BlobLocation
pub fn rustic_core::commands::restore::BlobLocation::data_length(&self) -> u64
impl core::clone::Clone for rustic_core::commands::restore::BlobLocation
pub fn rustic_core::commands::restore::BlobLocation::clone(&self) -> rustic_core::commands::restore::BlobLocation
impl core::cmp::Eq for rustic_core::commands::restore::BlobLocation
impl core::cmp::Ord for rustic_core::commands::restore::BlobLocation
pub fn rustic_core::commands::restore::BlobLocation::cmp(&self, other: &rustic_core::commands::restore::BlobLocation) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::commands::restore::BlobLocation> for rustic_core::commands::restore::BlobLocation
pub fn rustic_core::commands::restore::BlobLocation::eq(&self, other: &rustic_core::commands::restore::BlobLocation) -> bool
impl core::cmp::PartialOrd<rustic_core::commands::restore::BlobLocation> for rustic_core::commands::restore::BlobLocation
pub fn rustic_core::commands::restore::BlobLocation::partial_cmp(&self, other: &rustic_core::commands::restore::BlobLocation) -> core::option::Option<core::cmp::Ordering>
impl core::fmt::Debug for rustic_core::commands::restore::BlobLocation
pub fn rustic_core::commands::restore::BlobLocation::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::commands::restore::BlobLocation
impl core::marker::StructuralPartialEq for rustic_core::commands::restore::BlobLocation
impl core::marker::Send for rustic_core::commands::restore::BlobLocation
impl core::marker::Sync for rustic_core::commands::restore::BlobLocation
impl core::marker::Unpin for rustic_core::commands::restore::BlobLocation
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::restore::BlobLocation
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::restore::BlobLocation
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::commands::restore::BlobLocation where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::commands::restore::BlobLocation::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::commands::restore::BlobLocation where U: core::convert::From<T>
pub fn rustic_core::commands::restore::BlobLocation::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::restore::BlobLocation where U: core::convert::Into<T>
pub type rustic_core::commands::restore::BlobLocation::Error = core::convert::Infallible
pub fn rustic_core::commands::restore::BlobLocation::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::restore::BlobLocation where U: core::convert::TryFrom<T>
pub type rustic_core::commands::restore::BlobLocation::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::restore::BlobLocation::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::restore::BlobLocation where T: core::clone::Clone
pub type rustic_core::commands::restore::BlobLocation::Owned = T
pub fn rustic_core::commands::restore::BlobLocation::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::restore::BlobLocation::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::restore::BlobLocation where T: 'static + core::marker::Sized
pub fn rustic_core::commands::restore::BlobLocation::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::restore::BlobLocation where T: core::marker::Sized
pub fn rustic_core::commands::restore::BlobLocation::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::restore::BlobLocation where T: core::marker::Sized
pub fn rustic_core::commands::restore::BlobLocation::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::restore::BlobLocation
pub fn rustic_core::commands::restore::BlobLocation::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::restore::BlobLocation
pub type rustic_core::commands::restore::BlobLocation::Init = T
pub const rustic_core::commands::restore::BlobLocation::ALIGN: usize
pub unsafe fn rustic_core::commands::restore::BlobLocation::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::restore::BlobLocation::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::restore::BlobLocation::drop(ptr: usize)
pub unsafe fn rustic_core::commands::restore::BlobLocation::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::restore::BlobLocation
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::restore::BlobLocation
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::restore::BlobLocation
pub type rustic_core::commands::restore::BlobLocation::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::restore::BlobLocation where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::restore::BlobLocation::vzip(self) -> V
pub struct rustic_core::commands::restore::FileDirStats
pub rustic_core::commands::restore::FileDirStats::additional: u64
pub rustic_core::commands::restore::FileDirStats::modify: u64
pub rustic_core::commands::restore::FileDirStats::restore: u64
pub rustic_core::commands::restore::FileDirStats::unchanged: u64
pub rustic_core::commands::restore::FileDirStats::verified: u64
impl core::clone::Clone for rustic_core::commands::restore::FileDirStats
pub fn rustic_core::commands::restore::FileDirStats::clone(&self) -> rustic_core::commands::restore::FileDirStats
impl core::default::Default for rustic_core::commands::restore::FileDirStats
pub fn rustic_core::commands::restore::FileDirStats::default() -> rustic_core::commands::restore::FileDirStats
impl core::fmt::Debug for rustic_core::commands::restore::FileDirStats
pub fn rustic_core::commands::restore::FileDirStats::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::restore::FileDirStats
impl core::marker::Send for rustic_core::commands::restore::FileDirStats
impl core::marker::Sync for rustic_core::commands::restore::FileDirStats
impl core::marker::Unpin for rustic_core::commands::restore::FileDirStats
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::restore::FileDirStats
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::restore::FileDirStats
impl<T, U> core::convert::Into<U> for rustic_core::commands::restore::FileDirStats where U: core::convert::From<T>
pub fn rustic_core::commands::restore::FileDirStats::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::restore::FileDirStats where U: core::convert::Into<T>
pub type rustic_core::commands::restore::FileDirStats::Error = core::convert::Infallible
pub fn rustic_core::commands::restore::FileDirStats::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::restore::FileDirStats where U: core::convert::TryFrom<T>
pub type rustic_core::commands::restore::FileDirStats::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::restore::FileDirStats::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::restore::FileDirStats where T: core::clone::Clone
pub type rustic_core::commands::restore::FileDirStats::Owned = T
pub fn rustic_core::commands::restore::FileDirStats::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::restore::FileDirStats::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::restore::FileDirStats where T: 'static + core::marker::Sized
pub fn rustic_core::commands::restore::FileDirStats::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::restore::FileDirStats where T: core::marker::Sized
pub fn rustic_core::commands::restore::FileDirStats::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::restore::FileDirStats where T: core::marker::Sized
pub fn rustic_core::commands::restore::FileDirStats::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::restore::FileDirStats
pub fn rustic_core::commands::restore::FileDirStats::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::restore::FileDirStats
pub type rustic_core::commands::restore::FileDirStats::Init = T
pub const rustic_core::commands::restore::FileDirStats::ALIGN: usize
pub unsafe fn rustic_core::commands::restore::FileDirStats::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::restore::FileDirStats::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::restore::FileDirStats::drop(ptr: usize)
pub unsafe fn rustic_core::commands::restore::FileDirStats::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::restore::FileDirStats
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::restore::FileDirStats
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::restore::FileDirStats
pub type rustic_core::commands::restore::FileDirStats::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::restore::FileDirStats where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::restore::FileDirStats::vzip(self) -> V
pub struct rustic_core::commands::restore::FileLocation
pub rustic_core::commands::restore::FileLocation::file_idx: usize
pub rustic_core::commands::restore::FileLocation::file_start: u64
pub rustic_core::commands::restore::FileLocation::matches: bool
impl core::fmt::Debug for rustic_core::commands::restore::FileLocation
pub fn rustic_core::commands::restore::FileLocation::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::commands::restore::FileLocation
impl core::marker::Sync for rustic_core::commands::restore::FileLocation
impl core::marker::Unpin for rustic_core::commands::restore::FileLocation
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::restore::FileLocation
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::restore::FileLocation
impl<T, U> core::convert::Into<U> for rustic_core::commands::restore::FileLocation where U: core::convert::From<T>
pub fn rustic_core::commands::restore::FileLocation::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::restore::FileLocation where U: core::convert::Into<T>
pub type rustic_core::commands::restore::FileLocation::Error = core::convert::Infallible
pub fn rustic_core::commands::restore::FileLocation::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::restore::FileLocation where U: core::convert::TryFrom<T>
pub type rustic_core::commands::restore::FileLocation::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::restore::FileLocation::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::restore::FileLocation where T: 'static + core::marker::Sized
pub fn rustic_core::commands::restore::FileLocation::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::restore::FileLocation where T: core::marker::Sized
pub fn rustic_core::commands::restore::FileLocation::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::restore::FileLocation where T: core::marker::Sized
pub fn rustic_core::commands::restore::FileLocation::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::restore::FileLocation
pub fn rustic_core::commands::restore::FileLocation::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::restore::FileLocation
pub type rustic_core::commands::restore::FileLocation::Init = T
pub const rustic_core::commands::restore::FileLocation::ALIGN: usize
pub unsafe fn rustic_core::commands::restore::FileLocation::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::restore::FileLocation::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::restore::FileLocation::drop(ptr: usize)
pub unsafe fn rustic_core::commands::restore::FileLocation::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::restore::FileLocation
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::restore::FileLocation
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::restore::FileLocation
pub type rustic_core::commands::restore::FileLocation::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::restore::FileLocation where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::restore::FileLocation::vzip(self) -> V
pub struct rustic_core::commands::restore::RestoreOptions
pub rustic_core::commands::restore::RestoreOptions::delete: bool
pub rustic_core::commands::restore::RestoreOptions::no_ownership: bool
pub rustic_core::commands::restore::RestoreOptions::numeric_id: bool
pub rustic_core::commands::restore::RestoreOptions::verify_existing: bool
impl rustic_core::commands::restore::RestoreOptions
pub fn rustic_core::commands::restore::RestoreOptions::collect_and_prepare<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedFull>(self, repo: &rustic_core::repository::Repository<P, S>, node_streamer: impl core::iter::traits::iterator::Iterator<Item = rustic_core::error::RusticResult<(std::path::PathBuf, rustic_core::backend::node::Node)>>, dest: &rustic_core::backend::local::LocalDestination, dry_run: bool) -> rustic_core::error::RusticResult<rustic_core::commands::restore::RestorePlan>
pub fn rustic_core::commands::restore::RestoreOptions::restore<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedTree>(self, file_infos: rustic_core::commands::restore::RestorePlan, repo: &rustic_core::repository::Repository<P, S>, node_streamer: impl core::iter::traits::iterator::Iterator<Item = rustic_core::error::RusticResult<(std::path::PathBuf, rustic_core::backend::node::Node)>>, dest: &rustic_core::backend::local::LocalDestination) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::restore::RestoreOptions::restore_metadata(self, node_streamer: impl core::iter::traits::iterator::Iterator<Item = rustic_core::error::RusticResult<(std::path::PathBuf, rustic_core::backend::node::Node)>>, dest: &rustic_core::backend::local::LocalDestination) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::restore::RestoreOptions::set_metadata(self, dest: &rustic_core::backend::local::LocalDestination, path: &std::path::PathBuf, node: &rustic_core::backend::node::Node)
impl rustic_core::commands::restore::RestoreOptions
pub fn rustic_core::commands::restore::RestoreOptions::delete(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::restore::RestoreOptions::no_ownership(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::restore::RestoreOptions::numeric_id(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::restore::RestoreOptions::verify_existing(self, value: impl core::convert::Into<bool>) -> Self
impl core::clone::Clone for rustic_core::commands::restore::RestoreOptions
pub fn rustic_core::commands::restore::RestoreOptions::clone(&self) -> rustic_core::commands::restore::RestoreOptions
impl core::default::Default for rustic_core::commands::restore::RestoreOptions
pub fn rustic_core::commands::restore::RestoreOptions::default() -> rustic_core::commands::restore::RestoreOptions
impl core::fmt::Debug for rustic_core::commands::restore::RestoreOptions
pub fn rustic_core::commands::restore::RestoreOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::restore::RestoreOptions
impl core::marker::Send for rustic_core::commands::restore::RestoreOptions
impl core::marker::Sync for rustic_core::commands::restore::RestoreOptions
impl core::marker::Unpin for rustic_core::commands::restore::RestoreOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::restore::RestoreOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::restore::RestoreOptions
impl<T, U> core::convert::Into<U> for rustic_core::commands::restore::RestoreOptions where U: core::convert::From<T>
pub fn rustic_core::commands::restore::RestoreOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::restore::RestoreOptions where U: core::convert::Into<T>
pub type rustic_core::commands::restore::RestoreOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::restore::RestoreOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::restore::RestoreOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::restore::RestoreOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::restore::RestoreOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::restore::RestoreOptions where T: core::clone::Clone
pub type rustic_core::commands::restore::RestoreOptions::Owned = T
pub fn rustic_core::commands::restore::RestoreOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::restore::RestoreOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::restore::RestoreOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::restore::RestoreOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::restore::RestoreOptions where T: core::marker::Sized
pub fn rustic_core::commands::restore::RestoreOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::restore::RestoreOptions where T: core::marker::Sized
pub fn rustic_core::commands::restore::RestoreOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::restore::RestoreOptions
pub fn rustic_core::commands::restore::RestoreOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::restore::RestoreOptions
pub type rustic_core::commands::restore::RestoreOptions::Init = T
pub const rustic_core::commands::restore::RestoreOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::restore::RestoreOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::restore::RestoreOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::restore::RestoreOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::restore::RestoreOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::restore::RestoreOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::restore::RestoreOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::restore::RestoreOptions
pub type rustic_core::commands::restore::RestoreOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::restore::RestoreOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::restore::RestoreOptions::vzip(self) -> V
pub struct rustic_core::commands::restore::RestorePlan
pub rustic_core::commands::restore::RestorePlan::file_lengths: alloc::vec::Vec<u64>
pub rustic_core::commands::restore::RestorePlan::matched_size: u64
pub rustic_core::commands::restore::RestorePlan::names: alloc::vec::Vec<std::path::PathBuf>
pub rustic_core::commands::restore::RestorePlan::r: alloc::collections::btree::map::BTreeMap<(rustic_core::id::Id, rustic_core::commands::restore::BlobLocation), alloc::vec::Vec<rustic_core::commands::restore::FileLocation>>
pub rustic_core::commands::restore::RestorePlan::restore_size: u64
pub rustic_core::commands::restore::RestorePlan::stats: rustic_core::commands::restore::RestoreStats
impl rustic_core::commands::restore::RestorePlan
pub fn rustic_core::commands::restore::RestorePlan::add_file<P, S: rustic_core::repository::IndexedFull>(&mut self, dest: &rustic_core::backend::local::LocalDestination, file: &rustic_core::backend::node::Node, name: std::path::PathBuf, repo: &rustic_core::repository::Repository<P, S>, ignore_mtime: bool) -> rustic_core::error::RusticResult<rustic_core::commands::restore::AddFileResult>
pub fn rustic_core::commands::restore::RestorePlan::to_packs(&self) -> alloc::vec::Vec<rustic_core::id::Id>
impl core::default::Default for rustic_core::commands::restore::RestorePlan
pub fn rustic_core::commands::restore::RestorePlan::default() -> rustic_core::commands::restore::RestorePlan
impl core::fmt::Debug for rustic_core::commands::restore::RestorePlan
pub fn rustic_core::commands::restore::RestorePlan::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::commands::restore::RestorePlan
impl core::marker::Sync for rustic_core::commands::restore::RestorePlan
impl core::marker::Unpin for rustic_core::commands::restore::RestorePlan
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::restore::RestorePlan
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::restore::RestorePlan
impl<T, U> core::convert::Into<U> for rustic_core::commands::restore::RestorePlan where U: core::convert::From<T>
pub fn rustic_core::commands::restore::RestorePlan::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::restore::RestorePlan where U: core::convert::Into<T>
pub type rustic_core::commands::restore::RestorePlan::Error = core::convert::Infallible
pub fn rustic_core::commands::restore::RestorePlan::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::restore::RestorePlan where U: core::convert::TryFrom<T>
pub type rustic_core::commands::restore::RestorePlan::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::restore::RestorePlan::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::restore::RestorePlan where T: 'static + core::marker::Sized
pub fn rustic_core::commands::restore::RestorePlan::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::restore::RestorePlan where T: core::marker::Sized
pub fn rustic_core::commands::restore::RestorePlan::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::restore::RestorePlan where T: core::marker::Sized
pub fn rustic_core::commands::restore::RestorePlan::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::restore::RestorePlan
pub fn rustic_core::commands::restore::RestorePlan::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::restore::RestorePlan
pub type rustic_core::commands::restore::RestorePlan::Init = T
pub const rustic_core::commands::restore::RestorePlan::ALIGN: usize
pub unsafe fn rustic_core::commands::restore::RestorePlan::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::restore::RestorePlan::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::restore::RestorePlan::drop(ptr: usize)
pub unsafe fn rustic_core::commands::restore::RestorePlan::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::restore::RestorePlan
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::restore::RestorePlan
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::restore::RestorePlan
pub type rustic_core::commands::restore::RestorePlan::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::restore::RestorePlan where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::restore::RestorePlan::vzip(self) -> V
pub struct rustic_core::commands::restore::RestoreStats
pub rustic_core::commands::restore::RestoreStats::dirs: rustic_core::commands::restore::FileDirStats
pub rustic_core::commands::restore::RestoreStats::files: rustic_core::commands::restore::FileDirStats
impl core::clone::Clone for rustic_core::commands::restore::RestoreStats
pub fn rustic_core::commands::restore::RestoreStats::clone(&self) -> rustic_core::commands::restore::RestoreStats
impl core::default::Default for rustic_core::commands::restore::RestoreStats
pub fn rustic_core::commands::restore::RestoreStats::default() -> rustic_core::commands::restore::RestoreStats
impl core::fmt::Debug for rustic_core::commands::restore::RestoreStats
pub fn rustic_core::commands::restore::RestoreStats::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::restore::RestoreStats
impl core::marker::Send for rustic_core::commands::restore::RestoreStats
impl core::marker::Sync for rustic_core::commands::restore::RestoreStats
impl core::marker::Unpin for rustic_core::commands::restore::RestoreStats
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::restore::RestoreStats
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::restore::RestoreStats
impl<T, U> core::convert::Into<U> for rustic_core::commands::restore::RestoreStats where U: core::convert::From<T>
pub fn rustic_core::commands::restore::RestoreStats::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::restore::RestoreStats where U: core::convert::Into<T>
pub type rustic_core::commands::restore::RestoreStats::Error = core::convert::Infallible
pub fn rustic_core::commands::restore::RestoreStats::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::restore::RestoreStats where U: core::convert::TryFrom<T>
pub type rustic_core::commands::restore::RestoreStats::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::restore::RestoreStats::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::restore::RestoreStats where T: core::clone::Clone
pub type rustic_core::commands::restore::RestoreStats::Owned = T
pub fn rustic_core::commands::restore::RestoreStats::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::restore::RestoreStats::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::restore::RestoreStats where T: 'static + core::marker::Sized
pub fn rustic_core::commands::restore::RestoreStats::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::restore::RestoreStats where T: core::marker::Sized
pub fn rustic_core::commands::restore::RestoreStats::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::restore::RestoreStats where T: core::marker::Sized
pub fn rustic_core::commands::restore::RestoreStats::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::restore::RestoreStats
pub fn rustic_core::commands::restore::RestoreStats::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::restore::RestoreStats
pub type rustic_core::commands::restore::RestoreStats::Init = T
pub const rustic_core::commands::restore::RestoreStats::ALIGN: usize
pub unsafe fn rustic_core::commands::restore::RestoreStats::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::restore::RestoreStats::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::restore::RestoreStats::drop(ptr: usize)
pub unsafe fn rustic_core::commands::restore::RestoreStats::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::restore::RestoreStats
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::restore::RestoreStats
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::restore::RestoreStats
pub type rustic_core::commands::restore::RestoreStats::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::restore::RestoreStats where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::restore::RestoreStats::vzip(self) -> V
pub fn rustic_core::commands::restore::restore_contents<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::Open>(repo: &rustic_core::repository::Repository<P, S>, dest: &rustic_core::backend::local::LocalDestination, file_infos: rustic_core::commands::restore::RestorePlan) -> rustic_core::error::RusticResult<()>
pub type rustic_core::commands::restore::Filenames = alloc::vec::Vec<std::path::PathBuf>
pub type rustic_core::commands::restore::RestoreInfo = alloc::collections::btree::map::BTreeMap<(rustic_core::id::Id, rustic_core::commands::restore::BlobLocation), alloc::vec::Vec<rustic_core::commands::restore::FileLocation>>
pub mod rustic_core::commands::snapshots
pub fn rustic_core::commands::snapshots::get_snapshot_group<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::Open>(repo: &rustic_core::repository::Repository<P, S>, ids: &[alloc::string::String], group_by: rustic_core::repofile::snapshotfile::SnapshotGroupCriterion, filter: impl core::ops::function::FnMut(&rustic_core::repofile::snapshotfile::SnapshotFile) -> bool) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::repofile::snapshotfile::SnapshotGroup, alloc::vec::Vec<rustic_core::repofile::snapshotfile::SnapshotFile>)>>
pub mod rustic_core::crypto
pub mod rustic_core::crypto::aespoly1305
pub struct rustic_core::crypto::aespoly1305::Key(pub aead::Key<aes256ctr_poly1305aes::Aes256CtrPoly1305Aes>)
impl rustic_core::crypto::aespoly1305::Key
pub fn rustic_core::crypto::aespoly1305::Key::from_keys(encrypt: &[u8], k: &[u8], r: &[u8]) -> Self
pub fn rustic_core::crypto::aespoly1305::Key::from_slice(key: &[u8]) -> Self
pub fn rustic_core::crypto::aespoly1305::Key::new() -> Self
pub fn rustic_core::crypto::aespoly1305::Key::to_keys(self) -> (alloc::vec::Vec<u8>, alloc::vec::Vec<u8>, alloc::vec::Vec<u8>)
impl rustic_core::crypto::CryptoKey for rustic_core::crypto::aespoly1305::Key
pub fn rustic_core::crypto::aespoly1305::Key::decrypt_data(&self, data: &[u8]) -> rustic_core::error::RusticResult<alloc::vec::Vec<u8>>
pub fn rustic_core::crypto::aespoly1305::Key::encrypt_data(&self, data: &[u8]) -> rustic_core::error::RusticResult<alloc::vec::Vec<u8>>
impl core::clone::Clone for rustic_core::crypto::aespoly1305::Key
pub fn rustic_core::crypto::aespoly1305::Key::clone(&self) -> rustic_core::crypto::aespoly1305::Key
impl core::default::Default for rustic_core::crypto::aespoly1305::Key
pub fn rustic_core::crypto::aespoly1305::Key::default() -> rustic_core::crypto::aespoly1305::Key
impl core::fmt::Debug for rustic_core::crypto::aespoly1305::Key
pub fn rustic_core::crypto::aespoly1305::Key::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::crypto::aespoly1305::Key
impl core::marker::Send for rustic_core::crypto::aespoly1305::Key
impl core::marker::Sync for rustic_core::crypto::aespoly1305::Key
impl core::marker::Unpin for rustic_core::crypto::aespoly1305::Key
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::crypto::aespoly1305::Key
impl core::panic::unwind_safe::UnwindSafe for rustic_core::crypto::aespoly1305::Key
impl<T, U> core::convert::Into<U> for rustic_core::crypto::aespoly1305::Key where U: core::convert::From<T>
pub fn rustic_core::crypto::aespoly1305::Key::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::crypto::aespoly1305::Key where U: core::convert::Into<T>
pub type rustic_core::crypto::aespoly1305::Key::Error = core::convert::Infallible
pub fn rustic_core::crypto::aespoly1305::Key::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::crypto::aespoly1305::Key where U: core::convert::TryFrom<T>
pub type rustic_core::crypto::aespoly1305::Key::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::crypto::aespoly1305::Key::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::crypto::aespoly1305::Key where T: core::clone::Clone
pub type rustic_core::crypto::aespoly1305::Key::Owned = T
pub fn rustic_core::crypto::aespoly1305::Key::clone_into(&self, target: &mut T)
pub fn rustic_core::crypto::aespoly1305::Key::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::crypto::aespoly1305::Key where T: 'static + core::marker::Sized
pub fn rustic_core::crypto::aespoly1305::Key::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::crypto::aespoly1305::Key where T: core::marker::Sized
pub fn rustic_core::crypto::aespoly1305::Key::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::crypto::aespoly1305::Key where T: core::marker::Sized
pub fn rustic_core::crypto::aespoly1305::Key::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::crypto::aespoly1305::Key
pub fn rustic_core::crypto::aespoly1305::Key::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::crypto::aespoly1305::Key
pub type rustic_core::crypto::aespoly1305::Key::Init = T
pub const rustic_core::crypto::aespoly1305::Key::ALIGN: usize
pub unsafe fn rustic_core::crypto::aespoly1305::Key::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::crypto::aespoly1305::Key::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::crypto::aespoly1305::Key::drop(ptr: usize)
pub unsafe fn rustic_core::crypto::aespoly1305::Key::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::crypto::aespoly1305::Key
impl<T> tracing::instrument::WithSubscriber for rustic_core::crypto::aespoly1305::Key
impl<T> typenum::type_operators::Same<T> for rustic_core::crypto::aespoly1305::Key
pub type rustic_core::crypto::aespoly1305::Key::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::crypto::aespoly1305::Key where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::crypto::aespoly1305::Key::vzip(self) -> V
pub type rustic_core::crypto::aespoly1305::AeadKey = aead::Key<aes256ctr_poly1305aes::Aes256CtrPoly1305Aes>
pub type rustic_core::crypto::aespoly1305::Nonce = aead::Nonce<aes256ctr_poly1305aes::Aes256CtrPoly1305Aes>
pub mod rustic_core::crypto::hasher
pub fn rustic_core::crypto::hasher::hash(data: &[u8]) -> rustic_core::id::Id
pub trait rustic_core::crypto::CryptoKey: core::clone::Clone + core::marker::Sized + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::crypto::CryptoKey::decrypt_data(&self, data: &[u8]) -> rustic_core::error::RusticResult<alloc::vec::Vec<u8>>
pub fn rustic_core::crypto::CryptoKey::encrypt_data(&self, data: &[u8]) -> rustic_core::error::RusticResult<alloc::vec::Vec<u8>>
impl rustic_core::crypto::CryptoKey for rustic_core::crypto::aespoly1305::Key
pub fn rustic_core::crypto::aespoly1305::Key::decrypt_data(&self, data: &[u8]) -> rustic_core::error::RusticResult<alloc::vec::Vec<u8>>
pub fn rustic_core::crypto::aespoly1305::Key::encrypt_data(&self, data: &[u8]) -> rustic_core::error::RusticResult<alloc::vec::Vec<u8>>
pub mod rustic_core::error
pub enum rustic_core::error::ArchiverErrorKind
pub rustic_core::error::ArchiverErrorKind::ConversionFromU64ToUsizeFailed(core::num::error::TryFromIntError)
pub rustic_core::error::ArchiverErrorKind::CouldNotDetermineSize
pub rustic_core::error::ArchiverErrorKind::CouldNotGetSizeForArchive(rustic_core::error::BackendErrorKind)
pub rustic_core::error::ArchiverErrorKind::FailedToSaveFileInBackend(rustic_core::error::CryptBackendErrorKind)
pub rustic_core::error::ArchiverErrorKind::FinalizingSnapshotSummaryFailed(rustic_core::error::SnapshotFileErrorKind)
pub rustic_core::error::ArchiverErrorKind::FromConfigFile(rustic_core::error::ConfigFileErrorKind)
pub rustic_core::error::ArchiverErrorKind::FromPacker(rustic_core::error::PackerErrorKind)
pub rustic_core::error::ArchiverErrorKind::FromStdIo(std::io::error::Error)
pub rustic_core::error::ArchiverErrorKind::FromStripPrefix(std::path::StripPrefixError)
pub rustic_core::error::ArchiverErrorKind::FromTree(rustic_core::error::TreeErrorKind)
pub rustic_core::error::ArchiverErrorKind::IndexSavingFailed(rustic_core::error::IndexErrorKind)
pub rustic_core::error::ArchiverErrorKind::OpeningFileFailed
pub rustic_core::error::ArchiverErrorKind::TreeStackEmpty
pub rustic_core::error::ArchiverErrorKind::UnpackingTreeTypeOptionalFailed
impl core::convert::From<rustic_core::error::ArchiverErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::ArchiverErrorKind) -> Self
impl core::convert::From<rustic_core::error::BackendErrorKind> for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::from(source: rustic_core::error::BackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::ConfigFileErrorKind> for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::from(source: rustic_core::error::ConfigFileErrorKind) -> Self
impl core::convert::From<rustic_core::error::CryptBackendErrorKind> for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::from(source: rustic_core::error::CryptBackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::IndexErrorKind> for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::from(source: rustic_core::error::IndexErrorKind) -> Self
impl core::convert::From<rustic_core::error::PackerErrorKind> for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::from(source: rustic_core::error::PackerErrorKind) -> Self
impl core::convert::From<rustic_core::error::SnapshotFileErrorKind> for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::from(source: rustic_core::error::SnapshotFileErrorKind) -> Self
impl core::convert::From<rustic_core::error::TreeErrorKind> for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::from(source: rustic_core::error::TreeErrorKind) -> Self
impl core::convert::From<std::io::error::Error> for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::from(source: std::io::error::Error) -> Self
impl core::convert::From<std::path::StripPrefixError> for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::from(source: std::path::StripPrefixError) -> Self
impl core::error::Error for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::ArchiverErrorKind
impl core::fmt::Debug for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::ArchiverErrorKind
impl core::marker::Sync for rustic_core::error::ArchiverErrorKind
impl core::marker::Unpin for rustic_core::error::ArchiverErrorKind
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::ArchiverErrorKind
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::ArchiverErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::ArchiverErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::ArchiverErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::ArchiverErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::ArchiverErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::ArchiverErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::ArchiverErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::ArchiverErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::ArchiverErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::ArchiverErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::ArchiverErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::ArchiverErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::ArchiverErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::ArchiverErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::ArchiverErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::ArchiverErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::ArchiverErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::ArchiverErrorKind where T: core::marker::Sized
pub fn rustic_core::error::ArchiverErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::ArchiverErrorKind where T: core::marker::Sized
pub fn rustic_core::error::ArchiverErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::ArchiverErrorKind
pub type rustic_core::error::ArchiverErrorKind::Init = T
pub const rustic_core::error::ArchiverErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::ArchiverErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::ArchiverErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::ArchiverErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::ArchiverErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::ArchiverErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::ArchiverErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::ArchiverErrorKind
pub type rustic_core::error::ArchiverErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::ArchiverErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::ArchiverErrorKind::vzip(self) -> V
pub enum rustic_core::error::BackendErrorKind
pub rustic_core::error::BackendErrorKind::BackendNotSupported(alloc::string::String)
pub rustic_core::error::BackendErrorKind::BackoffError(backoff::error::Error<reqwest::error::Error>)
pub rustic_core::error::BackendErrorKind::BuildingRestClientFailed(reqwest::error::Error)
pub rustic_core::error::BackendErrorKind::CreatingDataOnBackendFailed
pub rustic_core::error::BackendErrorKind::FromBackendCacheError(rustic_core::error::CacheBackendErrorKind)
pub rustic_core::error::BackendErrorKind::FromBackendDecryptionError(rustic_core::error::CryptBackendErrorKind)
pub rustic_core::error::BackendErrorKind::FromIdError(rustic_core::error::IdErrorKind)
pub rustic_core::error::BackendErrorKind::FromIgnoreError(rustic_core::error::IgnoreErrorKind)
pub rustic_core::error::BackendErrorKind::FromIoError(std::io::error::Error)
pub rustic_core::error::BackendErrorKind::FromLocalError(rustic_core::error::LocalErrorKind)
pub rustic_core::error::BackendErrorKind::FromProviderError(rustic_core::error::ProviderErrorKind)
pub rustic_core::error::BackendErrorKind::FromTryIntError(core::num::error::TryFromIntError)
pub rustic_core::error::BackendErrorKind::FullyReadingFromBackendFailed
pub rustic_core::error::BackendErrorKind::GenericError(ignore::Error)
pub rustic_core::error::BackendErrorKind::IdNotUnique(alloc::string::String)
pub rustic_core::error::BackendErrorKind::ListingFilesOnBackendFailed
pub rustic_core::error::BackendErrorKind::ListingWithSizeFailed
pub rustic_core::error::BackendErrorKind::NoSuitableIdFound(alloc::string::String)
pub rustic_core::error::BackendErrorKind::PartiallyReadingFromBackendDataFailed
pub rustic_core::error::BackendErrorKind::RemovingDataFromBackendFailed
pub rustic_core::error::BackendErrorKind::RestApiError(rustic_core::error::RestErrorKind)
pub rustic_core::error::BackendErrorKind::SettingOptionOnBackendFailed
pub rustic_core::error::BackendErrorKind::UrlParsingFailed(url::parser::ParseError)
pub rustic_core::error::BackendErrorKind::WritingBytesToBackendFailed
impl core::convert::From<backoff::error::Error<reqwest::error::Error>> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: backoff::error::Error<reqwest::error::Error>) -> Self
impl core::convert::From<core::num::error::TryFromIntError> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: core::num::error::TryFromIntError) -> Self
impl core::convert::From<ignore::Error> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: ignore::Error) -> Self
impl core::convert::From<reqwest::error::Error> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: reqwest::error::Error) -> Self
impl core::convert::From<rustic_core::error::BackendErrorKind> for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::from(source: rustic_core::error::BackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::BackendErrorKind> for rustic_core::error::PackFileErrorKind
pub fn rustic_core::error::PackFileErrorKind::from(source: rustic_core::error::BackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::BackendErrorKind> for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::from(source: rustic_core::error::BackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::BackendErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::BackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::CacheBackendErrorKind> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: rustic_core::error::CacheBackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::CryptBackendErrorKind> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: rustic_core::error::CryptBackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::IdErrorKind> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: rustic_core::error::IdErrorKind) -> Self
impl core::convert::From<rustic_core::error::IgnoreErrorKind> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: rustic_core::error::IgnoreErrorKind) -> Self
impl core::convert::From<rustic_core::error::LocalErrorKind> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: rustic_core::error::LocalErrorKind) -> Self
impl core::convert::From<rustic_core::error::ProviderErrorKind> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: rustic_core::error::ProviderErrorKind) -> Self
impl core::convert::From<rustic_core::error::RestErrorKind> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: rustic_core::error::RestErrorKind) -> Self
impl core::convert::From<std::io::error::Error> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: std::io::error::Error) -> Self
impl core::convert::From<url::parser::ParseError> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: url::parser::ParseError) -> Self
impl core::error::Error for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::BackendErrorKind
impl core::fmt::Debug for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::BackendErrorKind
impl core::marker::Sync for rustic_core::error::BackendErrorKind
impl core::marker::Unpin for rustic_core::error::BackendErrorKind
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::BackendErrorKind
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::BackendErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::BackendErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::BackendErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::BackendErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::BackendErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::BackendErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::BackendErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::BackendErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::BackendErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::BackendErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::BackendErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::BackendErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::BackendErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::BackendErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::BackendErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::BackendErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::BackendErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::BackendErrorKind where T: core::marker::Sized
pub fn rustic_core::error::BackendErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::BackendErrorKind where T: core::marker::Sized
pub fn rustic_core::error::BackendErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::BackendErrorKind
pub type rustic_core::error::BackendErrorKind::Init = T
pub const rustic_core::error::BackendErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::BackendErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::BackendErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::BackendErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::BackendErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::BackendErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::BackendErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::BackendErrorKind
pub type rustic_core::error::BackendErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::BackendErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::BackendErrorKind::vzip(self) -> V
pub enum rustic_core::error::CacheBackendErrorKind
pub rustic_core::error::CacheBackendErrorKind::CreatingDataOnCacheBackendFailed
pub rustic_core::error::CacheBackendErrorKind::FromIoError(std::io::error::Error)
pub rustic_core::error::CacheBackendErrorKind::FullyReadingFromCacheBackendFailed
pub rustic_core::error::CacheBackendErrorKind::ListingWithSizeOnCacheBackendFailed
pub rustic_core::error::CacheBackendErrorKind::NoCacheDirectory
pub rustic_core::error::CacheBackendErrorKind::PartiallyReadingFromBackendDataFailed
pub rustic_core::error::CacheBackendErrorKind::RemovingDataOnCacheBackendFailed
pub rustic_core::error::CacheBackendErrorKind::SettingOptionOnCacheBackendFailed
pub rustic_core::error::CacheBackendErrorKind::WritingBytesOnCacheBackendFailed
impl core::convert::From<rustic_core::error::CacheBackendErrorKind> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: rustic_core::error::CacheBackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::CacheBackendErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::CacheBackendErrorKind) -> Self
impl core::convert::From<std::io::error::Error> for rustic_core::error::CacheBackendErrorKind
pub fn rustic_core::error::CacheBackendErrorKind::from(source: std::io::error::Error) -> Self
impl core::error::Error for rustic_core::error::CacheBackendErrorKind
pub fn rustic_core::error::CacheBackendErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::CacheBackendErrorKind
pub fn rustic_core::error::CacheBackendErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::CacheBackendErrorKind
impl core::fmt::Debug for rustic_core::error::CacheBackendErrorKind
pub fn rustic_core::error::CacheBackendErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::CacheBackendErrorKind
impl core::marker::Sync for rustic_core::error::CacheBackendErrorKind
impl core::marker::Unpin for rustic_core::error::CacheBackendErrorKind
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::CacheBackendErrorKind
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::CacheBackendErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::CacheBackendErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::CacheBackendErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::CacheBackendErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::CacheBackendErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::CacheBackendErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::CacheBackendErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::CacheBackendErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::CacheBackendErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::CacheBackendErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::CacheBackendErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::CacheBackendErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::CacheBackendErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::CacheBackendErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::CacheBackendErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::CacheBackendErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::CacheBackendErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::CacheBackendErrorKind where T: core::marker::Sized
pub fn rustic_core::error::CacheBackendErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::CacheBackendErrorKind where T: core::marker::Sized
pub fn rustic_core::error::CacheBackendErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::CacheBackendErrorKind
pub fn rustic_core::error::CacheBackendErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::CacheBackendErrorKind
pub type rustic_core::error::CacheBackendErrorKind::Init = T
pub const rustic_core::error::CacheBackendErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::CacheBackendErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::CacheBackendErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::CacheBackendErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::CacheBackendErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::CacheBackendErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::CacheBackendErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::CacheBackendErrorKind
pub type rustic_core::error::CacheBackendErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::CacheBackendErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::CacheBackendErrorKind::vzip(self) -> V
pub enum rustic_core::error::CommandErrorKind
pub rustic_core::error::CommandErrorKind::BlobsMissing(rustic_core::id::Id)
pub rustic_core::error::CommandErrorKind::CannotDowngrade(u32, u32)
pub rustic_core::error::CommandErrorKind::CompressionLevelNotSupported(i32, core::ops::range::RangeInclusive<i32>)
pub rustic_core::error::CommandErrorKind::ConversionToU64Failed(core::num::error::TryFromIntError)
pub rustic_core::error::CommandErrorKind::DumpNotSupported(rustic_core::backend::node::NodeType)
pub rustic_core::error::CommandErrorKind::ErrorCollecting(std::path::PathBuf, alloc::boxed::Box<rustic_core::error::RusticError>)
pub rustic_core::error::CommandErrorKind::ErrorCreating(std::path::PathBuf, alloc::boxed::Box<rustic_core::error::RusticError>)
pub rustic_core::error::CommandErrorKind::ErrorSettingLength(std::path::PathBuf, alloc::boxed::Box<rustic_core::error::RusticError>)
pub rustic_core::error::CommandErrorKind::FromByteSizeParser(alloc::string::String)
pub rustic_core::error::CommandErrorKind::FromJsonError(serde_json::error::Error)
pub rustic_core::error::CommandErrorKind::FromOutOfRangeError(chrono::duration::OutOfRangeError)
pub rustic_core::error::CommandErrorKind::FromParseIntError(core::num::error::ParseIntError)
pub rustic_core::error::CommandErrorKind::FromRayonError(rayon_core::ThreadPoolBuildError)
pub rustic_core::error::CommandErrorKind::MaxPackSizeTolerateWrong
pub rustic_core::error::CommandErrorKind::MinPackSizeTolerateWrong
pub rustic_core::error::CommandErrorKind::NoCompressionV1Repo(i32)
pub rustic_core::error::CommandErrorKind::NoDecision(rustic_core::id::Id)
pub rustic_core::error::CommandErrorKind::PackNotExisting(rustic_core::id::Id)
pub rustic_core::error::CommandErrorKind::PackSizeNotMatching(rustic_core::id::Id, u32, u32)
pub rustic_core::error::CommandErrorKind::PathIsNoDir(alloc::string::String)
pub rustic_core::error::CommandErrorKind::RepackUncompressedRepoV1
pub rustic_core::error::CommandErrorKind::SizeTooLarge(bytesize::ByteSize)
pub rustic_core::error::CommandErrorKind::VersionNotSupported(u32, core::ops::range::RangeInclusive<u32>)
impl core::convert::From<chrono::duration::OutOfRangeError> for rustic_core::error::CommandErrorKind
pub fn rustic_core::error::CommandErrorKind::from(source: chrono::duration::OutOfRangeError) -> Self
impl core::convert::From<core::num::error::ParseIntError> for rustic_core::error::CommandErrorKind
pub fn rustic_core::error::CommandErrorKind::from(source: core::num::error::ParseIntError) -> Self
impl core::convert::From<rayon_core::ThreadPoolBuildError> for rustic_core::error::CommandErrorKind
pub fn rustic_core::error::CommandErrorKind::from(source: rayon_core::ThreadPoolBuildError) -> Self
impl core::convert::From<rustic_core::error::CommandErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::CommandErrorKind) -> Self
impl core::convert::From<serde_json::error::Error> for rustic_core::error::CommandErrorKind
pub fn rustic_core::error::CommandErrorKind::from(source: serde_json::error::Error) -> Self
impl core::error::Error for rustic_core::error::CommandErrorKind
pub fn rustic_core::error::CommandErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::CommandErrorKind
pub fn rustic_core::error::CommandErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::CommandErrorKind
impl core::fmt::Debug for rustic_core::error::CommandErrorKind
pub fn rustic_core::error::CommandErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::CommandErrorKind
impl core::marker::Sync for rustic_core::error::CommandErrorKind
impl core::marker::Unpin for rustic_core::error::CommandErrorKind
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::CommandErrorKind
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::CommandErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::CommandErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::CommandErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::CommandErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::CommandErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::CommandErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::CommandErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::CommandErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::CommandErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::CommandErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::CommandErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::CommandErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::CommandErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::CommandErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::CommandErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::CommandErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::CommandErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::CommandErrorKind where T: core::marker::Sized
pub fn rustic_core::error::CommandErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::CommandErrorKind where T: core::marker::Sized
pub fn rustic_core::error::CommandErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::CommandErrorKind
pub fn rustic_core::error::CommandErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::CommandErrorKind
pub type rustic_core::error::CommandErrorKind::Init = T
pub const rustic_core::error::CommandErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::CommandErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::CommandErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::CommandErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::CommandErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::CommandErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::CommandErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::CommandErrorKind
pub type rustic_core::error::CommandErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::CommandErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::CommandErrorKind::vzip(self) -> V
pub enum rustic_core::error::ConfigFileErrorKind
pub rustic_core::error::ConfigFileErrorKind::ConfigVersionNotSupported
pub rustic_core::error::ConfigFileErrorKind::ParsingFailedForPolynomial(core::num::error::ParseIntError)
impl core::convert::From<core::num::error::ParseIntError> for rustic_core::error::ConfigFileErrorKind
pub fn rustic_core::error::ConfigFileErrorKind::from(source: core::num::error::ParseIntError) -> Self
impl core::convert::From<rustic_core::error::ConfigFileErrorKind> for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::from(source: rustic_core::error::ConfigFileErrorKind) -> Self
impl core::convert::From<rustic_core::error::ConfigFileErrorKind> for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::from(source: rustic_core::error::ConfigFileErrorKind) -> Self
impl core::convert::From<rustic_core::error::ConfigFileErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::ConfigFileErrorKind) -> Self
impl core::error::Error for rustic_core::error::ConfigFileErrorKind
pub fn rustic_core::error::ConfigFileErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::ConfigFileErrorKind
pub fn rustic_core::error::ConfigFileErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::ConfigFileErrorKind
impl core::fmt::Debug for rustic_core::error::ConfigFileErrorKind
pub fn rustic_core::error::ConfigFileErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::ConfigFileErrorKind
impl core::marker::Sync for rustic_core::error::ConfigFileErrorKind
impl core::marker::Unpin for rustic_core::error::ConfigFileErrorKind
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::ConfigFileErrorKind
impl core::panic::unwind_safe::UnwindSafe for rustic_core::error::ConfigFileErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::ConfigFileErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::ConfigFileErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::ConfigFileErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::ConfigFileErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::ConfigFileErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::ConfigFileErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::ConfigFileErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::ConfigFileErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::ConfigFileErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::ConfigFileErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::ConfigFileErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::ConfigFileErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::ConfigFileErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::ConfigFileErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::ConfigFileErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::ConfigFileErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::ConfigFileErrorKind where T: core::marker::Sized
pub fn rustic_core::error::ConfigFileErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::ConfigFileErrorKind where T: core::marker::Sized
pub fn rustic_core::error::ConfigFileErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::ConfigFileErrorKind
pub fn rustic_core::error::ConfigFileErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::ConfigFileErrorKind
pub type rustic_core::error::ConfigFileErrorKind::Init = T
pub const rustic_core::error::ConfigFileErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::ConfigFileErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::ConfigFileErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::ConfigFileErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::ConfigFileErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::ConfigFileErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::ConfigFileErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::ConfigFileErrorKind
pub type rustic_core::error::ConfigFileErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::ConfigFileErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::ConfigFileErrorKind::vzip(self) -> V
pub enum rustic_core::error::CryptBackendErrorKind
pub rustic_core::error::CryptBackendErrorKind::CopyEncodingDataFailed(std::io::error::Error)
pub rustic_core::error::CryptBackendErrorKind::DecodingZstdCompressedDataFailed(std::io::error::Error)
pub rustic_core::error::CryptBackendErrorKind::DecryptingFromBackendFailed
pub rustic_core::error::CryptBackendErrorKind::DecryptionInFullReadFailed
pub rustic_core::error::CryptBackendErrorKind::DecryptionInPartialReadFailed
pub rustic_core::error::CryptBackendErrorKind::DecryptionNotSupportedForBackend
pub rustic_core::error::CryptBackendErrorKind::DeserializingFromBytesOfJsonTextFailed(serde_json::error::Error)
pub rustic_core::error::CryptBackendErrorKind::EncryptingDataFailed
pub rustic_core::error::CryptBackendErrorKind::FromIo(std::io::error::Error)
pub rustic_core::error::CryptBackendErrorKind::FromJson(serde_json::error::Error)
pub rustic_core::error::CryptBackendErrorKind::FromKey(rustic_core::error::CryptoErrorKind)
pub rustic_core::error::CryptBackendErrorKind::LengthOfUncompressedDataDoesNotMatch
pub rustic_core::error::CryptBackendErrorKind::ListingIdsInDecryptionBackendFailed
pub rustic_core::error::CryptBackendErrorKind::SerializingToJsonByteVectorFailed(serde_json::error::Error)
pub rustic_core::error::CryptBackendErrorKind::WritingDataInCryptBackendFailed
pub rustic_core::error::CryptBackendErrorKind::WritingFullHashFailed
impl core::convert::From<rustic_core::error::CryptBackendErrorKind> for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::from(source: rustic_core::error::CryptBackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::CryptBackendErrorKind> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: rustic_core::error::CryptBackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::CryptBackendErrorKind> for rustic_core::error::PackFileErrorKind
pub fn rustic_core::error::PackFileErrorKind::from(source: rustic_core::error::CryptBackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::CryptBackendErrorKind> for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::from(source: rustic_core::error::CryptBackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::CryptBackendErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::CryptBackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::CryptoErrorKind> for rustic_core::error::CryptBackendErrorKind
pub fn rustic_core::error::CryptBackendErrorKind::from(source: rustic_core::error::CryptoErrorKind) -> Self
impl core::convert::From<serde_json::error::Error> for rustic_core::error::CryptBackendErrorKind
pub fn rustic_core::error::CryptBackendErrorKind::from(source: serde_json::error::Error) -> Self
impl core::convert::From<std::io::error::Error> for rustic_core::error::CryptBackendErrorKind
pub fn rustic_core::error::CryptBackendErrorKind::from(source: std::io::error::Error) -> Self
impl core::error::Error for rustic_core::error::CryptBackendErrorKind
pub fn rustic_core::error::CryptBackendErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::CryptBackendErrorKind
pub fn rustic_core::error::CryptBackendErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::CryptBackendErrorKind
impl core::fmt::Debug for rustic_core::error::CryptBackendErrorKind
pub fn rustic_core::error::CryptBackendErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::CryptBackendErrorKind
impl core::marker::Sync for rustic_core::error::CryptBackendErrorKind
impl core::marker::Unpin for rustic_core::error::CryptBackendErrorKind
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::CryptBackendErrorKind
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::CryptBackendErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::CryptBackendErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::CryptBackendErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::CryptBackendErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::CryptBackendErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::CryptBackendErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::CryptBackendErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::CryptBackendErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::CryptBackendErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::CryptBackendErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::CryptBackendErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::CryptBackendErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::CryptBackendErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::CryptBackendErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::CryptBackendErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::CryptBackendErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::CryptBackendErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::CryptBackendErrorKind where T: core::marker::Sized
pub fn rustic_core::error::CryptBackendErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::CryptBackendErrorKind where T: core::marker::Sized
pub fn rustic_core::error::CryptBackendErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::CryptBackendErrorKind
pub fn rustic_core::error::CryptBackendErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::CryptBackendErrorKind
pub type rustic_core::error::CryptBackendErrorKind::Init = T
pub const rustic_core::error::CryptBackendErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::CryptBackendErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::CryptBackendErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::CryptBackendErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::CryptBackendErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::CryptBackendErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::CryptBackendErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::CryptBackendErrorKind
pub type rustic_core::error::CryptBackendErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::CryptBackendErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::CryptBackendErrorKind::vzip(self) -> V
pub enum rustic_core::error::CryptoErrorKind
pub rustic_core::error::CryptoErrorKind::CryptoKeyTooShort
pub rustic_core::error::CryptoErrorKind::DataDecryptionFailed(aead::Error)
pub rustic_core::error::CryptoErrorKind::DataEncryptionFailed
impl core::convert::From<rustic_core::error::CryptoErrorKind> for rustic_core::error::CryptBackendErrorKind
pub fn rustic_core::error::CryptBackendErrorKind::from(source: rustic_core::error::CryptoErrorKind) -> Self
impl core::convert::From<rustic_core::error::CryptoErrorKind> for rustic_core::error::KeyFileErrorKind
pub fn rustic_core::error::KeyFileErrorKind::from(source: rustic_core::error::CryptoErrorKind) -> Self
impl core::convert::From<rustic_core::error::CryptoErrorKind> for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::from(source: rustic_core::error::CryptoErrorKind) -> Self
impl core::convert::From<rustic_core::error::CryptoErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::CryptoErrorKind) -> Self
impl core::error::Error for rustic_core::error::CryptoErrorKind
impl core::fmt::Display for rustic_core::error::CryptoErrorKind
pub fn rustic_core::error::CryptoErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::CryptoErrorKind
impl core::clone::Clone for rustic_core::error::CryptoErrorKind
pub fn rustic_core::error::CryptoErrorKind::clone(&self) -> rustic_core::error::CryptoErrorKind
impl core::fmt::Debug for rustic_core::error::CryptoErrorKind
pub fn rustic_core::error::CryptoErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::error::CryptoErrorKind
impl core::marker::Send for rustic_core::error::CryptoErrorKind
impl core::marker::Sync for rustic_core::error::CryptoErrorKind
impl core::marker::Unpin for rustic_core::error::CryptoErrorKind
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::CryptoErrorKind
impl core::panic::unwind_safe::UnwindSafe for rustic_core::error::CryptoErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::CryptoErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::CryptoErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::CryptoErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::CryptoErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::CryptoErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::CryptoErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::CryptoErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::CryptoErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::error::CryptoErrorKind where T: core::clone::Clone
pub type rustic_core::error::CryptoErrorKind::Owned = T
pub fn rustic_core::error::CryptoErrorKind::clone_into(&self, target: &mut T)
pub fn rustic_core::error::CryptoErrorKind::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::error::CryptoErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::CryptoErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::CryptoErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::CryptoErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::CryptoErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::CryptoErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::CryptoErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::CryptoErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::CryptoErrorKind where T: core::marker::Sized
pub fn rustic_core::error::CryptoErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::CryptoErrorKind where T: core::marker::Sized
pub fn rustic_core::error::CryptoErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::CryptoErrorKind
pub fn rustic_core::error::CryptoErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::CryptoErrorKind
pub type rustic_core::error::CryptoErrorKind::Init = T
pub const rustic_core::error::CryptoErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::CryptoErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::CryptoErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::CryptoErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::CryptoErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::CryptoErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::CryptoErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::CryptoErrorKind
pub type rustic_core::error::CryptoErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::CryptoErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::CryptoErrorKind::vzip(self) -> V
pub enum rustic_core::error::FileErrorKind
pub rustic_core::error::FileErrorKind::ConversionFromU64ToUsizeFailed(core::num::error::TryFromIntError)
pub rustic_core::error::FileErrorKind::CouldNotFindIdInIndex(rustic_core::id::Id)
pub rustic_core::error::FileErrorKind::TransposingOptionResultFailed(std::io::error::Error)
impl core::convert::From<rustic_core::error::FileErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::FileErrorKind) -> Self
impl core::error::Error for rustic_core::error::FileErrorKind
impl core::fmt::Display for rustic_core::error::FileErrorKind
pub fn rustic_core::error::FileErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::FileErrorKind
impl core::fmt::Debug for rustic_core::error::FileErrorKind
pub fn rustic_core::error::FileErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::FileErrorKind
impl core::marker::Sync for rustic_core::error::FileErrorKind
impl core::marker::Unpin for rustic_core::error::FileErrorKind
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::FileErrorKind
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::FileErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::FileErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::FileErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::FileErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::FileErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::FileErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::FileErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::FileErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::FileErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::FileErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::FileErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::FileErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::FileErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::FileErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::FileErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::FileErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::FileErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::FileErrorKind where T: core::marker::Sized
pub fn rustic_core::error::FileErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::FileErrorKind where T: core::marker::Sized
pub fn rustic_core::error::FileErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::FileErrorKind
pub fn rustic_core::error::FileErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::FileErrorKind
pub type rustic_core::error::FileErrorKind::Init = T
pub const rustic_core::error::FileErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::FileErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::FileErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::FileErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::FileErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::FileErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::FileErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::FileErrorKind
pub type rustic_core::error::FileErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::FileErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::FileErrorKind::vzip(self) -> V
pub enum rustic_core::error::IdErrorKind
pub rustic_core::error::IdErrorKind::HexError(hex::error::FromHexError)
impl core::convert::From<rustic_core::error::IdErrorKind> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: rustic_core::error::IdErrorKind) -> Self
impl core::convert::From<rustic_core::error::IdErrorKind> for rustic_core::error::LocalErrorKind
pub fn rustic_core::error::LocalErrorKind::from(source: rustic_core::error::IdErrorKind) -> Self
impl core::convert::From<rustic_core::error::IdErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::IdErrorKind) -> Self
impl core::error::Error for rustic_core::error::IdErrorKind
impl core::fmt::Display for rustic_core::error::IdErrorKind
pub fn rustic_core::error::IdErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::IdErrorKind
impl core::clone::Clone for rustic_core::error::IdErrorKind
pub fn rustic_core::error::IdErrorKind::clone(&self) -> rustic_core::error::IdErrorKind
impl core::fmt::Debug for rustic_core::error::IdErrorKind
pub fn rustic_core::error::IdErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::error::IdErrorKind
impl core::marker::Send for rustic_core::error::IdErrorKind
impl core::marker::Sync for rustic_core::error::IdErrorKind
impl core::marker::Unpin for rustic_core::error::IdErrorKind
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::IdErrorKind
impl core::panic::unwind_safe::UnwindSafe for rustic_core::error::IdErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::IdErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::IdErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::IdErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::IdErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::IdErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::IdErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::IdErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::IdErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::error::IdErrorKind where T: core::clone::Clone
pub type rustic_core::error::IdErrorKind::Owned = T
pub fn rustic_core::error::IdErrorKind::clone_into(&self, target: &mut T)
pub fn rustic_core::error::IdErrorKind::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::error::IdErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::IdErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::IdErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::IdErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::IdErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::IdErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::IdErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::IdErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::IdErrorKind where T: core::marker::Sized
pub fn rustic_core::error::IdErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::IdErrorKind where T: core::marker::Sized
pub fn rustic_core::error::IdErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::IdErrorKind
pub fn rustic_core::error::IdErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::IdErrorKind
pub type rustic_core::error::IdErrorKind::Init = T
pub const rustic_core::error::IdErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::IdErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::IdErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::IdErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::IdErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::IdErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::IdErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::IdErrorKind
pub type rustic_core::error::IdErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::IdErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::IdErrorKind::vzip(self) -> V
pub enum rustic_core::error::IgnoreErrorKind
pub rustic_core::error::IgnoreErrorKind::FromIoError(std::io::error::Error)
pub rustic_core::error::IgnoreErrorKind::FromTryFromIntError(core::num::error::TryFromIntError)
pub rustic_core::error::IgnoreErrorKind::GenericError(ignore::Error)
pub rustic_core::error::IgnoreErrorKind::TargetIsNotValidUnicode
pub rustic_core::error::IgnoreErrorKind::TargetIsNotValidUnicode::file: std::path::PathBuf
pub rustic_core::error::IgnoreErrorKind::TargetIsNotValidUnicode::target: std::path::PathBuf
pub rustic_core::error::IgnoreErrorKind::UnableToOpenFile(std::io::error::Error)
impl core::convert::From<core::num::error::TryFromIntError> for rustic_core::error::IgnoreErrorKind
pub fn rustic_core::error::IgnoreErrorKind::from(source: core::num::error::TryFromIntError) -> Self
impl core::convert::From<ignore::Error> for rustic_core::error::IgnoreErrorKind
pub fn rustic_core::error::IgnoreErrorKind::from(source: ignore::Error) -> Self
impl core::convert::From<rustic_core::error::IgnoreErrorKind> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: rustic_core::error::IgnoreErrorKind) -> Self
impl core::convert::From<rustic_core::error::IgnoreErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::IgnoreErrorKind) -> Self
impl core::convert::From<std::io::error::Error> for rustic_core::error::IgnoreErrorKind
pub fn rustic_core::error::IgnoreErrorKind::from(source: std::io::error::Error) -> Self
impl core::error::Error for rustic_core::error::IgnoreErrorKind
pub fn rustic_core::error::IgnoreErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::IgnoreErrorKind
pub fn rustic_core::error::IgnoreErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::IgnoreErrorKind
impl core::fmt::Debug for rustic_core::error::IgnoreErrorKind
pub fn rustic_core::error::IgnoreErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::IgnoreErrorKind
impl core::marker::Sync for rustic_core::error::IgnoreErrorKind
impl core::marker::Unpin for rustic_core::error::IgnoreErrorKind
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::IgnoreErrorKind
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::IgnoreErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::IgnoreErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::IgnoreErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::IgnoreErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::IgnoreErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::IgnoreErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::IgnoreErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::IgnoreErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::IgnoreErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::IgnoreErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::IgnoreErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::IgnoreErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::IgnoreErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::IgnoreErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::IgnoreErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::IgnoreErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::IgnoreErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::IgnoreErrorKind where T: core::marker::Sized
pub fn rustic_core::error::IgnoreErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::IgnoreErrorKind where T: core::marker::Sized
pub fn rustic_core::error::IgnoreErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::IgnoreErrorKind
pub fn rustic_core::error::IgnoreErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::IgnoreErrorKind
pub type rustic_core::error::IgnoreErrorKind::Init = T
pub const rustic_core::error::IgnoreErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::IgnoreErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::IgnoreErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::IgnoreErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::IgnoreErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::IgnoreErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::IgnoreErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::IgnoreErrorKind
pub type rustic_core::error::IgnoreErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::IgnoreErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::IgnoreErrorKind::vzip(self) -> V
pub enum rustic_core::error::IndexErrorKind
pub rustic_core::error::IndexErrorKind::BlobInIndexNotFound
pub rustic_core::error::IndexErrorKind::CouldNotGetElapsedTimeFromSystemTime(std::time::SystemTimeError)
pub rustic_core::error::IndexErrorKind::GettingBlobIndexEntryFromBackendFailed
pub rustic_core::error::IndexErrorKind::SavingIndexFileFailed
impl core::convert::From<rustic_core::error::IndexErrorKind> for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::from(source: rustic_core::error::IndexErrorKind) -> Self
impl core::convert::From<rustic_core::error::IndexErrorKind> for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::from(source: rustic_core::error::IndexErrorKind) -> Self
impl core::convert::From<rustic_core::error::IndexErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::IndexErrorKind) -> Self
impl core::convert::From<rustic_core::error::IndexErrorKind> for rustic_core::error::TreeErrorKind
pub fn rustic_core::error::TreeErrorKind::from(source: rustic_core::error::IndexErrorKind) -> Self
impl core::convert::From<std::time::SystemTimeError> for rustic_core::error::IndexErrorKind
pub fn rustic_core::error::IndexErrorKind::from(source: std::time::SystemTimeError) -> Self
impl core::error::Error for rustic_core::error::IndexErrorKind
pub fn rustic_core::error::IndexErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::IndexErrorKind
pub fn rustic_core::error::IndexErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::IndexErrorKind
impl core::fmt::Debug for rustic_core::error::IndexErrorKind
pub fn rustic_core::error::IndexErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::IndexErrorKind
impl core::marker::Sync for rustic_core::error::IndexErrorKind
impl core::marker::Unpin for rustic_core::error::IndexErrorKind
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::IndexErrorKind
impl core::panic::unwind_safe::UnwindSafe for rustic_core::error::IndexErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::IndexErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::IndexErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::IndexErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::IndexErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::IndexErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::IndexErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::IndexErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::IndexErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::IndexErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::IndexErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::IndexErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::IndexErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::IndexErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::IndexErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::IndexErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::IndexErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::IndexErrorKind where T: core::marker::Sized
pub fn rustic_core::error::IndexErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::IndexErrorKind where T: core::marker::Sized
pub fn rustic_core::error::IndexErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::IndexErrorKind
pub fn rustic_core::error::IndexErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::IndexErrorKind
pub type rustic_core::error::IndexErrorKind::Init = T
pub const rustic_core::error::IndexErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::IndexErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::IndexErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::IndexErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::IndexErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::IndexErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::IndexErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::IndexErrorKind
pub type rustic_core::error::IndexErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::IndexErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::IndexErrorKind::vzip(self) -> V
pub enum rustic_core::error::KeyFileErrorKind
pub rustic_core::error::KeyFileErrorKind::ConversionFromU32ToU8Failed(core::num::error::TryFromIntError)
pub rustic_core::error::KeyFileErrorKind::CouldNotEncryptData(rustic_core::error::CryptoErrorKind)
pub rustic_core::error::KeyFileErrorKind::CouldNotGetKeyFileFromBackend
pub rustic_core::error::KeyFileErrorKind::CouldNotSerializeAsJsonByteVector(serde_json::error::Error)
pub rustic_core::error::KeyFileErrorKind::DeserializingFromSliceFailed(serde_json::error::Error)
pub rustic_core::error::KeyFileErrorKind::InvalidSCryptParameters(scrypt::errors::InvalidParams)
pub rustic_core::error::KeyFileErrorKind::ListingKeyFilesFailed
pub rustic_core::error::KeyFileErrorKind::NoSuitableKeyFound
pub rustic_core::error::KeyFileErrorKind::OutputLengthInvalid(scrypt::errors::InvalidOutputLen)
impl core::convert::From<rustic_core::error::CryptoErrorKind> for rustic_core::error::KeyFileErrorKind
pub fn rustic_core::error::KeyFileErrorKind::from(source: rustic_core::error::CryptoErrorKind) -> Self
impl core::convert::From<rustic_core::error::KeyFileErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::KeyFileErrorKind) -> Self
impl core::error::Error for rustic_core::error::KeyFileErrorKind
pub fn rustic_core::error::KeyFileErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::KeyFileErrorKind
pub fn rustic_core::error::KeyFileErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::KeyFileErrorKind
impl core::fmt::Debug for rustic_core::error::KeyFileErrorKind
pub fn rustic_core::error::KeyFileErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::KeyFileErrorKind
impl core::marker::Sync for rustic_core::error::KeyFileErrorKind
impl core::marker::Unpin for rustic_core::error::KeyFileErrorKind
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::KeyFileErrorKind
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::KeyFileErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::KeyFileErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::KeyFileErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::KeyFileErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::KeyFileErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::KeyFileErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::KeyFileErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::KeyFileErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::KeyFileErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::KeyFileErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::KeyFileErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::KeyFileErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::KeyFileErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::KeyFileErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::KeyFileErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::KeyFileErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::KeyFileErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::KeyFileErrorKind where T: core::marker::Sized
pub fn rustic_core::error::KeyFileErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::KeyFileErrorKind where T: core::marker::Sized
pub fn rustic_core::error::KeyFileErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::KeyFileErrorKind
pub fn rustic_core::error::KeyFileErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::KeyFileErrorKind
pub type rustic_core::error::KeyFileErrorKind::Init = T
pub const rustic_core::error::KeyFileErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::KeyFileErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::KeyFileErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::KeyFileErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::KeyFileErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::KeyFileErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::KeyFileErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::KeyFileErrorKind
pub type rustic_core::error::KeyFileErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::KeyFileErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::KeyFileErrorKind::vzip(self) -> V
pub enum rustic_core::error::LocalErrorKind
pub rustic_core::error::LocalErrorKind::CommandExecutionFailed(std::io::error::Error)
pub rustic_core::error::LocalErrorKind::CommandNotSuccessful
pub rustic_core::error::LocalErrorKind::CommandNotSuccessful::file_name: alloc::string::String
pub rustic_core::error::LocalErrorKind::CommandNotSuccessful::file_type: alloc::string::String
pub rustic_core::error::LocalErrorKind::CommandNotSuccessful::id: alloc::string::String
pub rustic_core::error::LocalErrorKind::CommandNotSuccessful::status: std::process::ExitStatus
pub rustic_core::error::LocalErrorKind::CouldNotSeekToPositionInFile(std::io::error::Error)
pub rustic_core::error::LocalErrorKind::CouldNotWriteToBuffer(std::io::error::Error)
pub rustic_core::error::LocalErrorKind::DirectoryCreationFailed(std::io::error::Error)
pub rustic_core::error::LocalErrorKind::DirectoryRemovalFailed(std::io::error::Error)
pub rustic_core::error::LocalErrorKind::FileDoesNotHaveParent(std::path::PathBuf)
pub rustic_core::error::LocalErrorKind::FileRemovalFailed(std::io::error::Error)
pub rustic_core::error::LocalErrorKind::FromAhoCorasick(aho_corasick::util::error::BuildError)
pub rustic_core::error::LocalErrorKind::FromIdError(rustic_core::error::IdErrorKind)
pub rustic_core::error::LocalErrorKind::FromSplitError(shell_words::ParseError)
pub rustic_core::error::LocalErrorKind::FromTryIntError(core::num::error::TryFromIntError)
pub rustic_core::error::LocalErrorKind::FromWalkdirError(walkdir::error::Error)
pub rustic_core::error::LocalErrorKind::OpeningFileFailed(std::io::error::Error)
pub rustic_core::error::LocalErrorKind::QueryingMetadataFailed(std::io::error::Error)
pub rustic_core::error::LocalErrorKind::QueryingWalkDirMetadataFailed(walkdir::error::Error)
pub rustic_core::error::LocalErrorKind::ReadingContentsOfFileFailed(std::io::error::Error)
pub rustic_core::error::LocalErrorKind::ReadingExactLengthOfFileFailed(std::io::error::Error)
pub rustic_core::error::LocalErrorKind::SettingFileLengthFailed(std::io::error::Error)
pub rustic_core::error::LocalErrorKind::SettingTimeMetadataFailed(std::io::error::Error)
pub rustic_core::error::LocalErrorKind::SyncingOfOsMetadataFailed(std::io::error::Error)
impl core::convert::From<aho_corasick::util::error::BuildError> for rustic_core::error::LocalErrorKind
pub fn rustic_core::error::LocalErrorKind::from(source: aho_corasick::util::error::BuildError) -> Self
impl core::convert::From<core::num::error::TryFromIntError> for rustic_core::error::LocalErrorKind
pub fn rustic_core::error::LocalErrorKind::from(source: core::num::error::TryFromIntError) -> Self
impl core::convert::From<rustic_core::error::IdErrorKind> for rustic_core::error::LocalErrorKind
pub fn rustic_core::error::LocalErrorKind::from(source: rustic_core::error::IdErrorKind) -> Self
impl core::convert::From<rustic_core::error::LocalErrorKind> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: rustic_core::error::LocalErrorKind) -> Self
impl core::convert::From<rustic_core::error::LocalErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::LocalErrorKind) -> Self
impl core::convert::From<shell_words::ParseError> for rustic_core::error::LocalErrorKind
pub fn rustic_core::error::LocalErrorKind::from(source: shell_words::ParseError) -> Self
impl core::convert::From<std::io::error::Error> for rustic_core::error::LocalErrorKind
pub fn rustic_core::error::LocalErrorKind::from(source: std::io::error::Error) -> Self
impl core::convert::From<walkdir::error::Error> for rustic_core::error::LocalErrorKind
pub fn rustic_core::error::LocalErrorKind::from(source: walkdir::error::Error) -> Self
impl core::error::Error for rustic_core::error::LocalErrorKind
pub fn rustic_core::error::LocalErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::LocalErrorKind
pub fn rustic_core::error::LocalErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::LocalErrorKind
impl core::fmt::Debug for rustic_core::error::LocalErrorKind
pub fn rustic_core::error::LocalErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::LocalErrorKind
impl core::marker::Sync for rustic_core::error::LocalErrorKind
impl core::marker::Unpin for rustic_core::error::LocalErrorKind
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::LocalErrorKind
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::LocalErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::LocalErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::LocalErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::LocalErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::LocalErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::LocalErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::LocalErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::LocalErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::LocalErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::LocalErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::LocalErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::LocalErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::LocalErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::LocalErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::LocalErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::LocalErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::LocalErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::LocalErrorKind where T: core::marker::Sized
pub fn rustic_core::error::LocalErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::LocalErrorKind where T: core::marker::Sized
pub fn rustic_core::error::LocalErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::LocalErrorKind
pub fn rustic_core::error::LocalErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::LocalErrorKind
pub type rustic_core::error::LocalErrorKind::Init = T
pub const rustic_core::error::LocalErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::LocalErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::LocalErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::LocalErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::LocalErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::LocalErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::LocalErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::LocalErrorKind
pub type rustic_core::error::LocalErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::LocalErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::LocalErrorKind::vzip(self) -> V
pub enum rustic_core::error::NodeErrorKind
pub rustic_core::error::NodeErrorKind::FromParseIntError(core::num::error::ParseIntError)
impl core::convert::From<core::num::error::ParseIntError> for rustic_core::error::NodeErrorKind
pub fn rustic_core::error::NodeErrorKind::from(source: core::num::error::ParseIntError) -> Self
impl core::convert::From<rustic_core::error::NodeErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::NodeErrorKind) -> Self
impl core::error::Error for rustic_core::error::NodeErrorKind
pub fn rustic_core::error::NodeErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::NodeErrorKind
pub fn rustic_core::error::NodeErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::NodeErrorKind
impl core::fmt::Debug for rustic_core::error::NodeErrorKind
pub fn rustic_core::error::NodeErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::NodeErrorKind
impl core::marker::Sync for rustic_core::error::NodeErrorKind
impl core::marker::Unpin for rustic_core::error::NodeErrorKind
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::NodeErrorKind
impl core::panic::unwind_safe::UnwindSafe for rustic_core::error::NodeErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::NodeErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::NodeErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::NodeErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::NodeErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::NodeErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::NodeErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::NodeErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::NodeErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::NodeErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::NodeErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::NodeErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::NodeErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::NodeErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::NodeErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::NodeErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::NodeErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::NodeErrorKind where T: core::marker::Sized
pub fn rustic_core::error::NodeErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::NodeErrorKind where T: core::marker::Sized
pub fn rustic_core::error::NodeErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::NodeErrorKind
pub fn rustic_core::error::NodeErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::NodeErrorKind
pub type rustic_core::error::NodeErrorKind::Init = T
pub const rustic_core::error::NodeErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::NodeErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::NodeErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::NodeErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::NodeErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::NodeErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::NodeErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::NodeErrorKind
pub type rustic_core::error::NodeErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::NodeErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::NodeErrorKind::vzip(self) -> V
pub enum rustic_core::error::PackFileErrorKind
pub rustic_core::error::PackFileErrorKind::BinaryDecryptionFailed
pub rustic_core::error::PackFileErrorKind::HeaderLengthDoesNotMatchHeaderContents
pub rustic_core::error::PackFileErrorKind::HeaderLengthDoesNotMatchHeaderContents::size_computed: u32
pub rustic_core::error::PackFileErrorKind::HeaderLengthDoesNotMatchHeaderContents::size_real: u32
pub rustic_core::error::PackFileErrorKind::HeaderLengthTooLarge
pub rustic_core::error::PackFileErrorKind::HeaderLengthTooLarge::pack_size: u32
pub rustic_core::error::PackFileErrorKind::HeaderLengthTooLarge::size_real: u32
pub rustic_core::error::PackFileErrorKind::HeaderPackSizeComputedDoesNotMatchRealPackFile
pub rustic_core::error::PackFileErrorKind::HeaderPackSizeComputedDoesNotMatchRealPackFile::size_computed: u32
pub rustic_core::error::PackFileErrorKind::HeaderPackSizeComputedDoesNotMatchRealPackFile::size_real: u32
pub rustic_core::error::PackFileErrorKind::ListingKeyFilesFailed(rustic_core::error::BackendErrorKind)
pub rustic_core::error::PackFileErrorKind::PackDecryptionFailed(rustic_core::error::CryptBackendErrorKind)
pub rustic_core::error::PackFileErrorKind::PartialReadOfPackfileFailed
pub rustic_core::error::PackFileErrorKind::ReadingBinaryRepresentationFailed(binrw::error::Error)
pub rustic_core::error::PackFileErrorKind::WritingBinaryRepresentationFailed(binrw::error::Error)
pub rustic_core::error::PackFileErrorKind::WritingBytesFailed
impl core::convert::From<rustic_core::error::BackendErrorKind> for rustic_core::error::PackFileErrorKind
pub fn rustic_core::error::PackFileErrorKind::from(source: rustic_core::error::BackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::CryptBackendErrorKind> for rustic_core::error::PackFileErrorKind
pub fn rustic_core::error::PackFileErrorKind::from(source: rustic_core::error::CryptBackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::PackFileErrorKind> for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::from(source: rustic_core::error::PackFileErrorKind) -> Self
impl core::convert::From<rustic_core::error::PackFileErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::PackFileErrorKind) -> Self
impl core::error::Error for rustic_core::error::PackFileErrorKind
pub fn rustic_core::error::PackFileErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::PackFileErrorKind
pub fn rustic_core::error::PackFileErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::PackFileErrorKind
impl core::fmt::Debug for rustic_core::error::PackFileErrorKind
pub fn rustic_core::error::PackFileErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::PackFileErrorKind
impl core::marker::Sync for rustic_core::error::PackFileErrorKind
impl core::marker::Unpin for rustic_core::error::PackFileErrorKind
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::PackFileErrorKind
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::PackFileErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::PackFileErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::PackFileErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::PackFileErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::PackFileErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::PackFileErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::PackFileErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::PackFileErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::PackFileErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::PackFileErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::PackFileErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::PackFileErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::PackFileErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::PackFileErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::PackFileErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::PackFileErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::PackFileErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::PackFileErrorKind where T: core::marker::Sized
pub fn rustic_core::error::PackFileErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::PackFileErrorKind where T: core::marker::Sized
pub fn rustic_core::error::PackFileErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::PackFileErrorKind
pub fn rustic_core::error::PackFileErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::PackFileErrorKind
pub type rustic_core::error::PackFileErrorKind::Init = T
pub const rustic_core::error::PackFileErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::PackFileErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::PackFileErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::PackFileErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::PackFileErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::PackFileErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::PackFileErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::PackFileErrorKind
pub type rustic_core::error::PackFileErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::PackFileErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::PackFileErrorKind::vzip(self) -> V
pub enum rustic_core::error::PackerErrorKind
pub rustic_core::error::PackerErrorKind::AddingIndexPackFailed(rustic_core::error::IndexErrorKind)
pub rustic_core::error::PackerErrorKind::CompressingDataFailed(std::io::error::Error)
pub rustic_core::error::PackerErrorKind::ConfigVersionNotSupported(rustic_core::error::ConfigFileErrorKind)
pub rustic_core::error::PackerErrorKind::CouldNotCreateBinaryRepresentationForHeader(rustic_core::error::PackFileErrorKind)
pub rustic_core::error::PackerErrorKind::CouldNotGetElapsedTimeFromSystemTime(std::time::SystemTimeError)
pub rustic_core::error::PackerErrorKind::CryptoError(rustic_core::error::CryptoErrorKind)
pub rustic_core::error::PackerErrorKind::GettingTotalSizeFailed
pub rustic_core::error::PackerErrorKind::IntConversionFailed(core::num::error::TryFromIntError)
pub rustic_core::error::PackerErrorKind::PartiallyReadingDataFailed(rustic_core::error::PackFileErrorKind)
pub rustic_core::error::PackerErrorKind::ReadingPartiallyEncryptedDataFailed(rustic_core::error::CryptBackendErrorKind)
pub rustic_core::error::PackerErrorKind::SendingCrossbeamMessageFailed(crossbeam_channel::err::SendError<(bytes::bytes::Bytes, rustic_core::id::Id, core::option::Option<u32>)>)
pub rustic_core::error::PackerErrorKind::SendingCrossbeamMessageFailedForIndexPack(crossbeam_channel::err::SendError<(bytes::bytes::Bytes, rustic_core::repofile::indexfile::IndexPack)>)
pub rustic_core::error::PackerErrorKind::WritingBytesFailedForPackFile(rustic_core::error::PackFileErrorKind)
pub rustic_core::error::PackerErrorKind::WritingBytesFailedInBackend(rustic_core::error::BackendErrorKind)
impl core::convert::From<core::num::error::TryFromIntError> for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::from(source: core::num::error::TryFromIntError) -> Self
impl core::convert::From<crossbeam_channel::err::SendError<(bytes::bytes::Bytes, rustic_core::id::Id, core::option::Option<u32>)>> for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::from(source: crossbeam_channel::err::SendError<(bytes::bytes::Bytes, rustic_core::id::Id, core::option::Option<u32>)>) -> Self
impl core::convert::From<crossbeam_channel::err::SendError<(bytes::bytes::Bytes, rustic_core::repofile::indexfile::IndexPack)>> for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::from(source: crossbeam_channel::err::SendError<(bytes::bytes::Bytes, rustic_core::repofile::indexfile::IndexPack)>) -> Self
impl core::convert::From<rustic_core::error::BackendErrorKind> for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::from(source: rustic_core::error::BackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::ConfigFileErrorKind> for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::from(source: rustic_core::error::ConfigFileErrorKind) -> Self
impl core::convert::From<rustic_core::error::CryptBackendErrorKind> for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::from(source: rustic_core::error::CryptBackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::CryptoErrorKind> for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::from(source: rustic_core::error::CryptoErrorKind) -> Self
impl core::convert::From<rustic_core::error::IndexErrorKind> for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::from(source: rustic_core::error::IndexErrorKind) -> Self
impl core::convert::From<rustic_core::error::PackFileErrorKind> for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::from(source: rustic_core::error::PackFileErrorKind) -> Self
impl core::convert::From<rustic_core::error::PackerErrorKind> for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::from(source: rustic_core::error::PackerErrorKind) -> Self
impl core::convert::From<rustic_core::error::PackerErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::PackerErrorKind) -> Self
impl core::convert::From<std::io::error::Error> for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::from(source: std::io::error::Error) -> Self
impl core::convert::From<std::time::SystemTimeError> for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::from(source: std::time::SystemTimeError) -> Self
impl core::error::Error for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::PackerErrorKind
impl core::fmt::Debug for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::PackerErrorKind
impl core::marker::Sync for rustic_core::error::PackerErrorKind
impl core::marker::Unpin for rustic_core::error::PackerErrorKind
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::PackerErrorKind
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::PackerErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::PackerErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::PackerErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::PackerErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::PackerErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::PackerErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::PackerErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::PackerErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::PackerErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::PackerErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::PackerErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::PackerErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::PackerErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::PackerErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::PackerErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::PackerErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::PackerErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::PackerErrorKind where T: core::marker::Sized
pub fn rustic_core::error::PackerErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::PackerErrorKind where T: core::marker::Sized
pub fn rustic_core::error::PackerErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::PackerErrorKind
pub fn rustic_core::error::PackerErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::PackerErrorKind
pub type rustic_core::error::PackerErrorKind::Init = T
pub const rustic_core::error::PackerErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::PackerErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::PackerErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::PackerErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::PackerErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::PackerErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::PackerErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::PackerErrorKind
pub type rustic_core::error::PackerErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::PackerErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::PackerErrorKind::vzip(self) -> V
pub enum rustic_core::error::PolynomialErrorKind
pub rustic_core::error::PolynomialErrorKind::NoSuitablePolynomialFound
impl core::convert::From<rustic_core::error::PolynomialErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::PolynomialErrorKind) -> Self
impl core::error::Error for rustic_core::error::PolynomialErrorKind
impl core::fmt::Display for rustic_core::error::PolynomialErrorKind
pub fn rustic_core::error::PolynomialErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::PolynomialErrorKind
impl core::clone::Clone for rustic_core::error::PolynomialErrorKind
pub fn rustic_core::error::PolynomialErrorKind::clone(&self) -> rustic_core::error::PolynomialErrorKind
impl core::fmt::Debug for rustic_core::error::PolynomialErrorKind
pub fn rustic_core::error::PolynomialErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::error::PolynomialErrorKind
impl core::marker::Send for rustic_core::error::PolynomialErrorKind
impl core::marker::Sync for rustic_core::error::PolynomialErrorKind
impl core::marker::Unpin for rustic_core::error::PolynomialErrorKind
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::PolynomialErrorKind
impl core::panic::unwind_safe::UnwindSafe for rustic_core::error::PolynomialErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::PolynomialErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::PolynomialErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::PolynomialErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::PolynomialErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::PolynomialErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::PolynomialErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::PolynomialErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::PolynomialErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::error::PolynomialErrorKind where T: core::clone::Clone
pub type rustic_core::error::PolynomialErrorKind::Owned = T
pub fn rustic_core::error::PolynomialErrorKind::clone_into(&self, target: &mut T)
pub fn rustic_core::error::PolynomialErrorKind::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::error::PolynomialErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::PolynomialErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::PolynomialErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::PolynomialErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::PolynomialErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::PolynomialErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::PolynomialErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::PolynomialErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::PolynomialErrorKind where T: core::marker::Sized
pub fn rustic_core::error::PolynomialErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::PolynomialErrorKind where T: core::marker::Sized
pub fn rustic_core::error::PolynomialErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::PolynomialErrorKind
pub fn rustic_core::error::PolynomialErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::PolynomialErrorKind
pub type rustic_core::error::PolynomialErrorKind::Init = T
pub const rustic_core::error::PolynomialErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::PolynomialErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::PolynomialErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::PolynomialErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::PolynomialErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::PolynomialErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::PolynomialErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::PolynomialErrorKind
pub type rustic_core::error::PolynomialErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::PolynomialErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::PolynomialErrorKind::vzip(self) -> V
pub enum rustic_core::error::ProviderErrorKind
pub rustic_core::error::ProviderErrorKind::FromIoError(std::io::error::Error)
pub rustic_core::error::ProviderErrorKind::FromParseIntError(core::num::error::ParseIntError)
pub rustic_core::error::ProviderErrorKind::FromRestError(rustic_core::error::RestErrorKind)
pub rustic_core::error::ProviderErrorKind::FromUtf8Error(core::str::error::Utf8Error)
pub rustic_core::error::ProviderErrorKind::NoOutputForRcloneVersion
pub rustic_core::error::ProviderErrorKind::NoStdOutForRclone
pub rustic_core::error::ProviderErrorKind::RCloneExitWithBadStatus(std::process::ExitStatus)
pub rustic_core::error::ProviderErrorKind::UrlNotStartingWithHttp(alloc::string::String)
impl core::convert::From<core::num::error::ParseIntError> for rustic_core::error::ProviderErrorKind
pub fn rustic_core::error::ProviderErrorKind::from(source: core::num::error::ParseIntError) -> Self
impl core::convert::From<core::str::error::Utf8Error> for rustic_core::error::ProviderErrorKind
pub fn rustic_core::error::ProviderErrorKind::from(source: core::str::error::Utf8Error) -> Self
impl core::convert::From<rustic_core::error::ProviderErrorKind> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: rustic_core::error::ProviderErrorKind) -> Self
impl core::convert::From<rustic_core::error::ProviderErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::ProviderErrorKind) -> Self
impl core::convert::From<rustic_core::error::RestErrorKind> for rustic_core::error::ProviderErrorKind
pub fn rustic_core::error::ProviderErrorKind::from(source: rustic_core::error::RestErrorKind) -> Self
impl core::convert::From<std::io::error::Error> for rustic_core::error::ProviderErrorKind
pub fn rustic_core::error::ProviderErrorKind::from(source: std::io::error::Error) -> Self
impl core::error::Error for rustic_core::error::ProviderErrorKind
pub fn rustic_core::error::ProviderErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::ProviderErrorKind
pub fn rustic_core::error::ProviderErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::ProviderErrorKind
impl core::fmt::Debug for rustic_core::error::ProviderErrorKind
pub fn rustic_core::error::ProviderErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::ProviderErrorKind
impl core::marker::Sync for rustic_core::error::ProviderErrorKind
impl core::marker::Unpin for rustic_core::error::ProviderErrorKind
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::ProviderErrorKind
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::ProviderErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::ProviderErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::ProviderErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::ProviderErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::ProviderErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::ProviderErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::ProviderErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::ProviderErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::ProviderErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::ProviderErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::ProviderErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::ProviderErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::ProviderErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::ProviderErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::ProviderErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::ProviderErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::ProviderErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::ProviderErrorKind where T: core::marker::Sized
pub fn rustic_core::error::ProviderErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::ProviderErrorKind where T: core::marker::Sized
pub fn rustic_core::error::ProviderErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::ProviderErrorKind
pub fn rustic_core::error::ProviderErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::ProviderErrorKind
pub type rustic_core::error::ProviderErrorKind::Init = T
pub const rustic_core::error::ProviderErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::ProviderErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::ProviderErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::ProviderErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::ProviderErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::ProviderErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::ProviderErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::ProviderErrorKind
pub type rustic_core::error::ProviderErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::ProviderErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::ProviderErrorKind::vzip(self) -> V
pub enum rustic_core::error::RepositoryErrorKind
pub rustic_core::error::RepositoryErrorKind::AccessToConfigFileFailed
pub rustic_core::error::RepositoryErrorKind::ConfigFileExists
pub rustic_core::error::RepositoryErrorKind::FromSplitError(shell_words::ParseError)
pub rustic_core::error::RepositoryErrorKind::FromThreadPoolbilderError(rayon_core::ThreadPoolBuildError)
pub rustic_core::error::RepositoryErrorKind::HotRepositoryFlagMissing
pub rustic_core::error::RepositoryErrorKind::IdNotFound(rustic_core::id::Id)
pub rustic_core::error::RepositoryErrorKind::IncorrectPassword
pub rustic_core::error::RepositoryErrorKind::IsNotHotRepository
pub rustic_core::error::RepositoryErrorKind::KeysDontMatchForRepositories(alloc::string::String)
pub rustic_core::error::RepositoryErrorKind::ListingHotRepositoryKeysFailed
pub rustic_core::error::RepositoryErrorKind::ListingRepositoryConfigFileFailed
pub rustic_core::error::RepositoryErrorKind::ListingRepositoryKeysFailed
pub rustic_core::error::RepositoryErrorKind::MoreThanOneRepositoryConfig(alloc::string::String)
pub rustic_core::error::RepositoryErrorKind::NoIDSpecified
pub rustic_core::error::RepositoryErrorKind::NoPasswordGiven
pub rustic_core::error::RepositoryErrorKind::NoRepositoryConfigFound(alloc::string::String)
pub rustic_core::error::RepositoryErrorKind::NoRepositoryGiven
pub rustic_core::error::RepositoryErrorKind::OpeningPasswordFileFailed(std::io::error::Error)
pub rustic_core::error::RepositoryErrorKind::PasswordCommandParsingFailed
pub rustic_core::error::RepositoryErrorKind::ReadingPasswordFromCommandFailed
pub rustic_core::error::RepositoryErrorKind::ReadingPasswordFromPromptFailed(std::io::error::Error)
pub rustic_core::error::RepositoryErrorKind::ReadingPasswordFromReaderFailed(std::io::error::Error)
impl core::convert::From<rustic_core::error::RepositoryErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::RepositoryErrorKind) -> Self
impl core::convert::From<shell_words::ParseError> for rustic_core::error::RepositoryErrorKind
pub fn rustic_core::error::RepositoryErrorKind::from(source: shell_words::ParseError) -> Self
impl core::error::Error for rustic_core::error::RepositoryErrorKind
pub fn rustic_core::error::RepositoryErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::RepositoryErrorKind
pub fn rustic_core::error::RepositoryErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::RepositoryErrorKind
impl core::fmt::Debug for rustic_core::error::RepositoryErrorKind
pub fn rustic_core::error::RepositoryErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::RepositoryErrorKind
impl core::marker::Sync for rustic_core::error::RepositoryErrorKind
impl core::marker::Unpin for rustic_core::error::RepositoryErrorKind
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::RepositoryErrorKind
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::RepositoryErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::RepositoryErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::RepositoryErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::RepositoryErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::RepositoryErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::RepositoryErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::RepositoryErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::RepositoryErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::RepositoryErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::RepositoryErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::RepositoryErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::RepositoryErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::RepositoryErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::RepositoryErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::RepositoryErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::RepositoryErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::RepositoryErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::RepositoryErrorKind where T: core::marker::Sized
pub fn rustic_core::error::RepositoryErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::RepositoryErrorKind where T: core::marker::Sized
pub fn rustic_core::error::RepositoryErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::RepositoryErrorKind
pub fn rustic_core::error::RepositoryErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::RepositoryErrorKind
pub type rustic_core::error::RepositoryErrorKind::Init = T
pub const rustic_core::error::RepositoryErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::RepositoryErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::RepositoryErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::RepositoryErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::RepositoryErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::RepositoryErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::RepositoryErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::RepositoryErrorKind
pub type rustic_core::error::RepositoryErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::RepositoryErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::RepositoryErrorKind::vzip(self) -> V
pub enum rustic_core::error::RestErrorKind
pub rustic_core::error::RestErrorKind::BackoffError(backoff::error::Error<reqwest::error::Error>)
pub rustic_core::error::RestErrorKind::BuildingClientFailed(reqwest::error::Error)
pub rustic_core::error::RestErrorKind::CouldNotParseDuration(humantime::duration::Error)
pub rustic_core::error::RestErrorKind::JoiningUrlFailed(url::parser::ParseError)
pub rustic_core::error::RestErrorKind::NotSupportedForRetry(alloc::string::String)
pub rustic_core::error::RestErrorKind::RequestingResourceFailed(reqwest::error::Error)
pub rustic_core::error::RestErrorKind::UrlParsingFailed(url::parser::ParseError)
impl core::convert::From<backoff::error::Error<reqwest::error::Error>> for rustic_core::error::RestErrorKind
pub fn rustic_core::error::RestErrorKind::from(source: backoff::error::Error<reqwest::error::Error>) -> Self
impl core::convert::From<humantime::duration::Error> for rustic_core::error::RestErrorKind
pub fn rustic_core::error::RestErrorKind::from(source: humantime::duration::Error) -> Self
impl core::convert::From<reqwest::error::Error> for rustic_core::error::RestErrorKind
pub fn rustic_core::error::RestErrorKind::from(source: reqwest::error::Error) -> Self
impl core::convert::From<rustic_core::error::RestErrorKind> for rustic_core::error::BackendErrorKind
pub fn rustic_core::error::BackendErrorKind::from(source: rustic_core::error::RestErrorKind) -> Self
impl core::convert::From<rustic_core::error::RestErrorKind> for rustic_core::error::ProviderErrorKind
pub fn rustic_core::error::ProviderErrorKind::from(source: rustic_core::error::RestErrorKind) -> Self
impl core::convert::From<rustic_core::error::RestErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::RestErrorKind) -> Self
impl core::convert::From<url::parser::ParseError> for rustic_core::error::RestErrorKind
pub fn rustic_core::error::RestErrorKind::from(source: url::parser::ParseError) -> Self
impl core::error::Error for rustic_core::error::RestErrorKind
pub fn rustic_core::error::RestErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::RestErrorKind
pub fn rustic_core::error::RestErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::RestErrorKind
impl core::fmt::Debug for rustic_core::error::RestErrorKind
pub fn rustic_core::error::RestErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::RestErrorKind
impl core::marker::Sync for rustic_core::error::RestErrorKind
impl core::marker::Unpin for rustic_core::error::RestErrorKind
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::RestErrorKind
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::RestErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::RestErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::RestErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::RestErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::RestErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::RestErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::RestErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::RestErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::RestErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::RestErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::RestErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::RestErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::RestErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::RestErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::RestErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::RestErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::RestErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::RestErrorKind where T: core::marker::Sized
pub fn rustic_core::error::RestErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::RestErrorKind where T: core::marker::Sized
pub fn rustic_core::error::RestErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::RestErrorKind
pub fn rustic_core::error::RestErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::RestErrorKind
pub type rustic_core::error::RestErrorKind::Init = T
pub const rustic_core::error::RestErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::RestErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::RestErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::RestErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::RestErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::RestErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::RestErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::RestErrorKind
pub type rustic_core::error::RestErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::RestErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::RestErrorKind::vzip(self) -> V
#[non_exhaustive] pub enum rustic_core::error::RusticErrorKind
pub rustic_core::error::RusticErrorKind::ArchiverError(rustic_core::error::ArchiverErrorKind)
pub rustic_core::error::RusticErrorKind::Backend(rustic_core::error::BackendErrorKind)
pub rustic_core::error::RusticErrorKind::CacheBackend(rustic_core::error::CacheBackendErrorKind)
pub rustic_core::error::RusticErrorKind::Command(rustic_core::error::CommandErrorKind)
pub rustic_core::error::RusticErrorKind::ConfigFile(rustic_core::error::ConfigFileErrorKind)
pub rustic_core::error::RusticErrorKind::CryptBackend(rustic_core::error::CryptBackendErrorKind)
pub rustic_core::error::RusticErrorKind::Crypto(rustic_core::error::CryptoErrorKind)
pub rustic_core::error::RusticErrorKind::File(rustic_core::error::FileErrorKind)
pub rustic_core::error::RusticErrorKind::Id(rustic_core::error::IdErrorKind)
pub rustic_core::error::RusticErrorKind::Ignore(rustic_core::error::IgnoreErrorKind)
pub rustic_core::error::RusticErrorKind::Index(rustic_core::error::IndexErrorKind)
pub rustic_core::error::RusticErrorKind::KeyFile(rustic_core::error::KeyFileErrorKind)
pub rustic_core::error::RusticErrorKind::Local(rustic_core::error::LocalErrorKind)
pub rustic_core::error::RusticErrorKind::Node(rustic_core::error::NodeErrorKind)
pub rustic_core::error::RusticErrorKind::PackFile(rustic_core::error::PackFileErrorKind)
pub rustic_core::error::RusticErrorKind::Packer(rustic_core::error::PackerErrorKind)
pub rustic_core::error::RusticErrorKind::Polynomial(rustic_core::error::PolynomialErrorKind)
pub rustic_core::error::RusticErrorKind::Provider(rustic_core::error::ProviderErrorKind)
pub rustic_core::error::RusticErrorKind::Repository(rustic_core::error::RepositoryErrorKind)
pub rustic_core::error::RusticErrorKind::Rest(rustic_core::error::RestErrorKind)
pub rustic_core::error::RusticErrorKind::SnapshotFile(rustic_core::error::SnapshotFileErrorKind)
pub rustic_core::error::RusticErrorKind::StdIn(rustic_core::error::StdInErrorKind)
pub rustic_core::error::RusticErrorKind::StdIo(std::io::error::Error)
pub rustic_core::error::RusticErrorKind::Tree(rustic_core::error::TreeErrorKind)
impl core::convert::From<rustic_core::error::ArchiverErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::ArchiverErrorKind) -> Self
impl core::convert::From<rustic_core::error::BackendErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::BackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::CacheBackendErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::CacheBackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::CommandErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::CommandErrorKind) -> Self
impl core::convert::From<rustic_core::error::ConfigFileErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::ConfigFileErrorKind) -> Self
impl core::convert::From<rustic_core::error::CryptBackendErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::CryptBackendErrorKind) -> Self
impl core::convert::From<rustic_core::error::CryptoErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::CryptoErrorKind) -> Self
impl core::convert::From<rustic_core::error::FileErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::FileErrorKind) -> Self
impl core::convert::From<rustic_core::error::IdErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::IdErrorKind) -> Self
impl core::convert::From<rustic_core::error::IgnoreErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::IgnoreErrorKind) -> Self
impl core::convert::From<rustic_core::error::IndexErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::IndexErrorKind) -> Self
impl core::convert::From<rustic_core::error::KeyFileErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::KeyFileErrorKind) -> Self
impl core::convert::From<rustic_core::error::LocalErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::LocalErrorKind) -> Self
impl core::convert::From<rustic_core::error::NodeErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::NodeErrorKind) -> Self
impl core::convert::From<rustic_core::error::PackFileErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::PackFileErrorKind) -> Self
impl core::convert::From<rustic_core::error::PackerErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::PackerErrorKind) -> Self
impl core::convert::From<rustic_core::error::PolynomialErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::PolynomialErrorKind) -> Self
impl core::convert::From<rustic_core::error::ProviderErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::ProviderErrorKind) -> Self
impl core::convert::From<rustic_core::error::RepositoryErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::RepositoryErrorKind) -> Self
impl core::convert::From<rustic_core::error::RestErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::RestErrorKind) -> Self
impl core::convert::From<rustic_core::error::RusticErrorKind> for rustic_core::error::RusticError
pub fn rustic_core::error::RusticError::from(source: rustic_core::error::RusticErrorKind) -> Self
impl core::convert::From<rustic_core::error::SnapshotFileErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::SnapshotFileErrorKind) -> Self
impl core::convert::From<rustic_core::error::StdInErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::StdInErrorKind) -> Self
impl core::convert::From<rustic_core::error::TreeErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::TreeErrorKind) -> Self
impl core::convert::From<std::io::error::Error> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: std::io::error::Error) -> Self
impl core::error::Error for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Debug for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::RusticErrorKind
impl core::marker::Sync for rustic_core::error::RusticErrorKind
impl core::marker::Unpin for rustic_core::error::RusticErrorKind
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::RusticErrorKind
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::RusticErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::RusticErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::RusticErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::RusticErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::RusticErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::RusticErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::RusticErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::RusticErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::RusticErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::RusticErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::RusticErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::RusticErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::RusticErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::RusticErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::RusticErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::RusticErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::RusticErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::RusticErrorKind where T: core::marker::Sized
pub fn rustic_core::error::RusticErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::RusticErrorKind where T: core::marker::Sized
pub fn rustic_core::error::RusticErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::RusticErrorKind
pub type rustic_core::error::RusticErrorKind::Init = T
pub const rustic_core::error::RusticErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::RusticErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::RusticErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::RusticErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::RusticErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::RusticErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::RusticErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::RusticErrorKind
pub type rustic_core::error::RusticErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::RusticErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::RusticErrorKind::vzip(self) -> V
pub enum rustic_core::error::SnapshotFileErrorKind
pub rustic_core::error::SnapshotFileErrorKind::CanonicalizingPathFailed(std::io::error::Error)
pub rustic_core::error::SnapshotFileErrorKind::FindingIdsFailed(alloc::vec::Vec<alloc::string::String>)
pub rustic_core::error::SnapshotFileErrorKind::FromSplitError(shell_words::ParseError)
pub rustic_core::error::SnapshotFileErrorKind::GettingSnapshotFileByIdFailed
pub rustic_core::error::SnapshotFileErrorKind::GettingSnapshotFileFailed
pub rustic_core::error::SnapshotFileErrorKind::NoSnapshotsFound
pub rustic_core::error::SnapshotFileErrorKind::NonUnicodeHostname(std::ffi::os_str::OsString)
pub rustic_core::error::SnapshotFileErrorKind::NonUnicodePath(std::path::PathBuf)
pub rustic_core::error::SnapshotFileErrorKind::OutOfRange(chrono::duration::OutOfRangeError)
pub rustic_core::error::SnapshotFileErrorKind::ReadingDescriptionFailed(std::io::error::Error)
pub rustic_core::error::SnapshotFileErrorKind::RemovingDotsFromPathFailed(std::io::error::Error)
pub rustic_core::error::SnapshotFileErrorKind::UnpackingSnapshotFileResultFailed
pub rustic_core::error::SnapshotFileErrorKind::ValueNotAllowed(alloc::string::String)
impl core::convert::From<chrono::duration::OutOfRangeError> for rustic_core::error::SnapshotFileErrorKind
pub fn rustic_core::error::SnapshotFileErrorKind::from(source: chrono::duration::OutOfRangeError) -> Self
impl core::convert::From<rustic_core::error::SnapshotFileErrorKind> for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::from(source: rustic_core::error::SnapshotFileErrorKind) -> Self
impl core::convert::From<rustic_core::error::SnapshotFileErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::SnapshotFileErrorKind) -> Self
impl core::convert::From<shell_words::ParseError> for rustic_core::error::SnapshotFileErrorKind
pub fn rustic_core::error::SnapshotFileErrorKind::from(source: shell_words::ParseError) -> Self
impl core::convert::From<std::io::error::Error> for rustic_core::error::SnapshotFileErrorKind
pub fn rustic_core::error::SnapshotFileErrorKind::from(source: std::io::error::Error) -> Self
impl core::error::Error for rustic_core::error::SnapshotFileErrorKind
pub fn rustic_core::error::SnapshotFileErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::SnapshotFileErrorKind
pub fn rustic_core::error::SnapshotFileErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::SnapshotFileErrorKind
impl core::fmt::Debug for rustic_core::error::SnapshotFileErrorKind
pub fn rustic_core::error::SnapshotFileErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::SnapshotFileErrorKind
impl core::marker::Sync for rustic_core::error::SnapshotFileErrorKind
impl core::marker::Unpin for rustic_core::error::SnapshotFileErrorKind
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::SnapshotFileErrorKind
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::SnapshotFileErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::SnapshotFileErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::SnapshotFileErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::SnapshotFileErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::SnapshotFileErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::SnapshotFileErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::SnapshotFileErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::SnapshotFileErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::SnapshotFileErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::SnapshotFileErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::SnapshotFileErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::SnapshotFileErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::SnapshotFileErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::SnapshotFileErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::SnapshotFileErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::SnapshotFileErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::SnapshotFileErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::SnapshotFileErrorKind where T: core::marker::Sized
pub fn rustic_core::error::SnapshotFileErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::SnapshotFileErrorKind where T: core::marker::Sized
pub fn rustic_core::error::SnapshotFileErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::SnapshotFileErrorKind
pub fn rustic_core::error::SnapshotFileErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::SnapshotFileErrorKind
pub type rustic_core::error::SnapshotFileErrorKind::Init = T
pub const rustic_core::error::SnapshotFileErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::SnapshotFileErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::SnapshotFileErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::SnapshotFileErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::SnapshotFileErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::SnapshotFileErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::SnapshotFileErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::SnapshotFileErrorKind
pub type rustic_core::error::SnapshotFileErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::SnapshotFileErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::SnapshotFileErrorKind::vzip(self) -> V
pub enum rustic_core::error::StdInErrorKind
pub rustic_core::error::StdInErrorKind::StdInError(std::io::error::Error)
impl core::convert::From<rustic_core::error::StdInErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::StdInErrorKind) -> Self
impl core::convert::From<std::io::error::Error> for rustic_core::error::StdInErrorKind
pub fn rustic_core::error::StdInErrorKind::from(source: std::io::error::Error) -> Self
impl core::error::Error for rustic_core::error::StdInErrorKind
pub fn rustic_core::error::StdInErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::StdInErrorKind
pub fn rustic_core::error::StdInErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::StdInErrorKind
impl core::fmt::Debug for rustic_core::error::StdInErrorKind
pub fn rustic_core::error::StdInErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::StdInErrorKind
impl core::marker::Sync for rustic_core::error::StdInErrorKind
impl core::marker::Unpin for rustic_core::error::StdInErrorKind
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::StdInErrorKind
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::StdInErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::StdInErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::StdInErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::StdInErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::StdInErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::StdInErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::StdInErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::StdInErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::StdInErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::StdInErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::StdInErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::StdInErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::StdInErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::StdInErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::StdInErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::StdInErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::StdInErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::StdInErrorKind where T: core::marker::Sized
pub fn rustic_core::error::StdInErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::StdInErrorKind where T: core::marker::Sized
pub fn rustic_core::error::StdInErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::StdInErrorKind
pub fn rustic_core::error::StdInErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::StdInErrorKind
pub type rustic_core::error::StdInErrorKind::Init = T
pub const rustic_core::error::StdInErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::StdInErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::StdInErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::StdInErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::StdInErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::StdInErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::StdInErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::StdInErrorKind
pub type rustic_core::error::StdInErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::StdInErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::StdInErrorKind::vzip(self) -> V
pub enum rustic_core::error::TreeErrorKind
pub rustic_core::error::TreeErrorKind::BlobIdNotFound(rustic_core::id::Id)
pub rustic_core::error::TreeErrorKind::BuildingNodeStreamerFailed(ignore::Error)
pub rustic_core::error::TreeErrorKind::ContainsCurrentOrParentDirectory
pub rustic_core::error::TreeErrorKind::DeserializingTreeFailed(serde_json::error::Error)
pub rustic_core::error::TreeErrorKind::NotADirectory(std::ffi::os_str::OsString)
pub rustic_core::error::TreeErrorKind::PathIsNotUtf8Conform(core::str::error::Utf8Error)
pub rustic_core::error::TreeErrorKind::PathNotFound(std::ffi::os_str::OsString)
pub rustic_core::error::TreeErrorKind::ReadingBlobDataFailed(rustic_core::error::IndexErrorKind)
pub rustic_core::error::TreeErrorKind::ReadingFileStringFromGlobsFailed(std::io::error::Error)
pub rustic_core::error::TreeErrorKind::ReceivingCrossbreamMessageFailed(crossbeam_channel::err::RecvError)
pub rustic_core::error::TreeErrorKind::SendingCrossbeamMessageFailed(crossbeam_channel::err::SendError<(std::path::PathBuf, rustic_core::id::Id, usize)>)
pub rustic_core::error::TreeErrorKind::SerializingTreeFailed(serde_json::error::Error)
impl core::convert::From<core::str::error::Utf8Error> for rustic_core::error::TreeErrorKind
pub fn rustic_core::error::TreeErrorKind::from(source: core::str::error::Utf8Error) -> Self
impl core::convert::From<crossbeam_channel::err::RecvError> for rustic_core::error::TreeErrorKind
pub fn rustic_core::error::TreeErrorKind::from(source: crossbeam_channel::err::RecvError) -> Self
impl core::convert::From<crossbeam_channel::err::SendError<(std::path::PathBuf, rustic_core::id::Id, usize)>> for rustic_core::error::TreeErrorKind
pub fn rustic_core::error::TreeErrorKind::from(source: crossbeam_channel::err::SendError<(std::path::PathBuf, rustic_core::id::Id, usize)>) -> Self
impl core::convert::From<ignore::Error> for rustic_core::error::TreeErrorKind
pub fn rustic_core::error::TreeErrorKind::from(source: ignore::Error) -> Self
impl core::convert::From<rustic_core::error::IndexErrorKind> for rustic_core::error::TreeErrorKind
pub fn rustic_core::error::TreeErrorKind::from(source: rustic_core::error::IndexErrorKind) -> Self
impl core::convert::From<rustic_core::error::TreeErrorKind> for rustic_core::error::ArchiverErrorKind
pub fn rustic_core::error::ArchiverErrorKind::from(source: rustic_core::error::TreeErrorKind) -> Self
impl core::convert::From<rustic_core::error::TreeErrorKind> for rustic_core::error::RusticErrorKind
pub fn rustic_core::error::RusticErrorKind::from(source: rustic_core::error::TreeErrorKind) -> Self
impl core::convert::From<serde_json::error::Error> for rustic_core::error::TreeErrorKind
pub fn rustic_core::error::TreeErrorKind::from(source: serde_json::error::Error) -> Self
impl core::convert::From<std::io::error::Error> for rustic_core::error::TreeErrorKind
pub fn rustic_core::error::TreeErrorKind::from(source: std::io::error::Error) -> Self
impl core::error::Error for rustic_core::error::TreeErrorKind
pub fn rustic_core::error::TreeErrorKind::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::TreeErrorKind
pub fn rustic_core::error::TreeErrorKind::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl rustic_core::error::RusticErrorMarker for rustic_core::error::TreeErrorKind
impl core::fmt::Debug for rustic_core::error::TreeErrorKind
pub fn rustic_core::error::TreeErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::TreeErrorKind
impl core::marker::Sync for rustic_core::error::TreeErrorKind
impl core::marker::Unpin for rustic_core::error::TreeErrorKind
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::TreeErrorKind
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::TreeErrorKind
impl<T, U> core::convert::Into<U> for rustic_core::error::TreeErrorKind where U: core::convert::From<T>
pub fn rustic_core::error::TreeErrorKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::TreeErrorKind where U: core::convert::Into<T>
pub type rustic_core::error::TreeErrorKind::Error = core::convert::Infallible
pub fn rustic_core::error::TreeErrorKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::TreeErrorKind where U: core::convert::TryFrom<T>
pub type rustic_core::error::TreeErrorKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::TreeErrorKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::TreeErrorKind where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::TreeErrorKind::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::TreeErrorKind where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::TreeErrorKind::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::TreeErrorKind::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::TreeErrorKind::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::TreeErrorKind where T: 'static + core::marker::Sized
pub fn rustic_core::error::TreeErrorKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::TreeErrorKind where T: core::marker::Sized
pub fn rustic_core::error::TreeErrorKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::TreeErrorKind where T: core::marker::Sized
pub fn rustic_core::error::TreeErrorKind::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::TreeErrorKind
pub fn rustic_core::error::TreeErrorKind::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::TreeErrorKind
pub type rustic_core::error::TreeErrorKind::Init = T
pub const rustic_core::error::TreeErrorKind::ALIGN: usize
pub unsafe fn rustic_core::error::TreeErrorKind::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::TreeErrorKind::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::TreeErrorKind::drop(ptr: usize)
pub unsafe fn rustic_core::error::TreeErrorKind::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::TreeErrorKind
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::TreeErrorKind
impl<T> typenum::type_operators::Same<T> for rustic_core::error::TreeErrorKind
pub type rustic_core::error::TreeErrorKind::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::TreeErrorKind where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::TreeErrorKind::vzip(self) -> V
pub struct rustic_core::error::RusticError(pub rustic_core::error::RusticErrorKind)
impl rustic_core::error::RusticError
pub fn rustic_core::error::RusticError::into_inner(self) -> rustic_core::error::RusticErrorKind
impl core::convert::From<rustic_core::error::RusticErrorKind> for rustic_core::error::RusticError
pub fn rustic_core::error::RusticError::from(source: rustic_core::error::RusticErrorKind) -> Self
impl core::error::Error for rustic_core::error::RusticError
pub fn rustic_core::error::RusticError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::RusticError
pub fn rustic_core::error::RusticError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<E> core::convert::From<E> for rustic_core::error::RusticError where E: rustic_core::error::RusticErrorMarker, rustic_core::error::RusticErrorKind: core::convert::From<E>
pub fn rustic_core::error::RusticError::from(value: E) -> Self
impl core::fmt::Debug for rustic_core::error::RusticError
pub fn rustic_core::error::RusticError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::RusticError
impl core::marker::Sync for rustic_core::error::RusticError
impl core::marker::Unpin for rustic_core::error::RusticError
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::RusticError
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::RusticError
impl<T, U> core::convert::Into<U> for rustic_core::error::RusticError where U: core::convert::From<T>
pub fn rustic_core::error::RusticError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::RusticError where U: core::convert::Into<T>
pub type rustic_core::error::RusticError::Error = core::convert::Infallible
pub fn rustic_core::error::RusticError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::RusticError where U: core::convert::TryFrom<T>
pub type rustic_core::error::RusticError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::RusticError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::RusticError where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::RusticError::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::RusticError where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::RusticError::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::RusticError::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::RusticError::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::RusticError where T: 'static + core::marker::Sized
pub fn rustic_core::error::RusticError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::RusticError where T: core::marker::Sized
pub fn rustic_core::error::RusticError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::RusticError where T: core::marker::Sized
pub fn rustic_core::error::RusticError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::RusticError
pub fn rustic_core::error::RusticError::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::RusticError
pub type rustic_core::error::RusticError::Init = T
pub const rustic_core::error::RusticError::ALIGN: usize
pub unsafe fn rustic_core::error::RusticError::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::RusticError::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::RusticError::drop(ptr: usize)
pub unsafe fn rustic_core::error::RusticError::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::RusticError
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::RusticError
impl<T> typenum::type_operators::Same<T> for rustic_core::error::RusticError
pub type rustic_core::error::RusticError::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::RusticError where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::RusticError::vzip(self) -> V
pub const rustic_core::error::_DERIVE_Display_FOR_ArchiverErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_BackendErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_CacheBackendErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_CommandErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_ConfigFileErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_CryptBackendErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_CryptoErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_FileErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_IdErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_IgnoreErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_IndexErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_KeyFileErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_LocalErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_NodeErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_PackFileErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_PackerErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_PolynomialErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_ProviderErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_RepositoryErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_RestErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_SnapshotFileErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_StdInErrorKind: _
pub const rustic_core::error::_DERIVE_Display_FOR_TreeErrorKind: _
pub trait rustic_core::error::RusticErrorMarker: core::error::Error
impl rustic_core::error::RusticErrorMarker for rustic_core::error::ArchiverErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::BackendErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::CacheBackendErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::CommandErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::ConfigFileErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::CryptBackendErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::CryptoErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::FileErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::IdErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::IgnoreErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::IndexErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::KeyFileErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::LocalErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::NodeErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::PackFileErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::PackerErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::PolynomialErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::ProviderErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::RepositoryErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::RestErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::SnapshotFileErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::StdInErrorKind
impl rustic_core::error::RusticErrorMarker for rustic_core::error::TreeErrorKind
impl rustic_core::error::RusticErrorMarker for std::io::error::Error
pub type rustic_core::error::RusticResult<T> = core::result::Result<T, rustic_core::error::RusticError>
pub mod rustic_core::id
pub mod rustic_core::id::constants
pub const rustic_core::id::constants::HEX_LEN: _
pub const rustic_core::id::constants::LEN: usize = 32usize
pub struct rustic_core::id::HexId(pub [u8; 64])
impl rustic_core::id::HexId
pub const rustic_core::id::HexId::EMPTY: Self
pub fn rustic_core::id::HexId::as_str(&self) -> &str
impl core::convert::AsRef<std::path::Path> for rustic_core::id::HexId
pub fn rustic_core::id::HexId::as_ref(&self) -> &std::path::Path
impl core::ops::deref::Deref for rustic_core::id::HexId
pub type rustic_core::id::HexId::Target = str
pub fn rustic_core::id::HexId::deref(&self) -> &Self::Target
impl core::clone::Clone for rustic_core::id::HexId
pub fn rustic_core::id::HexId::clone(&self) -> rustic_core::id::HexId
impl core::fmt::Debug for rustic_core::id::HexId
pub fn rustic_core::id::HexId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::id::HexId
impl core::marker::Send for rustic_core::id::HexId
impl core::marker::Sync for rustic_core::id::HexId
impl core::marker::Unpin for rustic_core::id::HexId
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::id::HexId
impl core::panic::unwind_safe::UnwindSafe for rustic_core::id::HexId
impl<T, U> core::convert::Into<U> for rustic_core::id::HexId where U: core::convert::From<T>
pub fn rustic_core::id::HexId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::id::HexId where U: core::convert::Into<T>
pub type rustic_core::id::HexId::Error = core::convert::Infallible
pub fn rustic_core::id::HexId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::id::HexId where U: core::convert::TryFrom<T>
pub type rustic_core::id::HexId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::id::HexId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::id::HexId where T: core::clone::Clone
pub type rustic_core::id::HexId::Owned = T
pub fn rustic_core::id::HexId::clone_into(&self, target: &mut T)
pub fn rustic_core::id::HexId::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::id::HexId where T: 'static + core::marker::Sized
pub fn rustic_core::id::HexId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::id::HexId where T: core::marker::Sized
pub fn rustic_core::id::HexId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::id::HexId where T: core::marker::Sized
pub fn rustic_core::id::HexId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::id::HexId
pub fn rustic_core::id::HexId::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::id::HexId
pub type rustic_core::id::HexId::Init = T
pub const rustic_core::id::HexId::ALIGN: usize
pub unsafe fn rustic_core::id::HexId::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::id::HexId::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::id::HexId::drop(ptr: usize)
pub unsafe fn rustic_core::id::HexId::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::id::HexId
impl<T> tracing::instrument::WithSubscriber for rustic_core::id::HexId
impl<T> typenum::type_operators::Same<T> for rustic_core::id::HexId
pub type rustic_core::id::HexId::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::id::HexId where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::id::HexId::vzip(self) -> V
pub struct rustic_core::id::Id(pub [u8; 32])
impl rustic_core::id::Id
pub fn rustic_core::id::Id::blob_matches_reader(&self, length: usize, r: &mut impl std::io::Read) -> bool
pub fn rustic_core::id::Id::from_hex(s: &str) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::id::Id::is_null(&self) -> bool
pub fn rustic_core::id::Id::random() -> Self
pub fn rustic_core::id::Id::to_hex(self) -> rustic_core::id::HexId
impl rustic_core::id::Id
pub fn rustic_core::id::Id::new(__0: [u8; 32]) -> rustic_core::id::Id
impl core::fmt::Debug for rustic_core::id::Id
pub fn rustic_core::id::Id::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for rustic_core::id::Id
pub fn rustic_core::id::Id::fmt(&self, _derive_more_display_formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl binrw::binread::BinRead for rustic_core::id::Id
pub type rustic_core::id::Id::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::id::Id::read_options<R: std::io::Read + std::io::Seek>(__binrw_generated_var_reader: &mut R, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<Self>
impl binrw::binwrite::BinWrite for rustic_core::id::Id
pub type rustic_core::id::Id::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::id::Id::write_options<W: std::io::Write + std::io::Seek>(&self, __binrw_generated_var_writer: &mut W, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<()>
impl core::clone::Clone for rustic_core::id::Id
pub fn rustic_core::id::Id::clone(&self) -> rustic_core::id::Id
impl core::cmp::Eq for rustic_core::id::Id
impl core::cmp::Ord for rustic_core::id::Id
pub fn rustic_core::id::Id::cmp(&self, other: &rustic_core::id::Id) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::id::Id> for rustic_core::id::Id
pub fn rustic_core::id::Id::eq(&self, other: &rustic_core::id::Id) -> bool
impl core::cmp::PartialOrd<rustic_core::id::Id> for rustic_core::id::Id
pub fn rustic_core::id::Id::partial_cmp(&self, other: &rustic_core::id::Id) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::id::Id
pub fn rustic_core::id::Id::default() -> rustic_core::id::Id
impl core::hash::Hash for rustic_core::id::Id
pub fn rustic_core::id::Id::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::Copy for rustic_core::id::Id
impl core::marker::StructuralEq for rustic_core::id::Id
impl core::marker::StructuralPartialEq for rustic_core::id::Id
impl serde::ser::Serialize for rustic_core::id::Id
pub fn rustic_core::id::Id::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::id::Id
pub fn rustic_core::id::Id::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::id::Id
impl core::marker::Sync for rustic_core::id::Id
impl core::marker::Unpin for rustic_core::id::Id
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::id::Id
impl core::panic::unwind_safe::UnwindSafe for rustic_core::id::Id
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::id::Id where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::id::Id::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::id::Id where U: core::convert::From<T>
pub fn rustic_core::id::Id::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::id::Id where U: core::convert::Into<T>
pub type rustic_core::id::Id::Error = core::convert::Infallible
pub fn rustic_core::id::Id::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::id::Id where U: core::convert::TryFrom<T>
pub type rustic_core::id::Id::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::id::Id::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::id::Id where T: core::clone::Clone
pub type rustic_core::id::Id::Owned = T
pub fn rustic_core::id::Id::clone_into(&self, target: &mut T)
pub fn rustic_core::id::Id::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::id::Id where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::id::Id::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::id::Id where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::id::Id::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::id::Id::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::id::Id::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::id::Id where T: 'static + core::marker::Sized
pub fn rustic_core::id::Id::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::id::Id where T: core::marker::Sized
pub fn rustic_core::id::Id::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::id::Id where T: core::marker::Sized
pub fn rustic_core::id::Id::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::id::Id
pub fn rustic_core::id::Id::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::id::Id
pub type rustic_core::id::Id::Init = T
pub const rustic_core::id::Id::ALIGN: usize
pub unsafe fn rustic_core::id::Id::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::id::Id::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::id::Id::drop(ptr: usize)
pub unsafe fn rustic_core::id::Id::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::id::Id where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::id::Id
impl<T> tracing::instrument::WithSubscriber for rustic_core::id::Id
impl<T> typenum::type_operators::Same<T> for rustic_core::id::Id
pub type rustic_core::id::Id::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::id::Id where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::id::Id::vzip(self) -> V
pub mod rustic_core::index
pub mod rustic_core::index::binarysorted
pub enum rustic_core::index::binarysorted::EntriesVariants
pub rustic_core::index::binarysorted::EntriesVariants::FullEntries(alloc::vec::Vec<rustic_core::index::binarysorted::SortedEntry>)
pub rustic_core::index::binarysorted::EntriesVariants::Ids(alloc::vec::Vec<rustic_core::id::Id>)
pub rustic_core::index::binarysorted::EntriesVariants::None
impl core::default::Default for rustic_core::index::binarysorted::EntriesVariants
pub fn rustic_core::index::binarysorted::EntriesVariants::default() -> Self
impl core::fmt::Debug for rustic_core::index::binarysorted::EntriesVariants
pub fn rustic_core::index::binarysorted::EntriesVariants::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::index::binarysorted::EntriesVariants
impl core::marker::Sync for rustic_core::index::binarysorted::EntriesVariants
impl core::marker::Unpin for rustic_core::index::binarysorted::EntriesVariants
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::index::binarysorted::EntriesVariants
impl core::panic::unwind_safe::UnwindSafe for rustic_core::index::binarysorted::EntriesVariants
impl<T, U> core::convert::Into<U> for rustic_core::index::binarysorted::EntriesVariants where U: core::convert::From<T>
pub fn rustic_core::index::binarysorted::EntriesVariants::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::index::binarysorted::EntriesVariants where U: core::convert::Into<T>
pub type rustic_core::index::binarysorted::EntriesVariants::Error = core::convert::Infallible
pub fn rustic_core::index::binarysorted::EntriesVariants::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::index::binarysorted::EntriesVariants where U: core::convert::TryFrom<T>
pub type rustic_core::index::binarysorted::EntriesVariants::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::index::binarysorted::EntriesVariants::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::index::binarysorted::EntriesVariants where T: 'static + core::marker::Sized
pub fn rustic_core::index::binarysorted::EntriesVariants::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::index::binarysorted::EntriesVariants where T: core::marker::Sized
pub fn rustic_core::index::binarysorted::EntriesVariants::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::index::binarysorted::EntriesVariants where T: core::marker::Sized
pub fn rustic_core::index::binarysorted::EntriesVariants::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::index::binarysorted::EntriesVariants
pub fn rustic_core::index::binarysorted::EntriesVariants::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::index::binarysorted::EntriesVariants
pub type rustic_core::index::binarysorted::EntriesVariants::Init = T
pub const rustic_core::index::binarysorted::EntriesVariants::ALIGN: usize
pub unsafe fn rustic_core::index::binarysorted::EntriesVariants::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::index::binarysorted::EntriesVariants::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::index::binarysorted::EntriesVariants::drop(ptr: usize)
pub unsafe fn rustic_core::index::binarysorted::EntriesVariants::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::index::binarysorted::EntriesVariants
impl<T> tracing::instrument::WithSubscriber for rustic_core::index::binarysorted::EntriesVariants
impl<T> typenum::type_operators::Same<T> for rustic_core::index::binarysorted::EntriesVariants
pub type rustic_core::index::binarysorted::EntriesVariants::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::index::binarysorted::EntriesVariants where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::index::binarysorted::EntriesVariants::vzip(self) -> V
pub enum rustic_core::index::binarysorted::IndexType
pub rustic_core::index::binarysorted::IndexType::DataIds
pub rustic_core::index::binarysorted::IndexType::Full
pub rustic_core::index::binarysorted::IndexType::OnlyTrees
impl core::clone::Clone for rustic_core::index::binarysorted::IndexType
pub fn rustic_core::index::binarysorted::IndexType::clone(&self) -> rustic_core::index::binarysorted::IndexType
impl core::fmt::Debug for rustic_core::index::binarysorted::IndexType
pub fn rustic_core::index::binarysorted::IndexType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::index::binarysorted::IndexType
impl core::marker::Send for rustic_core::index::binarysorted::IndexType
impl core::marker::Sync for rustic_core::index::binarysorted::IndexType
impl core::marker::Unpin for rustic_core::index::binarysorted::IndexType
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::index::binarysorted::IndexType
impl core::panic::unwind_safe::UnwindSafe for rustic_core::index::binarysorted::IndexType
impl<T, U> core::convert::Into<U> for rustic_core::index::binarysorted::IndexType where U: core::convert::From<T>
pub fn rustic_core::index::binarysorted::IndexType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::index::binarysorted::IndexType where U: core::convert::Into<T>
pub type rustic_core::index::binarysorted::IndexType::Error = core::convert::Infallible
pub fn rustic_core::index::binarysorted::IndexType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::index::binarysorted::IndexType where U: core::convert::TryFrom<T>
pub type rustic_core::index::binarysorted::IndexType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::index::binarysorted::IndexType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::index::binarysorted::IndexType where T: core::clone::Clone
pub type rustic_core::index::binarysorted::IndexType::Owned = T
pub fn rustic_core::index::binarysorted::IndexType::clone_into(&self, target: &mut T)
pub fn rustic_core::index::binarysorted::IndexType::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::index::binarysorted::IndexType where T: 'static + core::marker::Sized
pub fn rustic_core::index::binarysorted::IndexType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::index::binarysorted::IndexType where T: core::marker::Sized
pub fn rustic_core::index::binarysorted::IndexType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::index::binarysorted::IndexType where T: core::marker::Sized
pub fn rustic_core::index::binarysorted::IndexType::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::index::binarysorted::IndexType
pub fn rustic_core::index::binarysorted::IndexType::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::index::binarysorted::IndexType
pub type rustic_core::index::binarysorted::IndexType::Init = T
pub const rustic_core::index::binarysorted::IndexType::ALIGN: usize
pub unsafe fn rustic_core::index::binarysorted::IndexType::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::index::binarysorted::IndexType::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::index::binarysorted::IndexType::drop(ptr: usize)
pub unsafe fn rustic_core::index::binarysorted::IndexType::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::index::binarysorted::IndexType
impl<T> tracing::instrument::WithSubscriber for rustic_core::index::binarysorted::IndexType
impl<T> typenum::type_operators::Same<T> for rustic_core::index::binarysorted::IndexType
pub type rustic_core::index::binarysorted::IndexType::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::index::binarysorted::IndexType where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::index::binarysorted::IndexType::vzip(self) -> V
pub struct rustic_core::index::binarysorted::Index(pub enum_map::EnumMap<rustic_core::blob::BlobType, rustic_core::index::binarysorted::TypeIndex>)
impl core::iter::traits::collect::IntoIterator for rustic_core::index::binarysorted::Index
pub type rustic_core::index::binarysorted::Index::IntoIter = rustic_core::index::binarysorted::PackIndexes
pub type rustic_core::index::binarysorted::Index::Item = rustic_core::repofile::indexfile::IndexPack
pub fn rustic_core::index::binarysorted::Index::into_iter(self) -> Self::IntoIter
impl rustic_core::index::ReadIndex for rustic_core::index::binarysorted::Index
pub fn rustic_core::index::binarysorted::Index::get_id(&self, blob_type: rustic_core::blob::BlobType, id: &rustic_core::id::Id) -> core::option::Option<rustic_core::index::IndexEntry>
pub fn rustic_core::index::binarysorted::Index::has(&self, blob_type: rustic_core::blob::BlobType, id: &rustic_core::id::Id) -> bool
pub fn rustic_core::index::binarysorted::Index::total_size(&self, blob_type: rustic_core::blob::BlobType) -> u64
impl core::fmt::Debug for rustic_core::index::binarysorted::Index
pub fn rustic_core::index::binarysorted::Index::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::index::binarysorted::Index
impl core::marker::Sync for rustic_core::index::binarysorted::Index
impl core::marker::Unpin for rustic_core::index::binarysorted::Index
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::index::binarysorted::Index
impl core::panic::unwind_safe::UnwindSafe for rustic_core::index::binarysorted::Index
impl<T, U> core::convert::Into<U> for rustic_core::index::binarysorted::Index where U: core::convert::From<T>
pub fn rustic_core::index::binarysorted::Index::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::index::binarysorted::Index where U: core::convert::Into<T>
pub type rustic_core::index::binarysorted::Index::Error = core::convert::Infallible
pub fn rustic_core::index::binarysorted::Index::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::index::binarysorted::Index where U: core::convert::TryFrom<T>
pub type rustic_core::index::binarysorted::Index::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::index::binarysorted::Index::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::index::binarysorted::Index where T: 'static + core::marker::Sized
pub fn rustic_core::index::binarysorted::Index::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::index::binarysorted::Index where T: core::marker::Sized
pub fn rustic_core::index::binarysorted::Index::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::index::binarysorted::Index where T: core::marker::Sized
pub fn rustic_core::index::binarysorted::Index::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::index::binarysorted::Index
pub fn rustic_core::index::binarysorted::Index::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::index::binarysorted::Index
pub type rustic_core::index::binarysorted::Index::Init = T
pub const rustic_core::index::binarysorted::Index::ALIGN: usize
pub unsafe fn rustic_core::index::binarysorted::Index::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::index::binarysorted::Index::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::index::binarysorted::Index::drop(ptr: usize)
pub unsafe fn rustic_core::index::binarysorted::Index::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::index::binarysorted::Index
impl<T> tracing::instrument::WithSubscriber for rustic_core::index::binarysorted::Index
impl<T> typenum::type_operators::Same<T> for rustic_core::index::binarysorted::Index
pub type rustic_core::index::binarysorted::Index::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::index::binarysorted::Index where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::index::binarysorted::Index::vzip(self) -> V
pub struct rustic_core::index::binarysorted::IndexCollector(pub enum_map::EnumMap<rustic_core::blob::BlobType, rustic_core::index::binarysorted::TypeIndexCollector>)
impl rustic_core::index::binarysorted::IndexCollector
pub fn rustic_core::index::binarysorted::IndexCollector::data_packs(&self) -> &alloc::vec::Vec<(rustic_core::id::Id, u32)>
pub fn rustic_core::index::binarysorted::IndexCollector::into_index(self) -> rustic_core::index::binarysorted::Index
pub fn rustic_core::index::binarysorted::IndexCollector::new(tpe: rustic_core::index::binarysorted::IndexType) -> Self
pub fn rustic_core::index::binarysorted::IndexCollector::tree_packs(&self) -> &alloc::vec::Vec<(rustic_core::id::Id, u32)>
impl core::iter::traits::collect::Extend<rustic_core::repofile::indexfile::IndexPack> for rustic_core::index::binarysorted::IndexCollector
pub fn rustic_core::index::binarysorted::IndexCollector::extend<T>(&mut self, iter: T) where T: core::iter::traits::collect::IntoIterator<Item = rustic_core::repofile::indexfile::IndexPack>
impl core::default::Default for rustic_core::index::binarysorted::IndexCollector
pub fn rustic_core::index::binarysorted::IndexCollector::default() -> rustic_core::index::binarysorted::IndexCollector
impl core::fmt::Debug for rustic_core::index::binarysorted::IndexCollector
pub fn rustic_core::index::binarysorted::IndexCollector::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::index::binarysorted::IndexCollector
impl core::marker::Sync for rustic_core::index::binarysorted::IndexCollector
impl core::marker::Unpin for rustic_core::index::binarysorted::IndexCollector
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::index::binarysorted::IndexCollector
impl core::panic::unwind_safe::UnwindSafe for rustic_core::index::binarysorted::IndexCollector
impl<T, U> core::convert::Into<U> for rustic_core::index::binarysorted::IndexCollector where U: core::convert::From<T>
pub fn rustic_core::index::binarysorted::IndexCollector::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::index::binarysorted::IndexCollector where U: core::convert::Into<T>
pub type rustic_core::index::binarysorted::IndexCollector::Error = core::convert::Infallible
pub fn rustic_core::index::binarysorted::IndexCollector::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::index::binarysorted::IndexCollector where U: core::convert::TryFrom<T>
pub type rustic_core::index::binarysorted::IndexCollector::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::index::binarysorted::IndexCollector::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::index::binarysorted::IndexCollector where T: 'static + core::marker::Sized
pub fn rustic_core::index::binarysorted::IndexCollector::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::index::binarysorted::IndexCollector where T: core::marker::Sized
pub fn rustic_core::index::binarysorted::IndexCollector::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::index::binarysorted::IndexCollector where T: core::marker::Sized
pub fn rustic_core::index::binarysorted::IndexCollector::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::index::binarysorted::IndexCollector
pub fn rustic_core::index::binarysorted::IndexCollector::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::index::binarysorted::IndexCollector
pub type rustic_core::index::binarysorted::IndexCollector::Init = T
pub const rustic_core::index::binarysorted::IndexCollector::ALIGN: usize
pub unsafe fn rustic_core::index::binarysorted::IndexCollector::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::index::binarysorted::IndexCollector::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::index::binarysorted::IndexCollector::drop(ptr: usize)
pub unsafe fn rustic_core::index::binarysorted::IndexCollector::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::index::binarysorted::IndexCollector
impl<T> tracing::instrument::WithSubscriber for rustic_core::index::binarysorted::IndexCollector
impl<T> typenum::type_operators::Same<T> for rustic_core::index::binarysorted::IndexCollector
pub type rustic_core::index::binarysorted::IndexCollector::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::index::binarysorted::IndexCollector where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::index::binarysorted::IndexCollector::vzip(self) -> V
pub struct rustic_core::index::binarysorted::PackIndexes
pub rustic_core::index::binarysorted::PackIndexes::c: rustic_core::index::binarysorted::Index
pub rustic_core::index::binarysorted::PackIndexes::idx: enum_map::EnumMap<rustic_core::blob::BlobType, (usize, usize)>
pub rustic_core::index::binarysorted::PackIndexes::tpe: rustic_core::blob::BlobType
impl core::iter::traits::iterator::Iterator for rustic_core::index::binarysorted::PackIndexes
pub type rustic_core::index::binarysorted::PackIndexes::Item = rustic_core::repofile::indexfile::IndexPack
pub fn rustic_core::index::binarysorted::PackIndexes::next(&mut self) -> core::option::Option<Self::Item>
impl core::fmt::Debug for rustic_core::index::binarysorted::PackIndexes
pub fn rustic_core::index::binarysorted::PackIndexes::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::index::binarysorted::PackIndexes
impl core::marker::Sync for rustic_core::index::binarysorted::PackIndexes
impl core::marker::Unpin for rustic_core::index::binarysorted::PackIndexes
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::index::binarysorted::PackIndexes
impl core::panic::unwind_safe::UnwindSafe for rustic_core::index::binarysorted::PackIndexes
impl<I> core::iter::traits::collect::IntoIterator for rustic_core::index::binarysorted::PackIndexes where I: core::iter::traits::iterator::Iterator
pub type rustic_core::index::binarysorted::PackIndexes::IntoIter = I
pub type rustic_core::index::binarysorted::PackIndexes::Item = <I as core::iter::traits::iterator::Iterator>::Item
pub fn rustic_core::index::binarysorted::PackIndexes::into_iter(self) -> I
impl<I> pariter::IteratorExt for rustic_core::index::binarysorted::PackIndexes where I: core::iter::traits::iterator::Iterator
impl<I> rand::seq::IteratorRandom for rustic_core::index::binarysorted::PackIndexes where I: core::iter::traits::iterator::Iterator
impl<T, U> core::convert::Into<U> for rustic_core::index::binarysorted::PackIndexes where U: core::convert::From<T>
pub fn rustic_core::index::binarysorted::PackIndexes::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::index::binarysorted::PackIndexes where U: core::convert::Into<T>
pub type rustic_core::index::binarysorted::PackIndexes::Error = core::convert::Infallible
pub fn rustic_core::index::binarysorted::PackIndexes::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::index::binarysorted::PackIndexes where U: core::convert::TryFrom<T>
pub type rustic_core::index::binarysorted::PackIndexes::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::index::binarysorted::PackIndexes::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::index::binarysorted::PackIndexes where T: 'static + core::marker::Sized
pub fn rustic_core::index::binarysorted::PackIndexes::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::index::binarysorted::PackIndexes where T: core::marker::Sized
pub fn rustic_core::index::binarysorted::PackIndexes::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::index::binarysorted::PackIndexes where T: core::marker::Sized
pub fn rustic_core::index::binarysorted::PackIndexes::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::index::binarysorted::PackIndexes
pub fn rustic_core::index::binarysorted::PackIndexes::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::index::binarysorted::PackIndexes
pub type rustic_core::index::binarysorted::PackIndexes::Init = T
pub const rustic_core::index::binarysorted::PackIndexes::ALIGN: usize
pub unsafe fn rustic_core::index::binarysorted::PackIndexes::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::index::binarysorted::PackIndexes::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::index::binarysorted::PackIndexes::drop(ptr: usize)
pub unsafe fn rustic_core::index::binarysorted::PackIndexes::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> itertools::Itertools for rustic_core::index::binarysorted::PackIndexes where T: core::iter::traits::iterator::Iterator + core::marker::Sized
impl<T> rayon::iter::par_bridge::ParallelBridge for rustic_core::index::binarysorted::PackIndexes where T: core::iter::traits::iterator::Iterator + core::marker::Send, <T as core::iter::traits::iterator::Iterator>::Item: core::marker::Send
pub fn rustic_core::index::binarysorted::PackIndexes::par_bridge(self) -> rayon::iter::par_bridge::IterBridge<T>
impl<T> tracing::instrument::Instrument for rustic_core::index::binarysorted::PackIndexes
impl<T> tracing::instrument::WithSubscriber for rustic_core::index::binarysorted::PackIndexes
impl<T> typenum::type_operators::Same<T> for rustic_core::index::binarysorted::PackIndexes
pub type rustic_core::index::binarysorted::PackIndexes::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::index::binarysorted::PackIndexes where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::index::binarysorted::PackIndexes::vzip(self) -> V
pub struct rustic_core::index::binarysorted::SortedEntry
pub rustic_core::index::binarysorted::SortedEntry::id: rustic_core::id::Id
pub rustic_core::index::binarysorted::SortedEntry::length: u32
pub rustic_core::index::binarysorted::SortedEntry::offset: u32
pub rustic_core::index::binarysorted::SortedEntry::pack_idx: usize
pub rustic_core::index::binarysorted::SortedEntry::uncompressed_length: core::option::Option<core::num::nonzero::NonZeroU32>
impl core::cmp::Eq for rustic_core::index::binarysorted::SortedEntry
impl core::cmp::PartialEq<rustic_core::index::binarysorted::SortedEntry> for rustic_core::index::binarysorted::SortedEntry
pub fn rustic_core::index::binarysorted::SortedEntry::eq(&self, other: &rustic_core::index::binarysorted::SortedEntry) -> bool
impl core::fmt::Debug for rustic_core::index::binarysorted::SortedEntry
pub fn rustic_core::index::binarysorted::SortedEntry::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::index::binarysorted::SortedEntry
impl core::marker::StructuralPartialEq for rustic_core::index::binarysorted::SortedEntry
impl core::marker::Send for rustic_core::index::binarysorted::SortedEntry
impl core::marker::Sync for rustic_core::index::binarysorted::SortedEntry
impl core::marker::Unpin for rustic_core::index::binarysorted::SortedEntry
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::index::binarysorted::SortedEntry
impl core::panic::unwind_safe::UnwindSafe for rustic_core::index::binarysorted::SortedEntry
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::index::binarysorted::SortedEntry where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::index::binarysorted::SortedEntry::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::index::binarysorted::SortedEntry where U: core::convert::From<T>
pub fn rustic_core::index::binarysorted::SortedEntry::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::index::binarysorted::SortedEntry where U: core::convert::Into<T>
pub type rustic_core::index::binarysorted::SortedEntry::Error = core::convert::Infallible
pub fn rustic_core::index::binarysorted::SortedEntry::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::index::binarysorted::SortedEntry where U: core::convert::TryFrom<T>
pub type rustic_core::index::binarysorted::SortedEntry::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::index::binarysorted::SortedEntry::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::index::binarysorted::SortedEntry where T: 'static + core::marker::Sized
pub fn rustic_core::index::binarysorted::SortedEntry::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::index::binarysorted::SortedEntry where T: core::marker::Sized
pub fn rustic_core::index::binarysorted::SortedEntry::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::index::binarysorted::SortedEntry where T: core::marker::Sized
pub fn rustic_core::index::binarysorted::SortedEntry::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::index::binarysorted::SortedEntry
pub fn rustic_core::index::binarysorted::SortedEntry::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::index::binarysorted::SortedEntry
pub type rustic_core::index::binarysorted::SortedEntry::Init = T
pub const rustic_core::index::binarysorted::SortedEntry::ALIGN: usize
pub unsafe fn rustic_core::index::binarysorted::SortedEntry::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::index::binarysorted::SortedEntry::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::index::binarysorted::SortedEntry::drop(ptr: usize)
pub unsafe fn rustic_core::index::binarysorted::SortedEntry::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::index::binarysorted::SortedEntry
impl<T> tracing::instrument::WithSubscriber for rustic_core::index::binarysorted::SortedEntry
impl<T> typenum::type_operators::Same<T> for rustic_core::index::binarysorted::SortedEntry
pub type rustic_core::index::binarysorted::SortedEntry::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::index::binarysorted::SortedEntry where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::index::binarysorted::SortedEntry::vzip(self) -> V
pub struct rustic_core::index::binarysorted::TypeIndex
pub rustic_core::index::binarysorted::TypeIndex::entries: rustic_core::index::binarysorted::EntriesVariants
pub rustic_core::index::binarysorted::TypeIndex::packs: alloc::vec::Vec<rustic_core::id::Id>
pub rustic_core::index::binarysorted::TypeIndex::total_size: u64
impl core::fmt::Debug for rustic_core::index::binarysorted::TypeIndex
pub fn rustic_core::index::binarysorted::TypeIndex::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::index::binarysorted::TypeIndex
impl core::marker::Sync for rustic_core::index::binarysorted::TypeIndex
impl core::marker::Unpin for rustic_core::index::binarysorted::TypeIndex
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::index::binarysorted::TypeIndex
impl core::panic::unwind_safe::UnwindSafe for rustic_core::index::binarysorted::TypeIndex
impl<T, U> core::convert::Into<U> for rustic_core::index::binarysorted::TypeIndex where U: core::convert::From<T>
pub fn rustic_core::index::binarysorted::TypeIndex::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::index::binarysorted::TypeIndex where U: core::convert::Into<T>
pub type rustic_core::index::binarysorted::TypeIndex::Error = core::convert::Infallible
pub fn rustic_core::index::binarysorted::TypeIndex::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::index::binarysorted::TypeIndex where U: core::convert::TryFrom<T>
pub type rustic_core::index::binarysorted::TypeIndex::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::index::binarysorted::TypeIndex::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::index::binarysorted::TypeIndex where T: 'static + core::marker::Sized
pub fn rustic_core::index::binarysorted::TypeIndex::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::index::binarysorted::TypeIndex where T: core::marker::Sized
pub fn rustic_core::index::binarysorted::TypeIndex::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::index::binarysorted::TypeIndex where T: core::marker::Sized
pub fn rustic_core::index::binarysorted::TypeIndex::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::index::binarysorted::TypeIndex
pub fn rustic_core::index::binarysorted::TypeIndex::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::index::binarysorted::TypeIndex
pub type rustic_core::index::binarysorted::TypeIndex::Init = T
pub const rustic_core::index::binarysorted::TypeIndex::ALIGN: usize
pub unsafe fn rustic_core::index::binarysorted::TypeIndex::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::index::binarysorted::TypeIndex::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::index::binarysorted::TypeIndex::drop(ptr: usize)
pub unsafe fn rustic_core::index::binarysorted::TypeIndex::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::index::binarysorted::TypeIndex
impl<T> tracing::instrument::WithSubscriber for rustic_core::index::binarysorted::TypeIndex
impl<T> typenum::type_operators::Same<T> for rustic_core::index::binarysorted::TypeIndex
pub type rustic_core::index::binarysorted::TypeIndex::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::index::binarysorted::TypeIndex where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::index::binarysorted::TypeIndex::vzip(self) -> V
pub struct rustic_core::index::binarysorted::TypeIndexCollector
pub rustic_core::index::binarysorted::TypeIndexCollector::entries: rustic_core::index::binarysorted::EntriesVariants
pub rustic_core::index::binarysorted::TypeIndexCollector::packs: alloc::vec::Vec<(rustic_core::id::Id, u32)>
pub rustic_core::index::binarysorted::TypeIndexCollector::total_size: u64
impl core::default::Default for rustic_core::index::binarysorted::TypeIndexCollector
pub fn rustic_core::index::binarysorted::TypeIndexCollector::default() -> rustic_core::index::binarysorted::TypeIndexCollector
impl core::fmt::Debug for rustic_core::index::binarysorted::TypeIndexCollector
pub fn rustic_core::index::binarysorted::TypeIndexCollector::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::index::binarysorted::TypeIndexCollector
impl core::marker::Sync for rustic_core::index::binarysorted::TypeIndexCollector
impl core::marker::Unpin for rustic_core::index::binarysorted::TypeIndexCollector
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::index::binarysorted::TypeIndexCollector
impl core::panic::unwind_safe::UnwindSafe for rustic_core::index::binarysorted::TypeIndexCollector
impl<T, U> core::convert::Into<U> for rustic_core::index::binarysorted::TypeIndexCollector where U: core::convert::From<T>
pub fn rustic_core::index::binarysorted::TypeIndexCollector::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::index::binarysorted::TypeIndexCollector where U: core::convert::Into<T>
pub type rustic_core::index::binarysorted::TypeIndexCollector::Error = core::convert::Infallible
pub fn rustic_core::index::binarysorted::TypeIndexCollector::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::index::binarysorted::TypeIndexCollector where U: core::convert::TryFrom<T>
pub type rustic_core::index::binarysorted::TypeIndexCollector::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::index::binarysorted::TypeIndexCollector::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::index::binarysorted::TypeIndexCollector where T: 'static + core::marker::Sized
pub fn rustic_core::index::binarysorted::TypeIndexCollector::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::index::binarysorted::TypeIndexCollector where T: core::marker::Sized
pub fn rustic_core::index::binarysorted::TypeIndexCollector::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::index::binarysorted::TypeIndexCollector where T: core::marker::Sized
pub fn rustic_core::index::binarysorted::TypeIndexCollector::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::index::binarysorted::TypeIndexCollector
pub fn rustic_core::index::binarysorted::TypeIndexCollector::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::index::binarysorted::TypeIndexCollector
pub type rustic_core::index::binarysorted::TypeIndexCollector::Init = T
pub const rustic_core::index::binarysorted::TypeIndexCollector::ALIGN: usize
pub unsafe fn rustic_core::index::binarysorted::TypeIndexCollector::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::index::binarysorted::TypeIndexCollector::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::index::binarysorted::TypeIndexCollector::drop(ptr: usize)
pub unsafe fn rustic_core::index::binarysorted::TypeIndexCollector::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::index::binarysorted::TypeIndexCollector
impl<T> tracing::instrument::WithSubscriber for rustic_core::index::binarysorted::TypeIndexCollector
impl<T> typenum::type_operators::Same<T> for rustic_core::index::binarysorted::TypeIndexCollector
pub type rustic_core::index::binarysorted::TypeIndexCollector::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::index::binarysorted::TypeIndexCollector where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::index::binarysorted::TypeIndexCollector::vzip(self) -> V
pub mod rustic_core::index::indexer
pub mod rustic_core::index::indexer::constants
pub const rustic_core::index::indexer::constants::MAX_AGE: _
pub const rustic_core::index::indexer::constants::MAX_COUNT: usize = 50_000usize
pub struct rustic_core::index::indexer::Indexer<BE> where BE: rustic_core::backend::decrypt::DecryptWriteBackend
pub rustic_core::index::indexer::Indexer::be: BE
pub rustic_core::index::indexer::Indexer::count: usize
pub rustic_core::index::indexer::Indexer::created: std::time::SystemTime
pub rustic_core::index::indexer::Indexer::file: rustic_core::repofile::indexfile::IndexFile
pub rustic_core::index::indexer::Indexer::indexed: core::option::Option<std::collections::hash::set::HashSet<rustic_core::id::Id>>
impl<BE: rustic_core::backend::decrypt::DecryptWriteBackend> rustic_core::index::indexer::Indexer<BE>
pub fn rustic_core::index::indexer::Indexer<BE>::add(&mut self, pack: rustic_core::repofile::indexfile::IndexPack) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::index::indexer::Indexer<BE>::add_remove(&mut self, pack: rustic_core::repofile::indexfile::IndexPack) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::index::indexer::Indexer<BE>::add_with(&mut self, pack: rustic_core::repofile::indexfile::IndexPack, delete: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::index::indexer::Indexer<BE>::finalize(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::index::indexer::Indexer<BE>::has(&self, id: &rustic_core::id::Id) -> bool
pub fn rustic_core::index::indexer::Indexer<BE>::into_shared(self) -> alloc::sync::Arc<std::sync::rwlock::RwLock<rustic_core::index::indexer::Indexer<BE>>>
pub fn rustic_core::index::indexer::Indexer<BE>::new(be: BE) -> Self
pub fn rustic_core::index::indexer::Indexer<BE>::new_unindexed(be: BE) -> Self
pub fn rustic_core::index::indexer::Indexer<BE>::reset(&mut self)
pub fn rustic_core::index::indexer::Indexer<BE>::save(&self) -> rustic_core::error::RusticResult<()>
impl<BE> core::fmt::Debug for rustic_core::index::indexer::Indexer<BE> where BE: rustic_core::backend::decrypt::DecryptWriteBackend + core::fmt::Debug
pub fn rustic_core::index::indexer::Indexer<BE>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<BE> core::marker::Send for rustic_core::index::indexer::Indexer<BE>
impl<BE> core::marker::Sync for rustic_core::index::indexer::Indexer<BE>
impl<BE> core::marker::Unpin for rustic_core::index::indexer::Indexer<BE> where BE: core::marker::Unpin
impl<BE> core::panic::unwind_safe::RefUnwindSafe for rustic_core::index::indexer::Indexer<BE> where BE: core::panic::unwind_safe::RefUnwindSafe
impl<BE> core::panic::unwind_safe::UnwindSafe for rustic_core::index::indexer::Indexer<BE> where BE: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::index::indexer::Indexer<BE> where U: core::convert::From<T>
pub fn rustic_core::index::indexer::Indexer<BE>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::index::indexer::Indexer<BE> where U: core::convert::Into<T>
pub type rustic_core::index::indexer::Indexer<BE>::Error = core::convert::Infallible
pub fn rustic_core::index::indexer::Indexer<BE>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::index::indexer::Indexer<BE> where U: core::convert::TryFrom<T>
pub type rustic_core::index::indexer::Indexer<BE>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::index::indexer::Indexer<BE>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::index::indexer::Indexer<BE> where T: 'static + core::marker::Sized
pub fn rustic_core::index::indexer::Indexer<BE>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::index::indexer::Indexer<BE> where T: core::marker::Sized
pub fn rustic_core::index::indexer::Indexer<BE>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::index::indexer::Indexer<BE> where T: core::marker::Sized
pub fn rustic_core::index::indexer::Indexer<BE>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::index::indexer::Indexer<BE>
pub fn rustic_core::index::indexer::Indexer<BE>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::index::indexer::Indexer<BE>
pub type rustic_core::index::indexer::Indexer<BE>::Init = T
pub const rustic_core::index::indexer::Indexer<BE>::ALIGN: usize
pub unsafe fn rustic_core::index::indexer::Indexer<BE>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::index::indexer::Indexer<BE>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::index::indexer::Indexer<BE>::drop(ptr: usize)
pub unsafe fn rustic_core::index::indexer::Indexer<BE>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::index::indexer::Indexer<BE>
impl<T> tracing::instrument::WithSubscriber for rustic_core::index::indexer::Indexer<BE>
impl<T> typenum::type_operators::Same<T> for rustic_core::index::indexer::Indexer<BE>
pub type rustic_core::index::indexer::Indexer<BE>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::index::indexer::Indexer<BE> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::index::indexer::Indexer<BE>::vzip(self) -> V
pub type rustic_core::index::indexer::SharedIndexer<BE> = alloc::sync::Arc<std::sync::rwlock::RwLock<rustic_core::index::indexer::Indexer<BE>>>
pub struct rustic_core::index::IndexBackend<BE: rustic_core::backend::decrypt::DecryptReadBackend>
pub rustic_core::index::IndexBackend::be: BE
pub rustic_core::index::IndexBackend::index: alloc::sync::Arc<rustic_core::index::binarysorted::Index>
impl<BE: rustic_core::backend::decrypt::DecryptReadBackend> rustic_core::index::IndexBackend<BE>
pub fn rustic_core::index::IndexBackend<BE>::into_index(self) -> rustic_core::index::binarysorted::Index
pub fn rustic_core::index::IndexBackend<BE>::new(be: &BE, p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::index::IndexBackend<BE>::new_from_collector(be: &BE, p: &impl rustic_core::progress::Progress, collector: rustic_core::index::binarysorted::IndexCollector) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::index::IndexBackend<BE>::new_from_index(be: &BE, index: rustic_core::index::binarysorted::Index) -> Self
pub fn rustic_core::index::IndexBackend<BE>::only_full_trees(be: &BE, p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<Self>
impl<BE: rustic_core::backend::decrypt::DecryptReadBackend> rustic_core::index::IndexedBackend for rustic_core::index::IndexBackend<BE>
pub type rustic_core::index::IndexBackend<BE>::Backend = BE
pub fn rustic_core::index::IndexBackend<BE>::be(&self) -> &Self::Backend
pub fn rustic_core::index::IndexBackend<BE>::blob_from_backend(&self, tpe: rustic_core::blob::BlobType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
impl<BE: rustic_core::backend::decrypt::DecryptReadBackend> rustic_core::index::ReadIndex for rustic_core::index::IndexBackend<BE>
pub fn rustic_core::index::IndexBackend<BE>::get_id(&self, tpe: rustic_core::blob::BlobType, id: &rustic_core::id::Id) -> core::option::Option<rustic_core::index::IndexEntry>
pub fn rustic_core::index::IndexBackend<BE>::has(&self, tpe: rustic_core::blob::BlobType, id: &rustic_core::id::Id) -> bool
pub fn rustic_core::index::IndexBackend<BE>::total_size(&self, tpe: rustic_core::blob::BlobType) -> u64
impl<BE: core::clone::Clone + rustic_core::backend::decrypt::DecryptReadBackend> core::clone::Clone for rustic_core::index::IndexBackend<BE>
pub fn rustic_core::index::IndexBackend<BE>::clone(&self) -> rustic_core::index::IndexBackend<BE>
impl<BE: core::fmt::Debug + rustic_core::backend::decrypt::DecryptReadBackend> core::fmt::Debug for rustic_core::index::IndexBackend<BE>
pub fn rustic_core::index::IndexBackend<BE>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<BE> core::marker::Send for rustic_core::index::IndexBackend<BE>
impl<BE> core::marker::Sync for rustic_core::index::IndexBackend<BE>
impl<BE> core::marker::Unpin for rustic_core::index::IndexBackend<BE> where BE: core::marker::Unpin
impl<BE> core::panic::unwind_safe::RefUnwindSafe for rustic_core::index::IndexBackend<BE> where BE: core::panic::unwind_safe::RefUnwindSafe
impl<BE> core::panic::unwind_safe::UnwindSafe for rustic_core::index::IndexBackend<BE> where BE: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::index::IndexBackend<BE> where U: core::convert::From<T>
pub fn rustic_core::index::IndexBackend<BE>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::index::IndexBackend<BE> where U: core::convert::Into<T>
pub type rustic_core::index::IndexBackend<BE>::Error = core::convert::Infallible
pub fn rustic_core::index::IndexBackend<BE>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::index::IndexBackend<BE> where U: core::convert::TryFrom<T>
pub type rustic_core::index::IndexBackend<BE>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::index::IndexBackend<BE>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::index::IndexBackend<BE> where T: core::clone::Clone
pub type rustic_core::index::IndexBackend<BE>::Owned = T
pub fn rustic_core::index::IndexBackend<BE>::clone_into(&self, target: &mut T)
pub fn rustic_core::index::IndexBackend<BE>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::index::IndexBackend<BE> where T: 'static + core::marker::Sized
pub fn rustic_core::index::IndexBackend<BE>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::index::IndexBackend<BE> where T: core::marker::Sized
pub fn rustic_core::index::IndexBackend<BE>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::index::IndexBackend<BE> where T: core::marker::Sized
pub fn rustic_core::index::IndexBackend<BE>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::index::IndexBackend<BE>
pub fn rustic_core::index::IndexBackend<BE>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::index::IndexBackend<BE>
pub type rustic_core::index::IndexBackend<BE>::Init = T
pub const rustic_core::index::IndexBackend<BE>::ALIGN: usize
pub unsafe fn rustic_core::index::IndexBackend<BE>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::index::IndexBackend<BE>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::index::IndexBackend<BE>::drop(ptr: usize)
pub unsafe fn rustic_core::index::IndexBackend<BE>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::index::IndexBackend<BE>
impl<T> tracing::instrument::WithSubscriber for rustic_core::index::IndexBackend<BE>
impl<T> typenum::type_operators::Same<T> for rustic_core::index::IndexBackend<BE>
pub type rustic_core::index::IndexBackend<BE>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::index::IndexBackend<BE> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::index::IndexBackend<BE>::vzip(self) -> V
pub struct rustic_core::index::IndexEntry
pub rustic_core::index::IndexEntry::blob_type: rustic_core::blob::BlobType
pub rustic_core::index::IndexEntry::length: u32
pub rustic_core::index::IndexEntry::offset: u32
pub rustic_core::index::IndexEntry::pack: rustic_core::id::Id
pub rustic_core::index::IndexEntry::uncompressed_length: core::option::Option<core::num::nonzero::NonZeroU32>
impl rustic_core::index::IndexEntry
pub const fn rustic_core::index::IndexEntry::data_length(&self) -> u32
pub const fn rustic_core::index::IndexEntry::from_index_blob(blob: &rustic_core::repofile::indexfile::IndexBlob, pack: rustic_core::id::Id) -> Self
pub fn rustic_core::index::IndexEntry::read_data<B: rustic_core::backend::decrypt::DecryptReadBackend>(&self, be: &B) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
impl rustic_core::index::IndexEntry
pub fn rustic_core::index::IndexEntry::new(blob_type: rustic_core::blob::BlobType, pack: rustic_core::id::Id, offset: u32, length: u32, uncompressed_length: core::option::Option<core::num::nonzero::NonZeroU32>) -> rustic_core::index::IndexEntry
impl core::clone::Clone for rustic_core::index::IndexEntry
pub fn rustic_core::index::IndexEntry::clone(&self) -> rustic_core::index::IndexEntry
impl core::cmp::Eq for rustic_core::index::IndexEntry
impl core::cmp::PartialEq<rustic_core::index::IndexEntry> for rustic_core::index::IndexEntry
pub fn rustic_core::index::IndexEntry::eq(&self, other: &rustic_core::index::IndexEntry) -> bool
impl core::fmt::Debug for rustic_core::index::IndexEntry
pub fn rustic_core::index::IndexEntry::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::index::IndexEntry
impl core::marker::StructuralEq for rustic_core::index::IndexEntry
impl core::marker::StructuralPartialEq for rustic_core::index::IndexEntry
impl core::marker::Send for rustic_core::index::IndexEntry
impl core::marker::Sync for rustic_core::index::IndexEntry
impl core::marker::Unpin for rustic_core::index::IndexEntry
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::index::IndexEntry
impl core::panic::unwind_safe::UnwindSafe for rustic_core::index::IndexEntry
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::index::IndexEntry where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::index::IndexEntry::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::index::IndexEntry where U: core::convert::From<T>
pub fn rustic_core::index::IndexEntry::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::index::IndexEntry where U: core::convert::Into<T>
pub type rustic_core::index::IndexEntry::Error = core::convert::Infallible
pub fn rustic_core::index::IndexEntry::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::index::IndexEntry where U: core::convert::TryFrom<T>
pub type rustic_core::index::IndexEntry::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::index::IndexEntry::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::index::IndexEntry where T: core::clone::Clone
pub type rustic_core::index::IndexEntry::Owned = T
pub fn rustic_core::index::IndexEntry::clone_into(&self, target: &mut T)
pub fn rustic_core::index::IndexEntry::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::index::IndexEntry where T: 'static + core::marker::Sized
pub fn rustic_core::index::IndexEntry::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::index::IndexEntry where T: core::marker::Sized
pub fn rustic_core::index::IndexEntry::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::index::IndexEntry where T: core::marker::Sized
pub fn rustic_core::index::IndexEntry::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::index::IndexEntry
pub fn rustic_core::index::IndexEntry::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::index::IndexEntry
pub type rustic_core::index::IndexEntry::Init = T
pub const rustic_core::index::IndexEntry::ALIGN: usize
pub unsafe fn rustic_core::index::IndexEntry::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::index::IndexEntry::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::index::IndexEntry::drop(ptr: usize)
pub unsafe fn rustic_core::index::IndexEntry::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::index::IndexEntry
impl<T> tracing::instrument::WithSubscriber for rustic_core::index::IndexEntry
impl<T> typenum::type_operators::Same<T> for rustic_core::index::IndexEntry
pub type rustic_core::index::IndexEntry::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::index::IndexEntry where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::index::IndexEntry::vzip(self) -> V
pub trait rustic_core::index::IndexedBackend: rustic_core::index::ReadIndex + core::clone::Clone + core::marker::Sync + core::marker::Send + 'static
pub type rustic_core::index::IndexedBackend::Backend: rustic_core::backend::decrypt::DecryptReadBackend
pub fn rustic_core::index::IndexedBackend::be(&self) -> &Self::Backend
pub fn rustic_core::index::IndexedBackend::blob_from_backend(&self, tpe: rustic_core::blob::BlobType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
impl<BE: rustic_core::backend::decrypt::DecryptReadBackend> rustic_core::index::IndexedBackend for rustic_core::index::IndexBackend<BE>
pub type rustic_core::index::IndexBackend<BE>::Backend = BE
pub fn rustic_core::index::IndexBackend<BE>::be(&self) -> &Self::Backend
pub fn rustic_core::index::IndexBackend<BE>::blob_from_backend(&self, tpe: rustic_core::blob::BlobType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub trait rustic_core::index::ReadIndex
pub fn rustic_core::index::ReadIndex::get_data(&self, id: &rustic_core::id::Id) -> core::option::Option<rustic_core::index::IndexEntry>
pub fn rustic_core::index::ReadIndex::get_id(&self, tpe: rustic_core::blob::BlobType, id: &rustic_core::id::Id) -> core::option::Option<rustic_core::index::IndexEntry>
pub fn rustic_core::index::ReadIndex::get_tree(&self, id: &rustic_core::id::Id) -> core::option::Option<rustic_core::index::IndexEntry>
pub fn rustic_core::index::ReadIndex::has(&self, tpe: rustic_core::blob::BlobType, id: &rustic_core::id::Id) -> bool
pub fn rustic_core::index::ReadIndex::has_data(&self, id: &rustic_core::id::Id) -> bool
pub fn rustic_core::index::ReadIndex::has_tree(&self, id: &rustic_core::id::Id) -> bool
pub fn rustic_core::index::ReadIndex::total_size(&self, tpe: rustic_core::blob::BlobType) -> u64
impl rustic_core::index::ReadIndex for rustic_core::index::binarysorted::Index
pub fn rustic_core::index::binarysorted::Index::get_id(&self, blob_type: rustic_core::blob::BlobType, id: &rustic_core::id::Id) -> core::option::Option<rustic_core::index::IndexEntry>
pub fn rustic_core::index::binarysorted::Index::has(&self, blob_type: rustic_core::blob::BlobType, id: &rustic_core::id::Id) -> bool
pub fn rustic_core::index::binarysorted::Index::total_size(&self, blob_type: rustic_core::blob::BlobType) -> u64
impl<BE: rustic_core::backend::decrypt::DecryptReadBackend> rustic_core::index::ReadIndex for rustic_core::index::IndexBackend<BE>
pub fn rustic_core::index::IndexBackend<BE>::get_id(&self, tpe: rustic_core::blob::BlobType, id: &rustic_core::id::Id) -> core::option::Option<rustic_core::index::IndexEntry>
pub fn rustic_core::index::IndexBackend<BE>::has(&self, tpe: rustic_core::blob::BlobType, id: &rustic_core::id::Id) -> bool
pub fn rustic_core::index::IndexBackend<BE>::total_size(&self, tpe: rustic_core::blob::BlobType) -> u64
pub mod rustic_core::progress
pub struct rustic_core::progress::NoProgress
impl rustic_core::progress::Progress for rustic_core::progress::NoProgress
pub fn rustic_core::progress::NoProgress::finish(&self)
pub fn rustic_core::progress::NoProgress::inc(&self, _inc: u64)
pub fn rustic_core::progress::NoProgress::is_hidden(&self) -> bool
pub fn rustic_core::progress::NoProgress::set_length(&self, _len: u64)
pub fn rustic_core::progress::NoProgress::set_title(&self, title: &'static str)
impl core::clone::Clone for rustic_core::progress::NoProgress
pub fn rustic_core::progress::NoProgress::clone(&self) -> rustic_core::progress::NoProgress
impl core::fmt::Debug for rustic_core::progress::NoProgress
pub fn rustic_core::progress::NoProgress::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::progress::NoProgress
impl core::marker::Send for rustic_core::progress::NoProgress
impl core::marker::Sync for rustic_core::progress::NoProgress
impl core::marker::Unpin for rustic_core::progress::NoProgress
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::progress::NoProgress
impl core::panic::unwind_safe::UnwindSafe for rustic_core::progress::NoProgress
impl<T, U> core::convert::Into<U> for rustic_core::progress::NoProgress where U: core::convert::From<T>
pub fn rustic_core::progress::NoProgress::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::progress::NoProgress where U: core::convert::Into<T>
pub type rustic_core::progress::NoProgress::Error = core::convert::Infallible
pub fn rustic_core::progress::NoProgress::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::progress::NoProgress where U: core::convert::TryFrom<T>
pub type rustic_core::progress::NoProgress::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::progress::NoProgress::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::progress::NoProgress where T: core::clone::Clone
pub type rustic_core::progress::NoProgress::Owned = T
pub fn rustic_core::progress::NoProgress::clone_into(&self, target: &mut T)
pub fn rustic_core::progress::NoProgress::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::progress::NoProgress where T: 'static + core::marker::Sized
pub fn rustic_core::progress::NoProgress::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::progress::NoProgress where T: core::marker::Sized
pub fn rustic_core::progress::NoProgress::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::progress::NoProgress where T: core::marker::Sized
pub fn rustic_core::progress::NoProgress::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::progress::NoProgress
pub fn rustic_core::progress::NoProgress::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::progress::NoProgress
pub type rustic_core::progress::NoProgress::Init = T
pub const rustic_core::progress::NoProgress::ALIGN: usize
pub unsafe fn rustic_core::progress::NoProgress::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::progress::NoProgress::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::progress::NoProgress::drop(ptr: usize)
pub unsafe fn rustic_core::progress::NoProgress::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::progress::NoProgress
impl<T> tracing::instrument::WithSubscriber for rustic_core::progress::NoProgress
impl<T> typenum::type_operators::Same<T> for rustic_core::progress::NoProgress
pub type rustic_core::progress::NoProgress::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::progress::NoProgress where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::progress::NoProgress::vzip(self) -> V
pub struct rustic_core::progress::NoProgressBars
impl rustic_core::progress::ProgressBars for rustic_core::progress::NoProgressBars
pub type rustic_core::progress::NoProgressBars::P = rustic_core::progress::NoProgress
pub fn rustic_core::progress::NoProgressBars::progress_bytes(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::progress::NoProgressBars::progress_counter(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::progress::NoProgressBars::progress_hidden(&self) -> Self::P
pub fn rustic_core::progress::NoProgressBars::progress_spinner(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
impl core::clone::Clone for rustic_core::progress::NoProgressBars
pub fn rustic_core::progress::NoProgressBars::clone(&self) -> rustic_core::progress::NoProgressBars
impl core::fmt::Debug for rustic_core::progress::NoProgressBars
pub fn rustic_core::progress::NoProgressBars::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::progress::NoProgressBars
impl core::marker::Send for rustic_core::progress::NoProgressBars
impl core::marker::Sync for rustic_core::progress::NoProgressBars
impl core::marker::Unpin for rustic_core::progress::NoProgressBars
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::progress::NoProgressBars
impl core::panic::unwind_safe::UnwindSafe for rustic_core::progress::NoProgressBars
impl<T, U> core::convert::Into<U> for rustic_core::progress::NoProgressBars where U: core::convert::From<T>
pub fn rustic_core::progress::NoProgressBars::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::progress::NoProgressBars where U: core::convert::Into<T>
pub type rustic_core::progress::NoProgressBars::Error = core::convert::Infallible
pub fn rustic_core::progress::NoProgressBars::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::progress::NoProgressBars where U: core::convert::TryFrom<T>
pub type rustic_core::progress::NoProgressBars::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::progress::NoProgressBars::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::progress::NoProgressBars where T: core::clone::Clone
pub type rustic_core::progress::NoProgressBars::Owned = T
pub fn rustic_core::progress::NoProgressBars::clone_into(&self, target: &mut T)
pub fn rustic_core::progress::NoProgressBars::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::progress::NoProgressBars where T: 'static + core::marker::Sized
pub fn rustic_core::progress::NoProgressBars::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::progress::NoProgressBars where T: core::marker::Sized
pub fn rustic_core::progress::NoProgressBars::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::progress::NoProgressBars where T: core::marker::Sized
pub fn rustic_core::progress::NoProgressBars::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::progress::NoProgressBars
pub fn rustic_core::progress::NoProgressBars::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::progress::NoProgressBars
pub type rustic_core::progress::NoProgressBars::Init = T
pub const rustic_core::progress::NoProgressBars::ALIGN: usize
pub unsafe fn rustic_core::progress::NoProgressBars::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::progress::NoProgressBars::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::progress::NoProgressBars::drop(ptr: usize)
pub unsafe fn rustic_core::progress::NoProgressBars::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::progress::NoProgressBars
impl<T> tracing::instrument::WithSubscriber for rustic_core::progress::NoProgressBars
impl<T> typenum::type_operators::Same<T> for rustic_core::progress::NoProgressBars
pub type rustic_core::progress::NoProgressBars::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::progress::NoProgressBars where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::progress::NoProgressBars::vzip(self) -> V
pub trait rustic_core::progress::Progress: core::marker::Send + core::marker::Sync + core::clone::Clone
pub fn rustic_core::progress::Progress::finish(&self)
pub fn rustic_core::progress::Progress::inc(&self, inc: u64)
pub fn rustic_core::progress::Progress::is_hidden(&self) -> bool
pub fn rustic_core::progress::Progress::set_length(&self, len: u64)
pub fn rustic_core::progress::Progress::set_title(&self, title: &'static str)
impl rustic_core::progress::Progress for rustic_core::progress::NoProgress
pub fn rustic_core::progress::NoProgress::finish(&self)
pub fn rustic_core::progress::NoProgress::inc(&self, _inc: u64)
pub fn rustic_core::progress::NoProgress::is_hidden(&self) -> bool
pub fn rustic_core::progress::NoProgress::set_length(&self, _len: u64)
pub fn rustic_core::progress::NoProgress::set_title(&self, title: &'static str)
pub trait rustic_core::progress::ProgressBars
pub type rustic_core::progress::ProgressBars::P: rustic_core::progress::Progress
pub fn rustic_core::progress::ProgressBars::progress_bytes(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::progress::ProgressBars::progress_counter(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::progress::ProgressBars::progress_hidden(&self) -> Self::P
pub fn rustic_core::progress::ProgressBars::progress_spinner(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
impl rustic_core::progress::ProgressBars for rustic_core::progress::NoProgressBars
pub type rustic_core::progress::NoProgressBars::P = rustic_core::progress::NoProgress
pub fn rustic_core::progress::NoProgressBars::progress_bytes(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::progress::NoProgressBars::progress_counter(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::progress::NoProgressBars::progress_hidden(&self) -> Self::P
pub fn rustic_core::progress::NoProgressBars::progress_spinner(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub mod rustic_core::repofile
pub mod rustic_core::repofile::configfile
pub mod rustic_core::repofile::configfile::constants
pub const rustic_core::repofile::configfile::constants::DEFAULT_DATA_SIZE: _
pub const rustic_core::repofile::configfile::constants::DEFAULT_GROW_FACTOR: u32 = 32u32
pub const rustic_core::repofile::configfile::constants::DEFAULT_MIN_PERCENTAGE: u32 = 30u32
pub const rustic_core::repofile::configfile::constants::DEFAULT_SIZE_LIMIT: u32::MAX
pub const rustic_core::repofile::configfile::constants::DEFAULT_TREE_SIZE: _
pub const rustic_core::repofile::configfile::constants::KB: u32 = 1_024u32
pub const rustic_core::repofile::configfile::constants::MB: _
pub struct rustic_core::repofile::configfile::ConfigFile
pub rustic_core::repofile::configfile::ConfigFile::chunker_polynomial: alloc::string::String
pub rustic_core::repofile::configfile::ConfigFile::compression: core::option::Option<i32>
pub rustic_core::repofile::configfile::ConfigFile::datapack_growfactor: core::option::Option<u32>
pub rustic_core::repofile::configfile::ConfigFile::datapack_size: core::option::Option<u32>
pub rustic_core::repofile::configfile::ConfigFile::datapack_size_limit: core::option::Option<u32>
pub rustic_core::repofile::configfile::ConfigFile::id: rustic_core::id::Id
pub rustic_core::repofile::configfile::ConfigFile::is_hot: core::option::Option<bool>
pub rustic_core::repofile::configfile::ConfigFile::max_packsize_tolerate_percent: core::option::Option<u32>
pub rustic_core::repofile::configfile::ConfigFile::min_packsize_tolerate_percent: core::option::Option<u32>
pub rustic_core::repofile::configfile::ConfigFile::treepack_growfactor: core::option::Option<u32>
pub rustic_core::repofile::configfile::ConfigFile::treepack_size: core::option::Option<u32>
pub rustic_core::repofile::configfile::ConfigFile::treepack_size_limit: core::option::Option<u32>
pub rustic_core::repofile::configfile::ConfigFile::version: u32
impl rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repofile::configfile::ConfigFile::new(version: u32, id: rustic_core::id::Id, poly: u64) -> Self
pub fn rustic_core::repofile::configfile::ConfigFile::packsize(&self, blob: rustic_core::blob::BlobType) -> (u32, u32, u32)
pub fn rustic_core::repofile::configfile::ConfigFile::packsize_ok_percents(&self) -> (u32, u32)
pub fn rustic_core::repofile::configfile::ConfigFile::poly(&self) -> rustic_core::error::RusticResult<u64>
pub fn rustic_core::repofile::configfile::ConfigFile::zstd(&self) -> rustic_core::error::RusticResult<core::option::Option<i32>>
impl rustic_core::repofile::RepoFile for rustic_core::repofile::configfile::ConfigFile
pub const rustic_core::repofile::configfile::ConfigFile::TYPE: rustic_core::backend::FileType
impl core::clone::Clone for rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repofile::configfile::ConfigFile::clone(&self) -> rustic_core::repofile::configfile::ConfigFile
impl core::cmp::Eq for rustic_core::repofile::configfile::ConfigFile
impl core::cmp::PartialEq<rustic_core::repofile::configfile::ConfigFile> for rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repofile::configfile::ConfigFile::eq(&self, other: &rustic_core::repofile::configfile::ConfigFile) -> bool
impl core::default::Default for rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repofile::configfile::ConfigFile::default() -> rustic_core::repofile::configfile::ConfigFile
impl core::fmt::Debug for rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repofile::configfile::ConfigFile::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::repofile::configfile::ConfigFile
impl core::marker::StructuralPartialEq for rustic_core::repofile::configfile::ConfigFile
impl serde::ser::Serialize for rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repofile::configfile::ConfigFile::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repofile::configfile::ConfigFile::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::configfile::ConfigFile
impl core::marker::Sync for rustic_core::repofile::configfile::ConfigFile
impl core::marker::Unpin for rustic_core::repofile::configfile::ConfigFile
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::configfile::ConfigFile
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::configfile::ConfigFile
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::configfile::ConfigFile where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::configfile::ConfigFile::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::configfile::ConfigFile where U: core::convert::From<T>
pub fn rustic_core::repofile::configfile::ConfigFile::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::configfile::ConfigFile where U: core::convert::Into<T>
pub type rustic_core::repofile::configfile::ConfigFile::Error = core::convert::Infallible
pub fn rustic_core::repofile::configfile::ConfigFile::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::configfile::ConfigFile where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::configfile::ConfigFile::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::configfile::ConfigFile::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::configfile::ConfigFile where T: core::clone::Clone
pub type rustic_core::repofile::configfile::ConfigFile::Owned = T
pub fn rustic_core::repofile::configfile::ConfigFile::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::configfile::ConfigFile::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::configfile::ConfigFile where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::configfile::ConfigFile::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::configfile::ConfigFile where T: core::marker::Sized
pub fn rustic_core::repofile::configfile::ConfigFile::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::configfile::ConfigFile where T: core::marker::Sized
pub fn rustic_core::repofile::configfile::ConfigFile::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repofile::configfile::ConfigFile::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::configfile::ConfigFile
pub type rustic_core::repofile::configfile::ConfigFile::Init = T
pub const rustic_core::repofile::configfile::ConfigFile::ALIGN: usize
pub unsafe fn rustic_core::repofile::configfile::ConfigFile::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::configfile::ConfigFile::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::configfile::ConfigFile::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::configfile::ConfigFile::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::configfile::ConfigFile where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::configfile::ConfigFile
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::configfile::ConfigFile
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::configfile::ConfigFile
pub type rustic_core::repofile::configfile::ConfigFile::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::configfile::ConfigFile where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::configfile::ConfigFile::vzip(self) -> V
pub mod rustic_core::repofile::indexfile
pub struct rustic_core::repofile::indexfile::IndexBlob
pub rustic_core::repofile::indexfile::IndexBlob::id: rustic_core::id::Id
pub rustic_core::repofile::indexfile::IndexBlob::length: u32
pub rustic_core::repofile::indexfile::IndexBlob::offset: u32
pub rustic_core::repofile::indexfile::IndexBlob::tpe: rustic_core::blob::BlobType
pub rustic_core::repofile::indexfile::IndexBlob::uncompressed_length: core::option::Option<core::num::nonzero::NonZeroU32>
impl core::cmp::Ord for rustic_core::repofile::indexfile::IndexBlob
pub fn rustic_core::repofile::indexfile::IndexBlob::cmp(&self, other: &Self) -> core::cmp::Ordering
impl core::cmp::PartialOrd<rustic_core::repofile::indexfile::IndexBlob> for rustic_core::repofile::indexfile::IndexBlob
pub fn rustic_core::repofile::indexfile::IndexBlob::partial_cmp(&self, other: &Self) -> core::option::Option<core::cmp::Ordering>
impl core::clone::Clone for rustic_core::repofile::indexfile::IndexBlob
pub fn rustic_core::repofile::indexfile::IndexBlob::clone(&self) -> rustic_core::repofile::indexfile::IndexBlob
impl core::cmp::Eq for rustic_core::repofile::indexfile::IndexBlob
impl core::cmp::PartialEq<rustic_core::repofile::indexfile::IndexBlob> for rustic_core::repofile::indexfile::IndexBlob
pub fn rustic_core::repofile::indexfile::IndexBlob::eq(&self, other: &rustic_core::repofile::indexfile::IndexBlob) -> bool
impl core::fmt::Debug for rustic_core::repofile::indexfile::IndexBlob
pub fn rustic_core::repofile::indexfile::IndexBlob::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::repofile::indexfile::IndexBlob
impl core::marker::StructuralEq for rustic_core::repofile::indexfile::IndexBlob
impl core::marker::StructuralPartialEq for rustic_core::repofile::indexfile::IndexBlob
impl serde::ser::Serialize for rustic_core::repofile::indexfile::IndexBlob
pub fn rustic_core::repofile::indexfile::IndexBlob::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::indexfile::IndexBlob
pub fn rustic_core::repofile::indexfile::IndexBlob::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::indexfile::IndexBlob
impl core::marker::Sync for rustic_core::repofile::indexfile::IndexBlob
impl core::marker::Unpin for rustic_core::repofile::indexfile::IndexBlob
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::indexfile::IndexBlob
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::indexfile::IndexBlob
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::indexfile::IndexBlob where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexBlob::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::indexfile::IndexBlob where U: core::convert::From<T>
pub fn rustic_core::repofile::indexfile::IndexBlob::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::indexfile::IndexBlob where U: core::convert::Into<T>
pub type rustic_core::repofile::indexfile::IndexBlob::Error = core::convert::Infallible
pub fn rustic_core::repofile::indexfile::IndexBlob::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::indexfile::IndexBlob where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::indexfile::IndexBlob::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::indexfile::IndexBlob::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::indexfile::IndexBlob where T: core::clone::Clone
pub type rustic_core::repofile::indexfile::IndexBlob::Owned = T
pub fn rustic_core::repofile::indexfile::IndexBlob::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::indexfile::IndexBlob::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::indexfile::IndexBlob where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexBlob::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::indexfile::IndexBlob where T: core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexBlob::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::indexfile::IndexBlob where T: core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexBlob::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::indexfile::IndexBlob
pub fn rustic_core::repofile::indexfile::IndexBlob::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::indexfile::IndexBlob
pub type rustic_core::repofile::indexfile::IndexBlob::Init = T
pub const rustic_core::repofile::indexfile::IndexBlob::ALIGN: usize
pub unsafe fn rustic_core::repofile::indexfile::IndexBlob::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::indexfile::IndexBlob::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::indexfile::IndexBlob::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::indexfile::IndexBlob::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::indexfile::IndexBlob where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::indexfile::IndexBlob
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::indexfile::IndexBlob
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::indexfile::IndexBlob
pub type rustic_core::repofile::indexfile::IndexBlob::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::indexfile::IndexBlob where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::indexfile::IndexBlob::vzip(self) -> V
pub struct rustic_core::repofile::indexfile::IndexFile
pub rustic_core::repofile::indexfile::IndexFile::packs: alloc::vec::Vec<rustic_core::repofile::indexfile::IndexPack>
pub rustic_core::repofile::indexfile::IndexFile::packs_to_delete: alloc::vec::Vec<rustic_core::repofile::indexfile::IndexPack>
pub rustic_core::repofile::indexfile::IndexFile::supersedes: core::option::Option<alloc::vec::Vec<rustic_core::id::Id>>
impl rustic_core::repofile::indexfile::IndexFile
pub fn rustic_core::repofile::indexfile::IndexFile::add(&mut self, p: rustic_core::repofile::indexfile::IndexPack, delete: bool)
impl rustic_core::repofile::RepoFile for rustic_core::repofile::indexfile::IndexFile
pub const rustic_core::repofile::indexfile::IndexFile::TYPE: rustic_core::backend::FileType
impl core::default::Default for rustic_core::repofile::indexfile::IndexFile
pub fn rustic_core::repofile::indexfile::IndexFile::default() -> rustic_core::repofile::indexfile::IndexFile
impl core::fmt::Debug for rustic_core::repofile::indexfile::IndexFile
pub fn rustic_core::repofile::indexfile::IndexFile::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::indexfile::IndexFile
pub fn rustic_core::repofile::indexfile::IndexFile::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::indexfile::IndexFile
pub fn rustic_core::repofile::indexfile::IndexFile::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::indexfile::IndexFile
impl core::marker::Sync for rustic_core::repofile::indexfile::IndexFile
impl core::marker::Unpin for rustic_core::repofile::indexfile::IndexFile
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::indexfile::IndexFile
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::indexfile::IndexFile
impl<T, U> core::convert::Into<U> for rustic_core::repofile::indexfile::IndexFile where U: core::convert::From<T>
pub fn rustic_core::repofile::indexfile::IndexFile::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::indexfile::IndexFile where U: core::convert::Into<T>
pub type rustic_core::repofile::indexfile::IndexFile::Error = core::convert::Infallible
pub fn rustic_core::repofile::indexfile::IndexFile::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::indexfile::IndexFile where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::indexfile::IndexFile::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::indexfile::IndexFile::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::repofile::indexfile::IndexFile where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexFile::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::indexfile::IndexFile where T: core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexFile::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::indexfile::IndexFile where T: core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexFile::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::indexfile::IndexFile
pub fn rustic_core::repofile::indexfile::IndexFile::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::indexfile::IndexFile
pub type rustic_core::repofile::indexfile::IndexFile::Init = T
pub const rustic_core::repofile::indexfile::IndexFile::ALIGN: usize
pub unsafe fn rustic_core::repofile::indexfile::IndexFile::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::indexfile::IndexFile::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::indexfile::IndexFile::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::indexfile::IndexFile::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::indexfile::IndexFile where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::indexfile::IndexFile
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::indexfile::IndexFile
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::indexfile::IndexFile
pub type rustic_core::repofile::indexfile::IndexFile::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::indexfile::IndexFile where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::indexfile::IndexFile::vzip(self) -> V
pub struct rustic_core::repofile::indexfile::IndexPack
pub rustic_core::repofile::indexfile::IndexPack::blobs: alloc::vec::Vec<rustic_core::repofile::indexfile::IndexBlob>
pub rustic_core::repofile::indexfile::IndexPack::id: rustic_core::id::Id
pub rustic_core::repofile::indexfile::IndexPack::size: core::option::Option<u32>
pub rustic_core::repofile::indexfile::IndexPack::time: core::option::Option<chrono::datetime::DateTime<chrono::offset::local::Local>>
impl rustic_core::repofile::indexfile::IndexPack
pub fn rustic_core::repofile::indexfile::IndexPack::add(&mut self, id: rustic_core::id::Id, tpe: rustic_core::blob::BlobType, offset: u32, length: u32, uncompressed_length: core::option::Option<core::num::nonzero::NonZeroU32>)
pub fn rustic_core::repofile::indexfile::IndexPack::blob_type(&self) -> rustic_core::blob::BlobType
pub fn rustic_core::repofile::indexfile::IndexPack::pack_size(&self) -> u32
impl core::iter::traits::collect::Extend<rustic_core::repofile::indexfile::IndexPack> for rustic_core::index::binarysorted::IndexCollector
pub fn rustic_core::index::binarysorted::IndexCollector::extend<T>(&mut self, iter: T) where T: core::iter::traits::collect::IntoIterator<Item = rustic_core::repofile::indexfile::IndexPack>
impl core::clone::Clone for rustic_core::repofile::indexfile::IndexPack
pub fn rustic_core::repofile::indexfile::IndexPack::clone(&self) -> rustic_core::repofile::indexfile::IndexPack
impl core::default::Default for rustic_core::repofile::indexfile::IndexPack
pub fn rustic_core::repofile::indexfile::IndexPack::default() -> rustic_core::repofile::indexfile::IndexPack
impl core::fmt::Debug for rustic_core::repofile::indexfile::IndexPack
pub fn rustic_core::repofile::indexfile::IndexPack::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::indexfile::IndexPack
pub fn rustic_core::repofile::indexfile::IndexPack::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::indexfile::IndexPack
pub fn rustic_core::repofile::indexfile::IndexPack::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::indexfile::IndexPack
impl core::marker::Sync for rustic_core::repofile::indexfile::IndexPack
impl core::marker::Unpin for rustic_core::repofile::indexfile::IndexPack
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::indexfile::IndexPack
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::indexfile::IndexPack
impl<T, U> core::convert::Into<U> for rustic_core::repofile::indexfile::IndexPack where U: core::convert::From<T>
pub fn rustic_core::repofile::indexfile::IndexPack::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::indexfile::IndexPack where U: core::convert::Into<T>
pub type rustic_core::repofile::indexfile::IndexPack::Error = core::convert::Infallible
pub fn rustic_core::repofile::indexfile::IndexPack::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::indexfile::IndexPack where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::indexfile::IndexPack::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::indexfile::IndexPack::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::indexfile::IndexPack where T: core::clone::Clone
pub type rustic_core::repofile::indexfile::IndexPack::Owned = T
pub fn rustic_core::repofile::indexfile::IndexPack::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::indexfile::IndexPack::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::indexfile::IndexPack where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexPack::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::indexfile::IndexPack where T: core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexPack::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::indexfile::IndexPack where T: core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexPack::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::indexfile::IndexPack
pub fn rustic_core::repofile::indexfile::IndexPack::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::indexfile::IndexPack
pub type rustic_core::repofile::indexfile::IndexPack::Init = T
pub const rustic_core::repofile::indexfile::IndexPack::ALIGN: usize
pub unsafe fn rustic_core::repofile::indexfile::IndexPack::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::indexfile::IndexPack::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::indexfile::IndexPack::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::indexfile::IndexPack::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::indexfile::IndexPack where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::indexfile::IndexPack
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::indexfile::IndexPack
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::indexfile::IndexPack
pub type rustic_core::repofile::indexfile::IndexPack::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::indexfile::IndexPack where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::indexfile::IndexPack::vzip(self) -> V
pub mod rustic_core::repofile::keyfile
pub mod rustic_core::repofile::keyfile::constants
pub const fn rustic_core::repofile::keyfile::constants::num_bits<T>() -> usize
pub struct rustic_core::repofile::keyfile::KeyFile
pub rustic_core::repofile::keyfile::KeyFile::created: core::option::Option<chrono::datetime::DateTime<chrono::offset::local::Local>>
pub rustic_core::repofile::keyfile::KeyFile::data: alloc::vec::Vec<u8>
pub rustic_core::repofile::keyfile::KeyFile::hostname: core::option::Option<alloc::string::String>
pub rustic_core::repofile::keyfile::KeyFile::kdf: alloc::string::String
pub rustic_core::repofile::keyfile::KeyFile::n: u32
pub rustic_core::repofile::keyfile::KeyFile::p: u32
pub rustic_core::repofile::keyfile::KeyFile::r: u32
pub rustic_core::repofile::keyfile::KeyFile::salt: alloc::vec::Vec<u8>
pub rustic_core::repofile::keyfile::KeyFile::username: core::option::Option<alloc::string::String>
impl rustic_core::repofile::keyfile::KeyFile
pub fn rustic_core::repofile::keyfile::KeyFile::from_backend<B: rustic_core::backend::ReadBackend>(be: &B, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::keyfile::KeyFile::generate(key: rustic_core::crypto::aespoly1305::Key, passwd: &impl core::convert::AsRef<[u8]>, hostname: core::option::Option<alloc::string::String>, username: core::option::Option<alloc::string::String>, with_created: bool) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::keyfile::KeyFile::kdf_key(&self, passwd: &impl core::convert::AsRef<[u8]>) -> rustic_core::error::RusticResult<rustic_core::crypto::aespoly1305::Key>
pub fn rustic_core::repofile::keyfile::KeyFile::key_from_data(&self, key: &rustic_core::crypto::aespoly1305::Key) -> rustic_core::error::RusticResult<rustic_core::crypto::aespoly1305::Key>
pub fn rustic_core::repofile::keyfile::KeyFile::key_from_password(&self, passwd: &impl core::convert::AsRef<[u8]>) -> rustic_core::error::RusticResult<rustic_core::crypto::aespoly1305::Key>
impl core::fmt::Debug for rustic_core::repofile::keyfile::KeyFile
pub fn rustic_core::repofile::keyfile::KeyFile::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::keyfile::KeyFile
pub fn rustic_core::repofile::keyfile::KeyFile::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::keyfile::KeyFile
pub fn rustic_core::repofile::keyfile::KeyFile::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::keyfile::KeyFile
impl core::marker::Sync for rustic_core::repofile::keyfile::KeyFile
impl core::marker::Unpin for rustic_core::repofile::keyfile::KeyFile
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::keyfile::KeyFile
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::keyfile::KeyFile
impl<T, U> core::convert::Into<U> for rustic_core::repofile::keyfile::KeyFile where U: core::convert::From<T>
pub fn rustic_core::repofile::keyfile::KeyFile::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::keyfile::KeyFile where U: core::convert::Into<T>
pub type rustic_core::repofile::keyfile::KeyFile::Error = core::convert::Infallible
pub fn rustic_core::repofile::keyfile::KeyFile::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::keyfile::KeyFile where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::keyfile::KeyFile::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::keyfile::KeyFile::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::repofile::keyfile::KeyFile where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::keyfile::KeyFile::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::keyfile::KeyFile where T: core::marker::Sized
pub fn rustic_core::repofile::keyfile::KeyFile::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::keyfile::KeyFile where T: core::marker::Sized
pub fn rustic_core::repofile::keyfile::KeyFile::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::keyfile::KeyFile
pub fn rustic_core::repofile::keyfile::KeyFile::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::keyfile::KeyFile
pub type rustic_core::repofile::keyfile::KeyFile::Init = T
pub const rustic_core::repofile::keyfile::KeyFile::ALIGN: usize
pub unsafe fn rustic_core::repofile::keyfile::KeyFile::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::keyfile::KeyFile::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::keyfile::KeyFile::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::keyfile::KeyFile::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::keyfile::KeyFile where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::keyfile::KeyFile
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::keyfile::KeyFile
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::keyfile::KeyFile
pub type rustic_core::repofile::keyfile::KeyFile::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::keyfile::KeyFile where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::keyfile::KeyFile::vzip(self) -> V
pub struct rustic_core::repofile::keyfile::Mac
pub rustic_core::repofile::keyfile::Mac::k: alloc::vec::Vec<u8>
pub rustic_core::repofile::keyfile::Mac::r: alloc::vec::Vec<u8>
impl core::fmt::Debug for rustic_core::repofile::keyfile::Mac
pub fn rustic_core::repofile::keyfile::Mac::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::keyfile::Mac
pub fn rustic_core::repofile::keyfile::Mac::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::keyfile::Mac
pub fn rustic_core::repofile::keyfile::Mac::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::keyfile::Mac
impl core::marker::Sync for rustic_core::repofile::keyfile::Mac
impl core::marker::Unpin for rustic_core::repofile::keyfile::Mac
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::keyfile::Mac
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::keyfile::Mac
impl<T, U> core::convert::Into<U> for rustic_core::repofile::keyfile::Mac where U: core::convert::From<T>
pub fn rustic_core::repofile::keyfile::Mac::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::keyfile::Mac where U: core::convert::Into<T>
pub type rustic_core::repofile::keyfile::Mac::Error = core::convert::Infallible
pub fn rustic_core::repofile::keyfile::Mac::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::keyfile::Mac where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::keyfile::Mac::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::keyfile::Mac::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::repofile::keyfile::Mac where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::keyfile::Mac::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::keyfile::Mac where T: core::marker::Sized
pub fn rustic_core::repofile::keyfile::Mac::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::keyfile::Mac where T: core::marker::Sized
pub fn rustic_core::repofile::keyfile::Mac::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::keyfile::Mac
pub fn rustic_core::repofile::keyfile::Mac::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::keyfile::Mac
pub type rustic_core::repofile::keyfile::Mac::Init = T
pub const rustic_core::repofile::keyfile::Mac::ALIGN: usize
pub unsafe fn rustic_core::repofile::keyfile::Mac::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::keyfile::Mac::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::keyfile::Mac::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::keyfile::Mac::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::keyfile::Mac where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::keyfile::Mac
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::keyfile::Mac
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::keyfile::Mac
pub type rustic_core::repofile::keyfile::Mac::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::keyfile::Mac where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::keyfile::Mac::vzip(self) -> V
pub struct rustic_core::repofile::keyfile::MasterKey
pub rustic_core::repofile::keyfile::MasterKey::encrypt: alloc::vec::Vec<u8>
pub rustic_core::repofile::keyfile::MasterKey::mac: rustic_core::repofile::keyfile::Mac
impl rustic_core::repofile::keyfile::MasterKey
pub fn rustic_core::repofile::keyfile::MasterKey::from_key(key: rustic_core::crypto::aespoly1305::Key) -> Self
pub fn rustic_core::repofile::keyfile::MasterKey::key(&self) -> rustic_core::crypto::aespoly1305::Key
impl core::fmt::Debug for rustic_core::repofile::keyfile::MasterKey
pub fn rustic_core::repofile::keyfile::MasterKey::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::keyfile::MasterKey
pub fn rustic_core::repofile::keyfile::MasterKey::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::keyfile::MasterKey
pub fn rustic_core::repofile::keyfile::MasterKey::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::keyfile::MasterKey
impl core::marker::Sync for rustic_core::repofile::keyfile::MasterKey
impl core::marker::Unpin for rustic_core::repofile::keyfile::MasterKey
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::keyfile::MasterKey
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::keyfile::MasterKey
impl<T, U> core::convert::Into<U> for rustic_core::repofile::keyfile::MasterKey where U: core::convert::From<T>
pub fn rustic_core::repofile::keyfile::MasterKey::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::keyfile::MasterKey where U: core::convert::Into<T>
pub type rustic_core::repofile::keyfile::MasterKey::Error = core::convert::Infallible
pub fn rustic_core::repofile::keyfile::MasterKey::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::keyfile::MasterKey where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::keyfile::MasterKey::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::keyfile::MasterKey::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::repofile::keyfile::MasterKey where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::keyfile::MasterKey::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::keyfile::MasterKey where T: core::marker::Sized
pub fn rustic_core::repofile::keyfile::MasterKey::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::keyfile::MasterKey where T: core::marker::Sized
pub fn rustic_core::repofile::keyfile::MasterKey::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::keyfile::MasterKey
pub fn rustic_core::repofile::keyfile::MasterKey::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::keyfile::MasterKey
pub type rustic_core::repofile::keyfile::MasterKey::Init = T
pub const rustic_core::repofile::keyfile::MasterKey::ALIGN: usize
pub unsafe fn rustic_core::repofile::keyfile::MasterKey::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::keyfile::MasterKey::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::keyfile::MasterKey::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::keyfile::MasterKey::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::keyfile::MasterKey where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::keyfile::MasterKey
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::keyfile::MasterKey
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::keyfile::MasterKey
pub type rustic_core::repofile::keyfile::MasterKey::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::keyfile::MasterKey where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::keyfile::MasterKey::vzip(self) -> V
pub fn rustic_core::repofile::keyfile::find_key_in_backend<B: rustic_core::backend::ReadBackend>(be: &B, passwd: &impl core::convert::AsRef<[u8]>, hint: core::option::Option<&rustic_core::id::Id>) -> rustic_core::error::RusticResult<rustic_core::crypto::aespoly1305::Key>
pub fn rustic_core::repofile::keyfile::key_from_backend<B: rustic_core::backend::ReadBackend>(be: &B, id: &rustic_core::id::Id, passwd: &impl core::convert::AsRef<[u8]>) -> rustic_core::error::RusticResult<rustic_core::crypto::aespoly1305::Key>
pub fn rustic_core::repofile::keyfile::log_2(x: u32) -> rustic_core::error::RusticResult<u8>
pub mod rustic_core::repofile::packfile
pub mod rustic_core::repofile::packfile::constants
pub const rustic_core::repofile::packfile::constants::COMP_OVERHEAD: u32 = 32u32
pub const rustic_core::repofile::packfile::constants::LENGTH_LEN: u32 = 4u32
pub enum rustic_core::repofile::packfile::HeaderEntry
pub rustic_core::repofile::packfile::HeaderEntry::CompData
pub rustic_core::repofile::packfile::HeaderEntry::CompData::id: rustic_core::id::Id
pub rustic_core::repofile::packfile::HeaderEntry::CompData::len: u32
pub rustic_core::repofile::packfile::HeaderEntry::CompData::len_data: u32
pub rustic_core::repofile::packfile::HeaderEntry::CompTree
pub rustic_core::repofile::packfile::HeaderEntry::CompTree::id: rustic_core::id::Id
pub rustic_core::repofile::packfile::HeaderEntry::CompTree::len: u32
pub rustic_core::repofile::packfile::HeaderEntry::CompTree::len_data: u32
pub rustic_core::repofile::packfile::HeaderEntry::Data
pub rustic_core::repofile::packfile::HeaderEntry::Data::id: rustic_core::id::Id
pub rustic_core::repofile::packfile::HeaderEntry::Data::len: u32
pub rustic_core::repofile::packfile::HeaderEntry::Tree
pub rustic_core::repofile::packfile::HeaderEntry::Tree::id: rustic_core::id::Id
pub rustic_core::repofile::packfile::HeaderEntry::Tree::len: u32
impl rustic_core::repofile::packfile::HeaderEntry
pub const rustic_core::repofile::packfile::HeaderEntry::ENTRY_LEN: u32
pub const rustic_core::repofile::packfile::HeaderEntry::ENTRY_LEN_COMPRESSED: u32
pub const fn rustic_core::repofile::packfile::HeaderEntry::from_blob(blob: &rustic_core::repofile::indexfile::IndexBlob) -> Self
pub const fn rustic_core::repofile::packfile::HeaderEntry::into_blob(self, offset: u32) -> rustic_core::repofile::indexfile::IndexBlob
pub const fn rustic_core::repofile::packfile::HeaderEntry::length(&self) -> u32
impl binrw::meta::ReadEndian for rustic_core::repofile::packfile::HeaderEntry
pub const rustic_core::repofile::packfile::HeaderEntry::ENDIAN: binrw::meta::EndianKind
impl binrw::meta::WriteEndian for rustic_core::repofile::packfile::HeaderEntry
pub const rustic_core::repofile::packfile::HeaderEntry::ENDIAN: binrw::meta::EndianKind
impl binrw::binread::BinRead for rustic_core::repofile::packfile::HeaderEntry
pub type rustic_core::repofile::packfile::HeaderEntry::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::repofile::packfile::HeaderEntry::read_options<R: std::io::Read + std::io::Seek>(__binrw_generated_var_reader: &mut R, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<Self>
impl binrw::binwrite::BinWrite for rustic_core::repofile::packfile::HeaderEntry
pub type rustic_core::repofile::packfile::HeaderEntry::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::repofile::packfile::HeaderEntry::write_options<W: std::io::Write + std::io::Seek>(&self, __binrw_generated_var_writer: &mut W, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<()>
impl core::clone::Clone for rustic_core::repofile::packfile::HeaderEntry
pub fn rustic_core::repofile::packfile::HeaderEntry::clone(&self) -> rustic_core::repofile::packfile::HeaderEntry
impl core::fmt::Debug for rustic_core::repofile::packfile::HeaderEntry
pub fn rustic_core::repofile::packfile::HeaderEntry::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::repofile::packfile::HeaderEntry
impl core::marker::Send for rustic_core::repofile::packfile::HeaderEntry
impl core::marker::Sync for rustic_core::repofile::packfile::HeaderEntry
impl core::marker::Unpin for rustic_core::repofile::packfile::HeaderEntry
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::packfile::HeaderEntry
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::packfile::HeaderEntry
impl<T, U> core::convert::Into<U> for rustic_core::repofile::packfile::HeaderEntry where U: core::convert::From<T>
pub fn rustic_core::repofile::packfile::HeaderEntry::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::packfile::HeaderEntry where U: core::convert::Into<T>
pub type rustic_core::repofile::packfile::HeaderEntry::Error = core::convert::Infallible
pub fn rustic_core::repofile::packfile::HeaderEntry::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::packfile::HeaderEntry where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::packfile::HeaderEntry::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::packfile::HeaderEntry::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::packfile::HeaderEntry where T: core::clone::Clone
pub type rustic_core::repofile::packfile::HeaderEntry::Owned = T
pub fn rustic_core::repofile::packfile::HeaderEntry::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::packfile::HeaderEntry::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::packfile::HeaderEntry where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::packfile::HeaderEntry::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::packfile::HeaderEntry where T: core::marker::Sized
pub fn rustic_core::repofile::packfile::HeaderEntry::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::packfile::HeaderEntry where T: core::marker::Sized
pub fn rustic_core::repofile::packfile::HeaderEntry::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::packfile::HeaderEntry
pub fn rustic_core::repofile::packfile::HeaderEntry::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::packfile::HeaderEntry
pub type rustic_core::repofile::packfile::HeaderEntry::Init = T
pub const rustic_core::repofile::packfile::HeaderEntry::ALIGN: usize
pub unsafe fn rustic_core::repofile::packfile::HeaderEntry::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::packfile::HeaderEntry::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::packfile::HeaderEntry::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::packfile::HeaderEntry::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::packfile::HeaderEntry
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::packfile::HeaderEntry
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::packfile::HeaderEntry
pub type rustic_core::repofile::packfile::HeaderEntry::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::packfile::HeaderEntry where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::packfile::HeaderEntry::vzip(self) -> V
pub struct rustic_core::repofile::packfile::PackHeader(pub alloc::vec::Vec<rustic_core::repofile::indexfile::IndexBlob>)
impl rustic_core::repofile::packfile::PackHeader
pub fn rustic_core::repofile::packfile::PackHeader::from_binary(pack: &[u8]) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::packfile::PackHeader::from_file(be: &impl rustic_core::backend::decrypt::DecryptReadBackend, id: rustic_core::id::Id, size_hint: core::option::Option<u32>, pack_size: u32) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::packfile::PackHeader::into_blobs(self) -> alloc::vec::Vec<rustic_core::repofile::indexfile::IndexBlob>
pub fn rustic_core::repofile::packfile::PackHeader::pack_size(&self) -> u32
pub fn rustic_core::repofile::packfile::PackHeader::size(&self) -> u32
impl core::clone::Clone for rustic_core::repofile::packfile::PackHeader
pub fn rustic_core::repofile::packfile::PackHeader::clone(&self) -> rustic_core::repofile::packfile::PackHeader
impl core::fmt::Debug for rustic_core::repofile::packfile::PackHeader
pub fn rustic_core::repofile::packfile::PackHeader::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::repofile::packfile::PackHeader
impl core::marker::Sync for rustic_core::repofile::packfile::PackHeader
impl core::marker::Unpin for rustic_core::repofile::packfile::PackHeader
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::packfile::PackHeader
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::packfile::PackHeader
impl<T, U> core::convert::Into<U> for rustic_core::repofile::packfile::PackHeader where U: core::convert::From<T>
pub fn rustic_core::repofile::packfile::PackHeader::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::packfile::PackHeader where U: core::convert::Into<T>
pub type rustic_core::repofile::packfile::PackHeader::Error = core::convert::Infallible
pub fn rustic_core::repofile::packfile::PackHeader::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::packfile::PackHeader where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::packfile::PackHeader::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::packfile::PackHeader::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::packfile::PackHeader where T: core::clone::Clone
pub type rustic_core::repofile::packfile::PackHeader::Owned = T
pub fn rustic_core::repofile::packfile::PackHeader::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::packfile::PackHeader::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::packfile::PackHeader where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::packfile::PackHeader::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::packfile::PackHeader where T: core::marker::Sized
pub fn rustic_core::repofile::packfile::PackHeader::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::packfile::PackHeader where T: core::marker::Sized
pub fn rustic_core::repofile::packfile::PackHeader::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::packfile::PackHeader
pub fn rustic_core::repofile::packfile::PackHeader::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::packfile::PackHeader
pub type rustic_core::repofile::packfile::PackHeader::Init = T
pub const rustic_core::repofile::packfile::PackHeader::ALIGN: usize
pub unsafe fn rustic_core::repofile::packfile::PackHeader::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::packfile::PackHeader::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::packfile::PackHeader::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::packfile::PackHeader::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::packfile::PackHeader
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::packfile::PackHeader
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::packfile::PackHeader
pub type rustic_core::repofile::packfile::PackHeader::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::packfile::PackHeader where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::packfile::PackHeader::vzip(self) -> V
pub struct rustic_core::repofile::packfile::PackHeaderLength(pub u32)
impl rustic_core::repofile::packfile::PackHeaderLength
pub fn rustic_core::repofile::packfile::PackHeaderLength::from_binary(data: &[u8]) -> rustic_core::error::RusticResult<Self>
pub const fn rustic_core::repofile::packfile::PackHeaderLength::from_u32(len: u32) -> Self
pub fn rustic_core::repofile::packfile::PackHeaderLength::to_binary(self) -> rustic_core::error::RusticResult<alloc::vec::Vec<u8>>
pub const fn rustic_core::repofile::packfile::PackHeaderLength::to_u32(self) -> u32
impl binrw::meta::ReadEndian for rustic_core::repofile::packfile::PackHeaderLength
pub const rustic_core::repofile::packfile::PackHeaderLength::ENDIAN: binrw::meta::EndianKind
impl binrw::meta::WriteEndian for rustic_core::repofile::packfile::PackHeaderLength
pub const rustic_core::repofile::packfile::PackHeaderLength::ENDIAN: binrw::meta::EndianKind
impl binrw::binread::BinRead for rustic_core::repofile::packfile::PackHeaderLength
pub type rustic_core::repofile::packfile::PackHeaderLength::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::repofile::packfile::PackHeaderLength::read_options<R: std::io::Read + std::io::Seek>(__binrw_generated_var_reader: &mut R, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<Self>
impl binrw::binwrite::BinWrite for rustic_core::repofile::packfile::PackHeaderLength
pub type rustic_core::repofile::packfile::PackHeaderLength::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::repofile::packfile::PackHeaderLength::write_options<W: std::io::Write + std::io::Seek>(&self, __binrw_generated_var_writer: &mut W, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<()>
impl core::clone::Clone for rustic_core::repofile::packfile::PackHeaderLength
pub fn rustic_core::repofile::packfile::PackHeaderLength::clone(&self) -> rustic_core::repofile::packfile::PackHeaderLength
impl core::fmt::Debug for rustic_core::repofile::packfile::PackHeaderLength
pub fn rustic_core::repofile::packfile::PackHeaderLength::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::repofile::packfile::PackHeaderLength
impl core::marker::Send for rustic_core::repofile::packfile::PackHeaderLength
impl core::marker::Sync for rustic_core::repofile::packfile::PackHeaderLength
impl core::marker::Unpin for rustic_core::repofile::packfile::PackHeaderLength
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::packfile::PackHeaderLength
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::packfile::PackHeaderLength
impl<T, U> core::convert::Into<U> for rustic_core::repofile::packfile::PackHeaderLength where U: core::convert::From<T>
pub fn rustic_core::repofile::packfile::PackHeaderLength::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::packfile::PackHeaderLength where U: core::convert::Into<T>
pub type rustic_core::repofile::packfile::PackHeaderLength::Error = core::convert::Infallible
pub fn rustic_core::repofile::packfile::PackHeaderLength::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::packfile::PackHeaderLength where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::packfile::PackHeaderLength::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::packfile::PackHeaderLength::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::packfile::PackHeaderLength where T: core::clone::Clone
pub type rustic_core::repofile::packfile::PackHeaderLength::Owned = T
pub fn rustic_core::repofile::packfile::PackHeaderLength::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::packfile::PackHeaderLength::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::packfile::PackHeaderLength where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::packfile::PackHeaderLength::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::packfile::PackHeaderLength where T: core::marker::Sized
pub fn rustic_core::repofile::packfile::PackHeaderLength::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::packfile::PackHeaderLength where T: core::marker::Sized
pub fn rustic_core::repofile::packfile::PackHeaderLength::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::packfile::PackHeaderLength
pub fn rustic_core::repofile::packfile::PackHeaderLength::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::packfile::PackHeaderLength
pub type rustic_core::repofile::packfile::PackHeaderLength::Init = T
pub const rustic_core::repofile::packfile::PackHeaderLength::ALIGN: usize
pub unsafe fn rustic_core::repofile::packfile::PackHeaderLength::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::packfile::PackHeaderLength::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::packfile::PackHeaderLength::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::packfile::PackHeaderLength::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::packfile::PackHeaderLength
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::packfile::PackHeaderLength
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::packfile::PackHeaderLength
pub type rustic_core::repofile::packfile::PackHeaderLength::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::packfile::PackHeaderLength where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::packfile::PackHeaderLength::vzip(self) -> V
pub struct rustic_core::repofile::packfile::PackHeaderRef<'a>(pub &'a [rustic_core::repofile::indexfile::IndexBlob])
impl<'a> rustic_core::repofile::packfile::PackHeaderRef<'a>
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::from_index_pack(pack: &'a rustic_core::repofile::indexfile::IndexPack) -> Self
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::pack_size(&self) -> u32
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::size(&self) -> u32
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::to_binary(&self) -> rustic_core::error::RusticResult<alloc::vec::Vec<u8>>
impl<'a> core::clone::Clone for rustic_core::repofile::packfile::PackHeaderRef<'a>
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::clone(&self) -> rustic_core::repofile::packfile::PackHeaderRef<'a>
impl<'a> core::fmt::Debug for rustic_core::repofile::packfile::PackHeaderRef<'a>
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<'a> core::marker::Send for rustic_core::repofile::packfile::PackHeaderRef<'a>
impl<'a> core::marker::Sync for rustic_core::repofile::packfile::PackHeaderRef<'a>
impl<'a> core::marker::Unpin for rustic_core::repofile::packfile::PackHeaderRef<'a>
impl<'a> core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::packfile::PackHeaderRef<'a>
impl<'a> core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::packfile::PackHeaderRef<'a>
impl<T, U> core::convert::Into<U> for rustic_core::repofile::packfile::PackHeaderRef<'a> where U: core::convert::From<T>
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::packfile::PackHeaderRef<'a> where U: core::convert::Into<T>
pub type rustic_core::repofile::packfile::PackHeaderRef<'a>::Error = core::convert::Infallible
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::packfile::PackHeaderRef<'a> where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::packfile::PackHeaderRef<'a>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::packfile::PackHeaderRef<'a> where T: core::clone::Clone
pub type rustic_core::repofile::packfile::PackHeaderRef<'a>::Owned = T
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::packfile::PackHeaderRef<'a> where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::packfile::PackHeaderRef<'a> where T: core::marker::Sized
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::packfile::PackHeaderRef<'a> where T: core::marker::Sized
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::packfile::PackHeaderRef<'a>
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::packfile::PackHeaderRef<'a>
pub type rustic_core::repofile::packfile::PackHeaderRef<'a>::Init = T
pub const rustic_core::repofile::packfile::PackHeaderRef<'a>::ALIGN: usize
pub unsafe fn rustic_core::repofile::packfile::PackHeaderRef<'a>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::packfile::PackHeaderRef<'a>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::packfile::PackHeaderRef<'a>::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::packfile::PackHeaderRef<'a>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::packfile::PackHeaderRef<'a>
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::packfile::PackHeaderRef<'a>
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::packfile::PackHeaderRef<'a>
pub type rustic_core::repofile::packfile::PackHeaderRef<'a>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::packfile::PackHeaderRef<'a> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::vzip(self) -> V
pub mod rustic_core::repofile::snapshotfile
pub enum rustic_core::repofile::snapshotfile::DeleteOption
pub rustic_core::repofile::snapshotfile::DeleteOption::After(chrono::datetime::DateTime<chrono::offset::local::Local>)
pub rustic_core::repofile::snapshotfile::DeleteOption::Never
pub rustic_core::repofile::snapshotfile::DeleteOption::NotSet
impl rustic_core::repofile::snapshotfile::DeleteOption
pub const fn rustic_core::repofile::snapshotfile::DeleteOption::is_not_set(&self) -> bool
impl core::default::Default for rustic_core::repofile::snapshotfile::DeleteOption
pub fn rustic_core::repofile::snapshotfile::DeleteOption::default() -> Self
impl core::clone::Clone for rustic_core::repofile::snapshotfile::DeleteOption
pub fn rustic_core::repofile::snapshotfile::DeleteOption::clone(&self) -> rustic_core::repofile::snapshotfile::DeleteOption
impl core::cmp::Eq for rustic_core::repofile::snapshotfile::DeleteOption
impl core::cmp::PartialEq<rustic_core::repofile::snapshotfile::DeleteOption> for rustic_core::repofile::snapshotfile::DeleteOption
pub fn rustic_core::repofile::snapshotfile::DeleteOption::eq(&self, other: &rustic_core::repofile::snapshotfile::DeleteOption) -> bool
impl core::fmt::Debug for rustic_core::repofile::snapshotfile::DeleteOption
pub fn rustic_core::repofile::snapshotfile::DeleteOption::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::repofile::snapshotfile::DeleteOption
impl core::marker::StructuralEq for rustic_core::repofile::snapshotfile::DeleteOption
impl core::marker::StructuralPartialEq for rustic_core::repofile::snapshotfile::DeleteOption
impl serde::ser::Serialize for rustic_core::repofile::snapshotfile::DeleteOption
pub fn rustic_core::repofile::snapshotfile::DeleteOption::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::snapshotfile::DeleteOption
pub fn rustic_core::repofile::snapshotfile::DeleteOption::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::snapshotfile::DeleteOption
impl core::marker::Sync for rustic_core::repofile::snapshotfile::DeleteOption
impl core::marker::Unpin for rustic_core::repofile::snapshotfile::DeleteOption
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::snapshotfile::DeleteOption
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::snapshotfile::DeleteOption
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::snapshotfile::DeleteOption where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::DeleteOption::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::snapshotfile::DeleteOption where U: core::convert::From<T>
pub fn rustic_core::repofile::snapshotfile::DeleteOption::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::snapshotfile::DeleteOption where U: core::convert::Into<T>
pub type rustic_core::repofile::snapshotfile::DeleteOption::Error = core::convert::Infallible
pub fn rustic_core::repofile::snapshotfile::DeleteOption::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::snapshotfile::DeleteOption where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::snapshotfile::DeleteOption::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::snapshotfile::DeleteOption::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::snapshotfile::DeleteOption where T: core::clone::Clone
pub type rustic_core::repofile::snapshotfile::DeleteOption::Owned = T
pub fn rustic_core::repofile::snapshotfile::DeleteOption::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::snapshotfile::DeleteOption::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::snapshotfile::DeleteOption where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::DeleteOption::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::snapshotfile::DeleteOption where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::DeleteOption::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::snapshotfile::DeleteOption where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::DeleteOption::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::snapshotfile::DeleteOption
pub fn rustic_core::repofile::snapshotfile::DeleteOption::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::snapshotfile::DeleteOption
pub type rustic_core::repofile::snapshotfile::DeleteOption::Init = T
pub const rustic_core::repofile::snapshotfile::DeleteOption::ALIGN: usize
pub unsafe fn rustic_core::repofile::snapshotfile::DeleteOption::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::snapshotfile::DeleteOption::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::snapshotfile::DeleteOption::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::snapshotfile::DeleteOption::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::snapshotfile::DeleteOption where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::snapshotfile::DeleteOption
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::snapshotfile::DeleteOption
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::snapshotfile::DeleteOption
pub type rustic_core::repofile::snapshotfile::DeleteOption::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::snapshotfile::DeleteOption where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::snapshotfile::DeleteOption::vzip(self) -> V
pub struct rustic_core::repofile::snapshotfile::PathList(pub alloc::vec::Vec<std::path::PathBuf>)
impl rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::from_string(sources: &str) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::snapshotfile::PathList::from_strings<I>(source: I) -> Self where I: core::iter::traits::collect::IntoIterator, <I as core::iter::traits::collect::IntoIterator>::Item: core::convert::AsRef<str>
pub fn rustic_core::repofile::snapshotfile::PathList::is_empty(&self) -> bool
pub fn rustic_core::repofile::snapshotfile::PathList::len(&self) -> usize
pub fn rustic_core::repofile::snapshotfile::PathList::merge(self) -> Self
pub fn rustic_core::repofile::snapshotfile::PathList::paths(&self) -> alloc::vec::Vec<std::path::PathBuf>
pub fn rustic_core::repofile::snapshotfile::PathList::sanitize(self) -> rustic_core::error::RusticResult<Self>
impl core::fmt::Display for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::clone::Clone for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::clone(&self) -> rustic_core::repofile::snapshotfile::PathList
impl core::cmp::Eq for rustic_core::repofile::snapshotfile::PathList
impl core::cmp::Ord for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::cmp(&self, other: &rustic_core::repofile::snapshotfile::PathList) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::repofile::snapshotfile::PathList> for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::eq(&self, other: &rustic_core::repofile::snapshotfile::PathList) -> bool
impl core::cmp::PartialOrd<rustic_core::repofile::snapshotfile::PathList> for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::partial_cmp(&self, other: &rustic_core::repofile::snapshotfile::PathList) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::default() -> rustic_core::repofile::snapshotfile::PathList
impl core::fmt::Debug for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::repofile::snapshotfile::PathList
impl core::marker::StructuralPartialEq for rustic_core::repofile::snapshotfile::PathList
impl core::marker::Send for rustic_core::repofile::snapshotfile::PathList
impl core::marker::Sync for rustic_core::repofile::snapshotfile::PathList
impl core::marker::Unpin for rustic_core::repofile::snapshotfile::PathList
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::snapshotfile::PathList
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::snapshotfile::PathList
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::snapshotfile::PathList where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::PathList::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::snapshotfile::PathList where U: core::convert::From<T>
pub fn rustic_core::repofile::snapshotfile::PathList::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::snapshotfile::PathList where U: core::convert::Into<T>
pub type rustic_core::repofile::snapshotfile::PathList::Error = core::convert::Infallible
pub fn rustic_core::repofile::snapshotfile::PathList::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::snapshotfile::PathList where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::snapshotfile::PathList::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::snapshotfile::PathList::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::snapshotfile::PathList where T: core::clone::Clone
pub type rustic_core::repofile::snapshotfile::PathList::Owned = T
pub fn rustic_core::repofile::snapshotfile::PathList::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::snapshotfile::PathList::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::repofile::snapshotfile::PathList where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::PathList::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::repofile::snapshotfile::PathList where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::repofile::snapshotfile::PathList::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::PathList::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::PathList::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::repofile::snapshotfile::PathList where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::PathList::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::snapshotfile::PathList where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::PathList::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::snapshotfile::PathList where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::PathList::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::snapshotfile::PathList
pub type rustic_core::repofile::snapshotfile::PathList::Init = T
pub const rustic_core::repofile::snapshotfile::PathList::ALIGN: usize
pub unsafe fn rustic_core::repofile::snapshotfile::PathList::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::snapshotfile::PathList::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::snapshotfile::PathList::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::snapshotfile::PathList::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::snapshotfile::PathList
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::snapshotfile::PathList
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::snapshotfile::PathList
pub type rustic_core::repofile::snapshotfile::PathList::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::snapshotfile::PathList where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::snapshotfile::PathList::vzip(self) -> V
pub struct rustic_core::repofile::snapshotfile::SnapshotFile
pub rustic_core::repofile::snapshotfile::SnapshotFile::delete: rustic_core::repofile::snapshotfile::DeleteOption
pub rustic_core::repofile::snapshotfile::SnapshotFile::description: core::option::Option<alloc::string::String>
pub rustic_core::repofile::snapshotfile::SnapshotFile::gid: u32
pub rustic_core::repofile::snapshotfile::SnapshotFile::hostname: alloc::string::String
pub rustic_core::repofile::snapshotfile::SnapshotFile::id: rustic_core::id::Id
pub rustic_core::repofile::snapshotfile::SnapshotFile::label: alloc::string::String
pub rustic_core::repofile::snapshotfile::SnapshotFile::original: core::option::Option<rustic_core::id::Id>
pub rustic_core::repofile::snapshotfile::SnapshotFile::parent: core::option::Option<rustic_core::id::Id>
pub rustic_core::repofile::snapshotfile::SnapshotFile::paths: rustic_core::repofile::snapshotfile::StringList
pub rustic_core::repofile::snapshotfile::SnapshotFile::program_version: alloc::string::String
pub rustic_core::repofile::snapshotfile::SnapshotFile::summary: core::option::Option<rustic_core::repofile::snapshotfile::SnapshotSummary>
pub rustic_core::repofile::snapshotfile::SnapshotFile::tags: rustic_core::repofile::snapshotfile::StringList
pub rustic_core::repofile::snapshotfile::SnapshotFile::time: chrono::datetime::DateTime<chrono::offset::local::Local>
pub rustic_core::repofile::snapshotfile::SnapshotFile::tree: rustic_core::id::Id
pub rustic_core::repofile::snapshotfile::SnapshotFile::uid: u32
pub rustic_core::repofile::snapshotfile::SnapshotFile::username: alloc::string::String
impl rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::add_tags(&mut self, tag_lists: alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>) -> bool
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::all_from_backend<B, F>(be: &B, filter: F, p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<alloc::vec::Vec<Self>> where B: rustic_core::backend::decrypt::DecryptReadBackend, F: core::ops::function::FnMut(&Self) -> bool
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::clear_ids(sn: Self) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::cmp_group(&self, crit: rustic_core::repofile::snapshotfile::SnapshotGroupCriterion, other: &Self) -> core::cmp::Ordering
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::from_backend<B: rustic_core::backend::decrypt::DecryptReadBackend>(be: &B, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::from_id<B: rustic_core::backend::decrypt::DecryptReadBackend>(be: &B, id: &str) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::from_ids<B: rustic_core::backend::decrypt::DecryptReadBackend, T: core::convert::AsRef<str>>(be: &B, ids: &[T], p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<alloc::vec::Vec<Self>>
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::from_options(opts: &rustic_core::repofile::snapshotfile::SnapshotOptions) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::from_str<B: rustic_core::backend::decrypt::DecryptReadBackend>(be: &B, string: &str, predicate: impl core::ops::function::FnMut(&Self) -> bool + core::marker::Send + core::marker::Sync, p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::group_from_backend<B, F>(be: &B, filter: F, crit: rustic_core::repofile::snapshotfile::SnapshotGroupCriterion, p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::repofile::snapshotfile::SnapshotGroup, alloc::vec::Vec<Self>)>> where B: rustic_core::backend::decrypt::DecryptReadBackend, F: core::ops::function::FnMut(&Self) -> bool
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::has_group(&self, group: &rustic_core::repofile::snapshotfile::SnapshotGroup) -> bool
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::latest<B: rustic_core::backend::decrypt::DecryptReadBackend>(be: &B, predicate: impl core::ops::function::FnMut(&Self) -> bool + core::marker::Send + core::marker::Sync, p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::modify_sn(&mut self, set: alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>, add: alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>, remove: &[rustic_core::repofile::snapshotfile::StringList], delete: &core::option::Option<rustic_core::repofile::snapshotfile::DeleteOption>) -> core::option::Option<Self>
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::must_delete(&self, now: chrono::datetime::DateTime<chrono::offset::local::Local>) -> bool
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::must_keep(&self, now: chrono::datetime::DateTime<chrono::offset::local::Local>) -> bool
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::remove_tags(&mut self, tag_lists: &[rustic_core::repofile::snapshotfile::StringList]) -> bool
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::set_id(tuple: (rustic_core::id::Id, Self)) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::set_tags(&mut self, tag_lists: alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>) -> bool
impl core::cmp::Eq for rustic_core::repofile::snapshotfile::SnapshotFile
impl core::cmp::Ord for rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::cmp(&self, other: &Self) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::repofile::snapshotfile::SnapshotFile> for rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::eq(&self, other: &Self) -> bool
impl core::cmp::PartialOrd<rustic_core::repofile::snapshotfile::SnapshotFile> for rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::partial_cmp(&self, other: &Self) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::default() -> Self
impl rustic_core::repofile::RepoFile for rustic_core::repofile::snapshotfile::SnapshotFile
pub const rustic_core::repofile::snapshotfile::SnapshotFile::TYPE: rustic_core::backend::FileType
impl core::clone::Clone for rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::clone(&self) -> rustic_core::repofile::snapshotfile::SnapshotFile
impl core::fmt::Debug for rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::snapshotfile::SnapshotFile
impl core::marker::Sync for rustic_core::repofile::snapshotfile::SnapshotFile
impl core::marker::Unpin for rustic_core::repofile::snapshotfile::SnapshotFile
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::snapshotfile::SnapshotFile
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::snapshotfile::SnapshotFile
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::snapshotfile::SnapshotFile where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::snapshotfile::SnapshotFile where U: core::convert::From<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::snapshotfile::SnapshotFile where U: core::convert::Into<T>
pub type rustic_core::repofile::snapshotfile::SnapshotFile::Error = core::convert::Infallible
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::snapshotfile::SnapshotFile where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::snapshotfile::SnapshotFile::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::snapshotfile::SnapshotFile where T: core::clone::Clone
pub type rustic_core::repofile::snapshotfile::SnapshotFile::Owned = T
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::snapshotfile::SnapshotFile where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::snapshotfile::SnapshotFile where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::snapshotfile::SnapshotFile where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::snapshotfile::SnapshotFile
pub type rustic_core::repofile::snapshotfile::SnapshotFile::Init = T
pub const rustic_core::repofile::snapshotfile::SnapshotFile::ALIGN: usize
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotFile::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotFile::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotFile::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotFile::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::snapshotfile::SnapshotFile where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::snapshotfile::SnapshotFile
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::snapshotfile::SnapshotFile
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::snapshotfile::SnapshotFile
pub type rustic_core::repofile::snapshotfile::SnapshotFile::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::snapshotfile::SnapshotFile where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::repofile::snapshotfile::SnapshotGroup
pub rustic_core::repofile::snapshotfile::SnapshotGroup::hostname: core::option::Option<alloc::string::String>
pub rustic_core::repofile::snapshotfile::SnapshotGroup::label: core::option::Option<alloc::string::String>
pub rustic_core::repofile::snapshotfile::SnapshotGroup::paths: core::option::Option<rustic_core::repofile::snapshotfile::StringList>
pub rustic_core::repofile::snapshotfile::SnapshotGroup::tags: core::option::Option<rustic_core::repofile::snapshotfile::StringList>
impl rustic_core::repofile::snapshotfile::SnapshotGroup
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::from_snapshot(sn: &rustic_core::repofile::snapshotfile::SnapshotFile, crit: rustic_core::repofile::snapshotfile::SnapshotGroupCriterion) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::is_empty(&self) -> bool
impl core::fmt::Display for rustic_core::repofile::snapshotfile::SnapshotGroup
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::cmp::Eq for rustic_core::repofile::snapshotfile::SnapshotGroup
impl core::cmp::PartialEq<rustic_core::repofile::snapshotfile::SnapshotGroup> for rustic_core::repofile::snapshotfile::SnapshotGroup
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::eq(&self, other: &rustic_core::repofile::snapshotfile::SnapshotGroup) -> bool
impl core::default::Default for rustic_core::repofile::snapshotfile::SnapshotGroup
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::default() -> rustic_core::repofile::snapshotfile::SnapshotGroup
impl core::fmt::Debug for rustic_core::repofile::snapshotfile::SnapshotGroup
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::repofile::snapshotfile::SnapshotGroup
impl core::marker::StructuralPartialEq for rustic_core::repofile::snapshotfile::SnapshotGroup
impl serde::ser::Serialize for rustic_core::repofile::snapshotfile::SnapshotGroup
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl core::marker::Send for rustic_core::repofile::snapshotfile::SnapshotGroup
impl core::marker::Sync for rustic_core::repofile::snapshotfile::SnapshotGroup
impl core::marker::Unpin for rustic_core::repofile::snapshotfile::SnapshotGroup
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::snapshotfile::SnapshotGroup
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::snapshotfile::SnapshotGroup
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::snapshotfile::SnapshotGroup where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::snapshotfile::SnapshotGroup where U: core::convert::From<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::snapshotfile::SnapshotGroup where U: core::convert::Into<T>
pub type rustic_core::repofile::snapshotfile::SnapshotGroup::Error = core::convert::Infallible
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::snapshotfile::SnapshotGroup where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::snapshotfile::SnapshotGroup::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::repofile::snapshotfile::SnapshotGroup where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::repofile::snapshotfile::SnapshotGroup where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::repofile::snapshotfile::SnapshotGroup where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::snapshotfile::SnapshotGroup where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::snapshotfile::SnapshotGroup where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::snapshotfile::SnapshotGroup
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::snapshotfile::SnapshotGroup
pub type rustic_core::repofile::snapshotfile::SnapshotGroup::Init = T
pub const rustic_core::repofile::snapshotfile::SnapshotGroup::ALIGN: usize
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotGroup::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotGroup::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotGroup::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotGroup::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::snapshotfile::SnapshotGroup
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::snapshotfile::SnapshotGroup
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::snapshotfile::SnapshotGroup
pub type rustic_core::repofile::snapshotfile::SnapshotGroup::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::snapshotfile::SnapshotGroup where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::hostname: bool
pub rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::label: bool
pub rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::paths: bool
pub rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::tags: bool
impl rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::hostname(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::label(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::paths(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::tags(self, value: impl core::convert::Into<bool>) -> Self
impl core::default::Default for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::default() -> Self
impl core::fmt::Display for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::str::traits::FromStr for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub type rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::Err = rustic_core::error::RusticError
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::from_str(s: &str) -> rustic_core::error::RusticResult<Self>
impl core::clone::Clone for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::clone(&self) -> rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
impl core::fmt::Debug for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
impl core::marker::Send for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
impl core::marker::Sync for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
impl core::marker::Unpin for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
impl<T, U> core::convert::Into<U> for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where U: core::convert::From<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where U: core::convert::Into<T>
pub type rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::Error = core::convert::Infallible
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where T: core::clone::Clone
pub type rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::Owned = T
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub type rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::Init = T
pub const rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::ALIGN: usize
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub type rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::repofile::snapshotfile::SnapshotOptions
pub rustic_core::repofile::snapshotfile::SnapshotOptions::command: core::option::Option<alloc::string::String>
pub rustic_core::repofile::snapshotfile::SnapshotOptions::delete_after: core::option::Option<humantime::wrapper::Duration>
pub rustic_core::repofile::snapshotfile::SnapshotOptions::delete_never: bool
pub rustic_core::repofile::snapshotfile::SnapshotOptions::description: core::option::Option<alloc::string::String>
pub rustic_core::repofile::snapshotfile::SnapshotOptions::description_from: core::option::Option<std::path::PathBuf>
pub rustic_core::repofile::snapshotfile::SnapshotOptions::host: core::option::Option<alloc::string::String>
pub rustic_core::repofile::snapshotfile::SnapshotOptions::label: core::option::Option<alloc::string::String>
pub rustic_core::repofile::snapshotfile::SnapshotOptions::tag: alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>
pub rustic_core::repofile::snapshotfile::SnapshotOptions::time: core::option::Option<chrono::datetime::DateTime<chrono::offset::local::Local>>
impl rustic_core::repofile::snapshotfile::SnapshotOptions
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::add_tags(self, tag: &str) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::to_snapshot(&self) -> rustic_core::error::RusticResult<rustic_core::repofile::snapshotfile::SnapshotFile>
impl rustic_core::repofile::snapshotfile::SnapshotOptions
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::command(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::delete_after(self, value: impl core::convert::Into<core::option::Option<humantime::wrapper::Duration>>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::delete_never(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::description(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::description_from(self, value: impl core::convert::Into<core::option::Option<std::path::PathBuf>>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::host(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::label(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::tag(self, value: impl core::convert::Into<alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::time(self, value: impl core::convert::Into<core::option::Option<chrono::datetime::DateTime<chrono::offset::local::Local>>>) -> Self
impl core::clone::Clone for rustic_core::repofile::snapshotfile::SnapshotOptions
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::clone(&self) -> rustic_core::repofile::snapshotfile::SnapshotOptions
impl core::default::Default for rustic_core::repofile::snapshotfile::SnapshotOptions
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::default() -> rustic_core::repofile::snapshotfile::SnapshotOptions
impl core::fmt::Debug for rustic_core::repofile::snapshotfile::SnapshotOptions
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::snapshotfile::SnapshotOptions
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::snapshotfile::SnapshotOptions where rustic_core::repofile::snapshotfile::SnapshotOptions: core::default::Default
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::snapshotfile::SnapshotOptions
impl core::marker::Sync for rustic_core::repofile::snapshotfile::SnapshotOptions
impl core::marker::Unpin for rustic_core::repofile::snapshotfile::SnapshotOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::snapshotfile::SnapshotOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::snapshotfile::SnapshotOptions
impl<T, U> core::convert::Into<U> for rustic_core::repofile::snapshotfile::SnapshotOptions where U: core::convert::From<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::snapshotfile::SnapshotOptions where U: core::convert::Into<T>
pub type rustic_core::repofile::snapshotfile::SnapshotOptions::Error = core::convert::Infallible
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::snapshotfile::SnapshotOptions where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::snapshotfile::SnapshotOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::snapshotfile::SnapshotOptions where T: core::clone::Clone
pub type rustic_core::repofile::snapshotfile::SnapshotOptions::Owned = T
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::snapshotfile::SnapshotOptions where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::snapshotfile::SnapshotOptions where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::snapshotfile::SnapshotOptions where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::snapshotfile::SnapshotOptions
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::snapshotfile::SnapshotOptions
pub type rustic_core::repofile::snapshotfile::SnapshotOptions::Init = T
pub const rustic_core::repofile::snapshotfile::SnapshotOptions::ALIGN: usize
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotOptions::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::snapshotfile::SnapshotOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::snapshotfile::SnapshotOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::snapshotfile::SnapshotOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::snapshotfile::SnapshotOptions
pub type rustic_core::repofile::snapshotfile::SnapshotOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::snapshotfile::SnapshotOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::repofile::snapshotfile::SnapshotSummary
pub rustic_core::repofile::snapshotfile::SnapshotSummary::backup_duration: f64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::backup_end: chrono::datetime::DateTime<chrono::offset::local::Local>
pub rustic_core::repofile::snapshotfile::SnapshotSummary::backup_start: chrono::datetime::DateTime<chrono::offset::local::Local>
pub rustic_core::repofile::snapshotfile::SnapshotSummary::command: alloc::string::String
pub rustic_core::repofile::snapshotfile::SnapshotSummary::data_added: u64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::data_added_files: u64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::data_added_files_packed: u64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::data_added_packed: u64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::data_added_trees: u64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::data_added_trees_packed: u64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::data_blobs: u64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::dirs_changed: u64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::dirs_new: u64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::dirs_unmodified: u64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::files_changed: u64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::files_new: u64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::files_unmodified: u64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::total_bytes_processed: u64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::total_dirs_processed: u64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::total_dirsize_processed: u64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::total_duration: f64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::total_files_processed: u64
pub rustic_core::repofile::snapshotfile::SnapshotSummary::tree_blobs: u64
impl rustic_core::repofile::snapshotfile::SnapshotSummary
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::finalize(&mut self, snap_time: chrono::datetime::DateTime<chrono::offset::local::Local>) -> rustic_core::error::RusticResult<()>
impl core::default::Default for rustic_core::repofile::snapshotfile::SnapshotSummary
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::default() -> Self
impl core::clone::Clone for rustic_core::repofile::snapshotfile::SnapshotSummary
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::clone(&self) -> rustic_core::repofile::snapshotfile::SnapshotSummary
impl core::fmt::Debug for rustic_core::repofile::snapshotfile::SnapshotSummary
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::snapshotfile::SnapshotSummary
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::snapshotfile::SnapshotSummary
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::snapshotfile::SnapshotSummary
impl core::marker::Sync for rustic_core::repofile::snapshotfile::SnapshotSummary
impl core::marker::Unpin for rustic_core::repofile::snapshotfile::SnapshotSummary
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::snapshotfile::SnapshotSummary
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::snapshotfile::SnapshotSummary
impl<T, U> core::convert::Into<U> for rustic_core::repofile::snapshotfile::SnapshotSummary where U: core::convert::From<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::snapshotfile::SnapshotSummary where U: core::convert::Into<T>
pub type rustic_core::repofile::snapshotfile::SnapshotSummary::Error = core::convert::Infallible
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::snapshotfile::SnapshotSummary where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::snapshotfile::SnapshotSummary::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::snapshotfile::SnapshotSummary where T: core::clone::Clone
pub type rustic_core::repofile::snapshotfile::SnapshotSummary::Owned = T
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::snapshotfile::SnapshotSummary where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::snapshotfile::SnapshotSummary where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::snapshotfile::SnapshotSummary where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::snapshotfile::SnapshotSummary
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::snapshotfile::SnapshotSummary
pub type rustic_core::repofile::snapshotfile::SnapshotSummary::Init = T
pub const rustic_core::repofile::snapshotfile::SnapshotSummary::ALIGN: usize
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotSummary::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotSummary::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotSummary::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotSummary::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::snapshotfile::SnapshotSummary where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::snapshotfile::SnapshotSummary
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::snapshotfile::SnapshotSummary
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::snapshotfile::SnapshotSummary
pub type rustic_core::repofile::snapshotfile::SnapshotSummary::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::snapshotfile::SnapshotSummary where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::vzip(self) -> V
pub struct rustic_core::repofile::snapshotfile::StringList(pub alloc::vec::Vec<alloc::string::String>)
impl rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::add(&mut self, s: alloc::string::String)
pub fn rustic_core::repofile::snapshotfile::StringList::add_all(&mut self, string_lists: alloc::vec::Vec<Self>)
pub fn rustic_core::repofile::snapshotfile::StringList::add_list(&mut self, sl: Self)
pub fn rustic_core::repofile::snapshotfile::StringList::contains(&self, s: &str) -> bool
pub fn rustic_core::repofile::snapshotfile::StringList::contains_all(&self, sl: &Self) -> bool
pub fn rustic_core::repofile::snapshotfile::StringList::formatln(&self) -> alloc::string::String
pub fn rustic_core::repofile::snapshotfile::StringList::iter(&self) -> core::slice::iter::Iter<'_, alloc::string::String>
pub fn rustic_core::repofile::snapshotfile::StringList::matches(&self, sls: &[Self]) -> bool
pub fn rustic_core::repofile::snapshotfile::StringList::remove_all(&mut self, string_lists: &[Self])
pub fn rustic_core::repofile::snapshotfile::StringList::set_paths<T: core::convert::AsRef<std::path::Path>>(&mut self, paths: &[T]) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repofile::snapshotfile::StringList::sort(&mut self)
impl core::fmt::Display for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::str::traits::FromStr for rustic_core::repofile::snapshotfile::StringList
pub type rustic_core::repofile::snapshotfile::StringList::Err = rustic_core::error::RusticError
pub fn rustic_core::repofile::snapshotfile::StringList::from_str(s: &str) -> rustic_core::error::RusticResult<Self>
impl core::clone::Clone for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::clone(&self) -> rustic_core::repofile::snapshotfile::StringList
impl core::cmp::Eq for rustic_core::repofile::snapshotfile::StringList
impl core::cmp::Ord for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::cmp(&self, other: &rustic_core::repofile::snapshotfile::StringList) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::repofile::snapshotfile::StringList> for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::eq(&self, other: &rustic_core::repofile::snapshotfile::StringList) -> bool
impl core::cmp::PartialOrd<rustic_core::repofile::snapshotfile::StringList> for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::partial_cmp(&self, other: &rustic_core::repofile::snapshotfile::StringList) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::default() -> rustic_core::repofile::snapshotfile::StringList
impl core::fmt::Debug for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::repofile::snapshotfile::StringList
impl core::marker::StructuralPartialEq for rustic_core::repofile::snapshotfile::StringList
impl serde::ser::Serialize for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::snapshotfile::StringList
impl core::marker::Sync for rustic_core::repofile::snapshotfile::StringList
impl core::marker::Unpin for rustic_core::repofile::snapshotfile::StringList
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::snapshotfile::StringList
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::snapshotfile::StringList
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::snapshotfile::StringList where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::StringList::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::snapshotfile::StringList where U: core::convert::From<T>
pub fn rustic_core::repofile::snapshotfile::StringList::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::snapshotfile::StringList where U: core::convert::Into<T>
pub type rustic_core::repofile::snapshotfile::StringList::Error = core::convert::Infallible
pub fn rustic_core::repofile::snapshotfile::StringList::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::snapshotfile::StringList where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::snapshotfile::StringList::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::snapshotfile::StringList::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::snapshotfile::StringList where T: core::clone::Clone
pub type rustic_core::repofile::snapshotfile::StringList::Owned = T
pub fn rustic_core::repofile::snapshotfile::StringList::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::snapshotfile::StringList::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::repofile::snapshotfile::StringList where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::StringList::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::repofile::snapshotfile::StringList where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::repofile::snapshotfile::StringList::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::StringList::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::StringList::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::repofile::snapshotfile::StringList where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::StringList::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::snapshotfile::StringList where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::StringList::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::snapshotfile::StringList where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::StringList::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::snapshotfile::StringList
pub type rustic_core::repofile::snapshotfile::StringList::Init = T
pub const rustic_core::repofile::snapshotfile::StringList::ALIGN: usize
pub unsafe fn rustic_core::repofile::snapshotfile::StringList::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::snapshotfile::StringList::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::snapshotfile::StringList::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::snapshotfile::StringList::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::snapshotfile::StringList where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::snapshotfile::StringList
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::snapshotfile::StringList
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::snapshotfile::StringList
pub type rustic_core::repofile::snapshotfile::StringList::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::snapshotfile::StringList where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::snapshotfile::StringList::vzip(self) -> V
pub enum rustic_core::repofile::BlobType
pub rustic_core::repofile::BlobType::Data
pub rustic_core::repofile::BlobType::Tree
impl rustic_core::blob::BlobType
pub const fn rustic_core::blob::BlobType::is_cacheable(self) -> bool
impl core::clone::Clone for rustic_core::blob::BlobType
pub fn rustic_core::blob::BlobType::clone(&self) -> rustic_core::blob::BlobType
impl core::cmp::Eq for rustic_core::blob::BlobType
impl core::cmp::Ord for rustic_core::blob::BlobType
pub fn rustic_core::blob::BlobType::cmp(&self, other: &rustic_core::blob::BlobType) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::blob::BlobType> for rustic_core::blob::BlobType
pub fn rustic_core::blob::BlobType::eq(&self, other: &rustic_core::blob::BlobType) -> bool
impl core::cmp::PartialOrd<rustic_core::blob::BlobType> for rustic_core::blob::BlobType
pub fn rustic_core::blob::BlobType::partial_cmp(&self, other: &rustic_core::blob::BlobType) -> core::option::Option<core::cmp::Ordering>
impl core::fmt::Debug for rustic_core::blob::BlobType
pub fn rustic_core::blob::BlobType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for rustic_core::blob::BlobType
pub fn rustic_core::blob::BlobType::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::Copy for rustic_core::blob::BlobType
impl core::marker::StructuralEq for rustic_core::blob::BlobType
impl core::marker::StructuralPartialEq for rustic_core::blob::BlobType
impl enum_map::internal::Enum for rustic_core::blob::BlobType
pub const rustic_core::blob::BlobType::LENGTH: usize
pub fn rustic_core::blob::BlobType::from_usize(value: usize) -> Self
pub fn rustic_core::blob::BlobType::into_usize(self) -> usize
impl serde::ser::Serialize for rustic_core::blob::BlobType
pub fn rustic_core::blob::BlobType::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::blob::BlobType
pub fn rustic_core::blob::BlobType::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl<V> enum_map::internal::EnumArray<V> for rustic_core::blob::BlobType
pub type rustic_core::blob::BlobType::Array = [V; 2]
impl core::marker::Send for rustic_core::blob::BlobType
impl core::marker::Sync for rustic_core::blob::BlobType
impl core::marker::Unpin for rustic_core::blob::BlobType
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::blob::BlobType
impl core::panic::unwind_safe::UnwindSafe for rustic_core::blob::BlobType
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::blob::BlobType where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::blob::BlobType::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::blob::BlobType where U: core::convert::From<T>
pub fn rustic_core::blob::BlobType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::blob::BlobType where U: core::convert::Into<T>
pub type rustic_core::blob::BlobType::Error = core::convert::Infallible
pub fn rustic_core::blob::BlobType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::blob::BlobType where U: core::convert::TryFrom<T>
pub type rustic_core::blob::BlobType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::blob::BlobType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::blob::BlobType where T: core::clone::Clone
pub type rustic_core::blob::BlobType::Owned = T
pub fn rustic_core::blob::BlobType::clone_into(&self, target: &mut T)
pub fn rustic_core::blob::BlobType::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::blob::BlobType where T: 'static + core::marker::Sized
pub fn rustic_core::blob::BlobType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::blob::BlobType where T: core::marker::Sized
pub fn rustic_core::blob::BlobType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::blob::BlobType where T: core::marker::Sized
pub fn rustic_core::blob::BlobType::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::blob::BlobType
pub fn rustic_core::blob::BlobType::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::blob::BlobType
pub type rustic_core::blob::BlobType::Init = T
pub const rustic_core::blob::BlobType::ALIGN: usize
pub unsafe fn rustic_core::blob::BlobType::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::blob::BlobType::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::blob::BlobType::drop(ptr: usize)
pub unsafe fn rustic_core::blob::BlobType::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::blob::BlobType where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::blob::BlobType
impl<T> tracing::instrument::WithSubscriber for rustic_core::blob::BlobType
impl<T> typenum::type_operators::Same<T> for rustic_core::blob::BlobType
pub type rustic_core::blob::BlobType::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::blob::BlobType where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::blob::BlobType::vzip(self) -> V
pub enum rustic_core::repofile::DeleteOption
pub rustic_core::repofile::DeleteOption::After(chrono::datetime::DateTime<chrono::offset::local::Local>)
pub rustic_core::repofile::DeleteOption::Never
pub rustic_core::repofile::DeleteOption::NotSet
impl rustic_core::repofile::snapshotfile::DeleteOption
pub const fn rustic_core::repofile::snapshotfile::DeleteOption::is_not_set(&self) -> bool
impl core::default::Default for rustic_core::repofile::snapshotfile::DeleteOption
pub fn rustic_core::repofile::snapshotfile::DeleteOption::default() -> Self
impl core::clone::Clone for rustic_core::repofile::snapshotfile::DeleteOption
pub fn rustic_core::repofile::snapshotfile::DeleteOption::clone(&self) -> rustic_core::repofile::snapshotfile::DeleteOption
impl core::cmp::Eq for rustic_core::repofile::snapshotfile::DeleteOption
impl core::cmp::PartialEq<rustic_core::repofile::snapshotfile::DeleteOption> for rustic_core::repofile::snapshotfile::DeleteOption
pub fn rustic_core::repofile::snapshotfile::DeleteOption::eq(&self, other: &rustic_core::repofile::snapshotfile::DeleteOption) -> bool
impl core::fmt::Debug for rustic_core::repofile::snapshotfile::DeleteOption
pub fn rustic_core::repofile::snapshotfile::DeleteOption::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::repofile::snapshotfile::DeleteOption
impl core::marker::StructuralEq for rustic_core::repofile::snapshotfile::DeleteOption
impl core::marker::StructuralPartialEq for rustic_core::repofile::snapshotfile::DeleteOption
impl serde::ser::Serialize for rustic_core::repofile::snapshotfile::DeleteOption
pub fn rustic_core::repofile::snapshotfile::DeleteOption::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::snapshotfile::DeleteOption
pub fn rustic_core::repofile::snapshotfile::DeleteOption::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::snapshotfile::DeleteOption
impl core::marker::Sync for rustic_core::repofile::snapshotfile::DeleteOption
impl core::marker::Unpin for rustic_core::repofile::snapshotfile::DeleteOption
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::snapshotfile::DeleteOption
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::snapshotfile::DeleteOption
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::snapshotfile::DeleteOption where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::DeleteOption::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::snapshotfile::DeleteOption where U: core::convert::From<T>
pub fn rustic_core::repofile::snapshotfile::DeleteOption::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::snapshotfile::DeleteOption where U: core::convert::Into<T>
pub type rustic_core::repofile::snapshotfile::DeleteOption::Error = core::convert::Infallible
pub fn rustic_core::repofile::snapshotfile::DeleteOption::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::snapshotfile::DeleteOption where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::snapshotfile::DeleteOption::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::snapshotfile::DeleteOption::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::snapshotfile::DeleteOption where T: core::clone::Clone
pub type rustic_core::repofile::snapshotfile::DeleteOption::Owned = T
pub fn rustic_core::repofile::snapshotfile::DeleteOption::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::snapshotfile::DeleteOption::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::snapshotfile::DeleteOption where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::DeleteOption::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::snapshotfile::DeleteOption where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::DeleteOption::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::snapshotfile::DeleteOption where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::DeleteOption::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::snapshotfile::DeleteOption
pub fn rustic_core::repofile::snapshotfile::DeleteOption::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::snapshotfile::DeleteOption
pub type rustic_core::repofile::snapshotfile::DeleteOption::Init = T
pub const rustic_core::repofile::snapshotfile::DeleteOption::ALIGN: usize
pub unsafe fn rustic_core::repofile::snapshotfile::DeleteOption::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::snapshotfile::DeleteOption::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::snapshotfile::DeleteOption::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::snapshotfile::DeleteOption::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::snapshotfile::DeleteOption where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::snapshotfile::DeleteOption
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::snapshotfile::DeleteOption
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::snapshotfile::DeleteOption
pub type rustic_core::repofile::snapshotfile::DeleteOption::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::snapshotfile::DeleteOption where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::snapshotfile::DeleteOption::vzip(self) -> V
pub enum rustic_core::repofile::FileType
pub rustic_core::repofile::FileType::Config
pub rustic_core::repofile::FileType::Index
pub rustic_core::repofile::FileType::Key
pub rustic_core::repofile::FileType::Pack
pub rustic_core::repofile::FileType::Snapshot
impl rustic_core::backend::FileType
pub const fn rustic_core::backend::FileType::dirname(self) -> &'static str
pub const fn rustic_core::backend::FileType::is_cacheable(self) -> bool
impl core::clone::Clone for rustic_core::backend::FileType
pub fn rustic_core::backend::FileType::clone(&self) -> rustic_core::backend::FileType
impl core::cmp::Eq for rustic_core::backend::FileType
impl core::cmp::PartialEq<rustic_core::backend::FileType> for rustic_core::backend::FileType
pub fn rustic_core::backend::FileType::eq(&self, other: &rustic_core::backend::FileType) -> bool
impl core::fmt::Debug for rustic_core::backend::FileType
pub fn rustic_core::backend::FileType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::backend::FileType
impl core::marker::StructuralEq for rustic_core::backend::FileType
impl core::marker::StructuralPartialEq for rustic_core::backend::FileType
impl serde::ser::Serialize for rustic_core::backend::FileType
pub fn rustic_core::backend::FileType::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::backend::FileType
pub fn rustic_core::backend::FileType::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::backend::FileType
impl core::marker::Sync for rustic_core::backend::FileType
impl core::marker::Unpin for rustic_core::backend::FileType
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::FileType
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::FileType
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::backend::FileType where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::backend::FileType::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::backend::FileType where U: core::convert::From<T>
pub fn rustic_core::backend::FileType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::FileType where U: core::convert::Into<T>
pub type rustic_core::backend::FileType::Error = core::convert::Infallible
pub fn rustic_core::backend::FileType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::FileType where U: core::convert::TryFrom<T>
pub type rustic_core::backend::FileType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::FileType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::FileType where T: core::clone::Clone
pub type rustic_core::backend::FileType::Owned = T
pub fn rustic_core::backend::FileType::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::FileType::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::FileType where T: 'static + core::marker::Sized
pub fn rustic_core::backend::FileType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::FileType where T: core::marker::Sized
pub fn rustic_core::backend::FileType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::FileType where T: core::marker::Sized
pub fn rustic_core::backend::FileType::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::FileType
pub fn rustic_core::backend::FileType::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::FileType
pub type rustic_core::backend::FileType::Init = T
pub const rustic_core::backend::FileType::ALIGN: usize
pub unsafe fn rustic_core::backend::FileType::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::FileType::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::FileType::drop(ptr: usize)
pub unsafe fn rustic_core::backend::FileType::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::backend::FileType where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::backend::FileType
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::FileType
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::FileType
pub type rustic_core::backend::FileType::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::FileType where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::FileType::vzip(self) -> V
pub enum rustic_core::repofile::HeaderEntry
pub rustic_core::repofile::HeaderEntry::CompData
pub rustic_core::repofile::HeaderEntry::CompData::id: rustic_core::id::Id
pub rustic_core::repofile::HeaderEntry::CompData::len: u32
pub rustic_core::repofile::HeaderEntry::CompData::len_data: u32
pub rustic_core::repofile::HeaderEntry::CompTree
pub rustic_core::repofile::HeaderEntry::CompTree::id: rustic_core::id::Id
pub rustic_core::repofile::HeaderEntry::CompTree::len: u32
pub rustic_core::repofile::HeaderEntry::CompTree::len_data: u32
pub rustic_core::repofile::HeaderEntry::Data
pub rustic_core::repofile::HeaderEntry::Data::id: rustic_core::id::Id
pub rustic_core::repofile::HeaderEntry::Data::len: u32
pub rustic_core::repofile::HeaderEntry::Tree
pub rustic_core::repofile::HeaderEntry::Tree::id: rustic_core::id::Id
pub rustic_core::repofile::HeaderEntry::Tree::len: u32
impl rustic_core::repofile::packfile::HeaderEntry
pub const rustic_core::repofile::packfile::HeaderEntry::ENTRY_LEN: u32
pub const rustic_core::repofile::packfile::HeaderEntry::ENTRY_LEN_COMPRESSED: u32
pub const fn rustic_core::repofile::packfile::HeaderEntry::from_blob(blob: &rustic_core::repofile::indexfile::IndexBlob) -> Self
pub const fn rustic_core::repofile::packfile::HeaderEntry::into_blob(self, offset: u32) -> rustic_core::repofile::indexfile::IndexBlob
pub const fn rustic_core::repofile::packfile::HeaderEntry::length(&self) -> u32
impl binrw::meta::ReadEndian for rustic_core::repofile::packfile::HeaderEntry
pub const rustic_core::repofile::packfile::HeaderEntry::ENDIAN: binrw::meta::EndianKind
impl binrw::meta::WriteEndian for rustic_core::repofile::packfile::HeaderEntry
pub const rustic_core::repofile::packfile::HeaderEntry::ENDIAN: binrw::meta::EndianKind
impl binrw::binread::BinRead for rustic_core::repofile::packfile::HeaderEntry
pub type rustic_core::repofile::packfile::HeaderEntry::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::repofile::packfile::HeaderEntry::read_options<R: std::io::Read + std::io::Seek>(__binrw_generated_var_reader: &mut R, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<Self>
impl binrw::binwrite::BinWrite for rustic_core::repofile::packfile::HeaderEntry
pub type rustic_core::repofile::packfile::HeaderEntry::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::repofile::packfile::HeaderEntry::write_options<W: std::io::Write + std::io::Seek>(&self, __binrw_generated_var_writer: &mut W, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<()>
impl core::clone::Clone for rustic_core::repofile::packfile::HeaderEntry
pub fn rustic_core::repofile::packfile::HeaderEntry::clone(&self) -> rustic_core::repofile::packfile::HeaderEntry
impl core::fmt::Debug for rustic_core::repofile::packfile::HeaderEntry
pub fn rustic_core::repofile::packfile::HeaderEntry::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::repofile::packfile::HeaderEntry
impl core::marker::Send for rustic_core::repofile::packfile::HeaderEntry
impl core::marker::Sync for rustic_core::repofile::packfile::HeaderEntry
impl core::marker::Unpin for rustic_core::repofile::packfile::HeaderEntry
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::packfile::HeaderEntry
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::packfile::HeaderEntry
impl<T, U> core::convert::Into<U> for rustic_core::repofile::packfile::HeaderEntry where U: core::convert::From<T>
pub fn rustic_core::repofile::packfile::HeaderEntry::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::packfile::HeaderEntry where U: core::convert::Into<T>
pub type rustic_core::repofile::packfile::HeaderEntry::Error = core::convert::Infallible
pub fn rustic_core::repofile::packfile::HeaderEntry::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::packfile::HeaderEntry where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::packfile::HeaderEntry::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::packfile::HeaderEntry::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::packfile::HeaderEntry where T: core::clone::Clone
pub type rustic_core::repofile::packfile::HeaderEntry::Owned = T
pub fn rustic_core::repofile::packfile::HeaderEntry::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::packfile::HeaderEntry::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::packfile::HeaderEntry where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::packfile::HeaderEntry::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::packfile::HeaderEntry where T: core::marker::Sized
pub fn rustic_core::repofile::packfile::HeaderEntry::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::packfile::HeaderEntry where T: core::marker::Sized
pub fn rustic_core::repofile::packfile::HeaderEntry::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::packfile::HeaderEntry
pub fn rustic_core::repofile::packfile::HeaderEntry::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::packfile::HeaderEntry
pub type rustic_core::repofile::packfile::HeaderEntry::Init = T
pub const rustic_core::repofile::packfile::HeaderEntry::ALIGN: usize
pub unsafe fn rustic_core::repofile::packfile::HeaderEntry::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::packfile::HeaderEntry::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::packfile::HeaderEntry::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::packfile::HeaderEntry::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::packfile::HeaderEntry
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::packfile::HeaderEntry
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::packfile::HeaderEntry
pub type rustic_core::repofile::packfile::HeaderEntry::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::packfile::HeaderEntry where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::packfile::HeaderEntry::vzip(self) -> V
pub enum rustic_core::repofile::NodeType
pub rustic_core::repofile::NodeType::Chardev
pub rustic_core::repofile::NodeType::Chardev::device: u64
pub rustic_core::repofile::NodeType::Dev
pub rustic_core::repofile::NodeType::Dev::device: u64
pub rustic_core::repofile::NodeType::Dir
pub rustic_core::repofile::NodeType::Fifo
pub rustic_core::repofile::NodeType::File
pub rustic_core::repofile::NodeType::Socket
pub rustic_core::repofile::NodeType::Symlink
pub rustic_core::repofile::NodeType::Symlink::linktarget: alloc::string::String
pub rustic_core::repofile::NodeType::Symlink::linktarget_raw: core::option::Option<alloc::vec::Vec<u8>>
impl rustic_core::backend::node::NodeType
pub fn rustic_core::backend::node::NodeType::from_link(target: &std::path::Path) -> Self
pub fn rustic_core::backend::node::NodeType::to_link(&self) -> &std::path::Path
impl core::default::Default for rustic_core::backend::node::NodeType
pub fn rustic_core::backend::node::NodeType::default() -> Self
impl core::clone::Clone for rustic_core::backend::node::NodeType
pub fn rustic_core::backend::node::NodeType::clone(&self) -> rustic_core::backend::node::NodeType
impl core::cmp::Eq for rustic_core::backend::node::NodeType
impl core::cmp::PartialEq<rustic_core::backend::node::NodeType> for rustic_core::backend::node::NodeType
pub fn rustic_core::backend::node::NodeType::eq(&self, other: &rustic_core::backend::node::NodeType) -> bool
impl core::fmt::Debug for rustic_core::backend::node::NodeType
pub fn rustic_core::backend::node::NodeType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::backend::node::NodeType
impl core::marker::StructuralPartialEq for rustic_core::backend::node::NodeType
impl serde::ser::Serialize for rustic_core::backend::node::NodeType
pub fn rustic_core::backend::node::NodeType::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::backend::node::NodeType
pub fn rustic_core::backend::node::NodeType::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::backend::node::NodeType
impl core::marker::Sync for rustic_core::backend::node::NodeType
impl core::marker::Unpin for rustic_core::backend::node::NodeType
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::node::NodeType
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::node::NodeType
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::backend::node::NodeType where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::backend::node::NodeType::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::backend::node::NodeType where U: core::convert::From<T>
pub fn rustic_core::backend::node::NodeType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::node::NodeType where U: core::convert::Into<T>
pub type rustic_core::backend::node::NodeType::Error = core::convert::Infallible
pub fn rustic_core::backend::node::NodeType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::node::NodeType where U: core::convert::TryFrom<T>
pub type rustic_core::backend::node::NodeType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::node::NodeType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::node::NodeType where T: core::clone::Clone
pub type rustic_core::backend::node::NodeType::Owned = T
pub fn rustic_core::backend::node::NodeType::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::node::NodeType::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::node::NodeType where T: 'static + core::marker::Sized
pub fn rustic_core::backend::node::NodeType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::node::NodeType where T: core::marker::Sized
pub fn rustic_core::backend::node::NodeType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::node::NodeType where T: core::marker::Sized
pub fn rustic_core::backend::node::NodeType::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::node::NodeType
pub fn rustic_core::backend::node::NodeType::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::node::NodeType
pub type rustic_core::backend::node::NodeType::Init = T
pub const rustic_core::backend::node::NodeType::ALIGN: usize
pub unsafe fn rustic_core::backend::node::NodeType::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::node::NodeType::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::node::NodeType::drop(ptr: usize)
pub unsafe fn rustic_core::backend::node::NodeType::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::backend::node::NodeType where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::backend::node::NodeType
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::node::NodeType
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::node::NodeType
pub type rustic_core::backend::node::NodeType::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::node::NodeType where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::node::NodeType::vzip(self) -> V
pub struct rustic_core::repofile::ConfigFile
pub rustic_core::repofile::ConfigFile::chunker_polynomial: alloc::string::String
pub rustic_core::repofile::ConfigFile::compression: core::option::Option<i32>
pub rustic_core::repofile::ConfigFile::datapack_growfactor: core::option::Option<u32>
pub rustic_core::repofile::ConfigFile::datapack_size: core::option::Option<u32>
pub rustic_core::repofile::ConfigFile::datapack_size_limit: core::option::Option<u32>
pub rustic_core::repofile::ConfigFile::id: rustic_core::id::Id
pub rustic_core::repofile::ConfigFile::is_hot: core::option::Option<bool>
pub rustic_core::repofile::ConfigFile::max_packsize_tolerate_percent: core::option::Option<u32>
pub rustic_core::repofile::ConfigFile::min_packsize_tolerate_percent: core::option::Option<u32>
pub rustic_core::repofile::ConfigFile::treepack_growfactor: core::option::Option<u32>
pub rustic_core::repofile::ConfigFile::treepack_size: core::option::Option<u32>
pub rustic_core::repofile::ConfigFile::treepack_size_limit: core::option::Option<u32>
pub rustic_core::repofile::ConfigFile::version: u32
impl rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repofile::configfile::ConfigFile::new(version: u32, id: rustic_core::id::Id, poly: u64) -> Self
pub fn rustic_core::repofile::configfile::ConfigFile::packsize(&self, blob: rustic_core::blob::BlobType) -> (u32, u32, u32)
pub fn rustic_core::repofile::configfile::ConfigFile::packsize_ok_percents(&self) -> (u32, u32)
pub fn rustic_core::repofile::configfile::ConfigFile::poly(&self) -> rustic_core::error::RusticResult<u64>
pub fn rustic_core::repofile::configfile::ConfigFile::zstd(&self) -> rustic_core::error::RusticResult<core::option::Option<i32>>
impl rustic_core::repofile::RepoFile for rustic_core::repofile::configfile::ConfigFile
pub const rustic_core::repofile::configfile::ConfigFile::TYPE: rustic_core::backend::FileType
impl core::clone::Clone for rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repofile::configfile::ConfigFile::clone(&self) -> rustic_core::repofile::configfile::ConfigFile
impl core::cmp::Eq for rustic_core::repofile::configfile::ConfigFile
impl core::cmp::PartialEq<rustic_core::repofile::configfile::ConfigFile> for rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repofile::configfile::ConfigFile::eq(&self, other: &rustic_core::repofile::configfile::ConfigFile) -> bool
impl core::default::Default for rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repofile::configfile::ConfigFile::default() -> rustic_core::repofile::configfile::ConfigFile
impl core::fmt::Debug for rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repofile::configfile::ConfigFile::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::repofile::configfile::ConfigFile
impl core::marker::StructuralPartialEq for rustic_core::repofile::configfile::ConfigFile
impl serde::ser::Serialize for rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repofile::configfile::ConfigFile::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repofile::configfile::ConfigFile::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::configfile::ConfigFile
impl core::marker::Sync for rustic_core::repofile::configfile::ConfigFile
impl core::marker::Unpin for rustic_core::repofile::configfile::ConfigFile
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::configfile::ConfigFile
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::configfile::ConfigFile
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::configfile::ConfigFile where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::configfile::ConfigFile::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::configfile::ConfigFile where U: core::convert::From<T>
pub fn rustic_core::repofile::configfile::ConfigFile::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::configfile::ConfigFile where U: core::convert::Into<T>
pub type rustic_core::repofile::configfile::ConfigFile::Error = core::convert::Infallible
pub fn rustic_core::repofile::configfile::ConfigFile::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::configfile::ConfigFile where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::configfile::ConfigFile::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::configfile::ConfigFile::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::configfile::ConfigFile where T: core::clone::Clone
pub type rustic_core::repofile::configfile::ConfigFile::Owned = T
pub fn rustic_core::repofile::configfile::ConfigFile::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::configfile::ConfigFile::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::configfile::ConfigFile where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::configfile::ConfigFile::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::configfile::ConfigFile where T: core::marker::Sized
pub fn rustic_core::repofile::configfile::ConfigFile::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::configfile::ConfigFile where T: core::marker::Sized
pub fn rustic_core::repofile::configfile::ConfigFile::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repofile::configfile::ConfigFile::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::configfile::ConfigFile
pub type rustic_core::repofile::configfile::ConfigFile::Init = T
pub const rustic_core::repofile::configfile::ConfigFile::ALIGN: usize
pub unsafe fn rustic_core::repofile::configfile::ConfigFile::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::configfile::ConfigFile::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::configfile::ConfigFile::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::configfile::ConfigFile::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::configfile::ConfigFile where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::configfile::ConfigFile
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::configfile::ConfigFile
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::configfile::ConfigFile
pub type rustic_core::repofile::configfile::ConfigFile::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::configfile::ConfigFile where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::configfile::ConfigFile::vzip(self) -> V
pub struct rustic_core::repofile::IndexBlob
pub rustic_core::repofile::IndexBlob::id: rustic_core::id::Id
pub rustic_core::repofile::IndexBlob::length: u32
pub rustic_core::repofile::IndexBlob::offset: u32
pub rustic_core::repofile::IndexBlob::tpe: rustic_core::blob::BlobType
pub rustic_core::repofile::IndexBlob::uncompressed_length: core::option::Option<core::num::nonzero::NonZeroU32>
impl core::cmp::Ord for rustic_core::repofile::indexfile::IndexBlob
pub fn rustic_core::repofile::indexfile::IndexBlob::cmp(&self, other: &Self) -> core::cmp::Ordering
impl core::cmp::PartialOrd<rustic_core::repofile::indexfile::IndexBlob> for rustic_core::repofile::indexfile::IndexBlob
pub fn rustic_core::repofile::indexfile::IndexBlob::partial_cmp(&self, other: &Self) -> core::option::Option<core::cmp::Ordering>
impl core::clone::Clone for rustic_core::repofile::indexfile::IndexBlob
pub fn rustic_core::repofile::indexfile::IndexBlob::clone(&self) -> rustic_core::repofile::indexfile::IndexBlob
impl core::cmp::Eq for rustic_core::repofile::indexfile::IndexBlob
impl core::cmp::PartialEq<rustic_core::repofile::indexfile::IndexBlob> for rustic_core::repofile::indexfile::IndexBlob
pub fn rustic_core::repofile::indexfile::IndexBlob::eq(&self, other: &rustic_core::repofile::indexfile::IndexBlob) -> bool
impl core::fmt::Debug for rustic_core::repofile::indexfile::IndexBlob
pub fn rustic_core::repofile::indexfile::IndexBlob::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::repofile::indexfile::IndexBlob
impl core::marker::StructuralEq for rustic_core::repofile::indexfile::IndexBlob
impl core::marker::StructuralPartialEq for rustic_core::repofile::indexfile::IndexBlob
impl serde::ser::Serialize for rustic_core::repofile::indexfile::IndexBlob
pub fn rustic_core::repofile::indexfile::IndexBlob::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::indexfile::IndexBlob
pub fn rustic_core::repofile::indexfile::IndexBlob::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::indexfile::IndexBlob
impl core::marker::Sync for rustic_core::repofile::indexfile::IndexBlob
impl core::marker::Unpin for rustic_core::repofile::indexfile::IndexBlob
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::indexfile::IndexBlob
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::indexfile::IndexBlob
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::indexfile::IndexBlob where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexBlob::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::indexfile::IndexBlob where U: core::convert::From<T>
pub fn rustic_core::repofile::indexfile::IndexBlob::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::indexfile::IndexBlob where U: core::convert::Into<T>
pub type rustic_core::repofile::indexfile::IndexBlob::Error = core::convert::Infallible
pub fn rustic_core::repofile::indexfile::IndexBlob::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::indexfile::IndexBlob where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::indexfile::IndexBlob::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::indexfile::IndexBlob::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::indexfile::IndexBlob where T: core::clone::Clone
pub type rustic_core::repofile::indexfile::IndexBlob::Owned = T
pub fn rustic_core::repofile::indexfile::IndexBlob::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::indexfile::IndexBlob::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::indexfile::IndexBlob where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexBlob::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::indexfile::IndexBlob where T: core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexBlob::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::indexfile::IndexBlob where T: core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexBlob::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::indexfile::IndexBlob
pub fn rustic_core::repofile::indexfile::IndexBlob::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::indexfile::IndexBlob
pub type rustic_core::repofile::indexfile::IndexBlob::Init = T
pub const rustic_core::repofile::indexfile::IndexBlob::ALIGN: usize
pub unsafe fn rustic_core::repofile::indexfile::IndexBlob::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::indexfile::IndexBlob::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::indexfile::IndexBlob::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::indexfile::IndexBlob::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::indexfile::IndexBlob where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::indexfile::IndexBlob
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::indexfile::IndexBlob
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::indexfile::IndexBlob
pub type rustic_core::repofile::indexfile::IndexBlob::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::indexfile::IndexBlob where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::indexfile::IndexBlob::vzip(self) -> V
pub struct rustic_core::repofile::IndexFile
pub rustic_core::repofile::IndexFile::packs: alloc::vec::Vec<rustic_core::repofile::indexfile::IndexPack>
pub rustic_core::repofile::IndexFile::packs_to_delete: alloc::vec::Vec<rustic_core::repofile::indexfile::IndexPack>
pub rustic_core::repofile::IndexFile::supersedes: core::option::Option<alloc::vec::Vec<rustic_core::id::Id>>
impl rustic_core::repofile::indexfile::IndexFile
pub fn rustic_core::repofile::indexfile::IndexFile::add(&mut self, p: rustic_core::repofile::indexfile::IndexPack, delete: bool)
impl rustic_core::repofile::RepoFile for rustic_core::repofile::indexfile::IndexFile
pub const rustic_core::repofile::indexfile::IndexFile::TYPE: rustic_core::backend::FileType
impl core::default::Default for rustic_core::repofile::indexfile::IndexFile
pub fn rustic_core::repofile::indexfile::IndexFile::default() -> rustic_core::repofile::indexfile::IndexFile
impl core::fmt::Debug for rustic_core::repofile::indexfile::IndexFile
pub fn rustic_core::repofile::indexfile::IndexFile::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::indexfile::IndexFile
pub fn rustic_core::repofile::indexfile::IndexFile::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::indexfile::IndexFile
pub fn rustic_core::repofile::indexfile::IndexFile::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::indexfile::IndexFile
impl core::marker::Sync for rustic_core::repofile::indexfile::IndexFile
impl core::marker::Unpin for rustic_core::repofile::indexfile::IndexFile
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::indexfile::IndexFile
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::indexfile::IndexFile
impl<T, U> core::convert::Into<U> for rustic_core::repofile::indexfile::IndexFile where U: core::convert::From<T>
pub fn rustic_core::repofile::indexfile::IndexFile::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::indexfile::IndexFile where U: core::convert::Into<T>
pub type rustic_core::repofile::indexfile::IndexFile::Error = core::convert::Infallible
pub fn rustic_core::repofile::indexfile::IndexFile::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::indexfile::IndexFile where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::indexfile::IndexFile::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::indexfile::IndexFile::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::repofile::indexfile::IndexFile where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexFile::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::indexfile::IndexFile where T: core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexFile::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::indexfile::IndexFile where T: core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexFile::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::indexfile::IndexFile
pub fn rustic_core::repofile::indexfile::IndexFile::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::indexfile::IndexFile
pub type rustic_core::repofile::indexfile::IndexFile::Init = T
pub const rustic_core::repofile::indexfile::IndexFile::ALIGN: usize
pub unsafe fn rustic_core::repofile::indexfile::IndexFile::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::indexfile::IndexFile::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::indexfile::IndexFile::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::indexfile::IndexFile::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::indexfile::IndexFile where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::indexfile::IndexFile
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::indexfile::IndexFile
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::indexfile::IndexFile
pub type rustic_core::repofile::indexfile::IndexFile::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::indexfile::IndexFile where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::indexfile::IndexFile::vzip(self) -> V
pub struct rustic_core::repofile::IndexPack
pub rustic_core::repofile::IndexPack::blobs: alloc::vec::Vec<rustic_core::repofile::indexfile::IndexBlob>
pub rustic_core::repofile::IndexPack::id: rustic_core::id::Id
pub rustic_core::repofile::IndexPack::size: core::option::Option<u32>
pub rustic_core::repofile::IndexPack::time: core::option::Option<chrono::datetime::DateTime<chrono::offset::local::Local>>
impl rustic_core::repofile::indexfile::IndexPack
pub fn rustic_core::repofile::indexfile::IndexPack::add(&mut self, id: rustic_core::id::Id, tpe: rustic_core::blob::BlobType, offset: u32, length: u32, uncompressed_length: core::option::Option<core::num::nonzero::NonZeroU32>)
pub fn rustic_core::repofile::indexfile::IndexPack::blob_type(&self) -> rustic_core::blob::BlobType
pub fn rustic_core::repofile::indexfile::IndexPack::pack_size(&self) -> u32
impl core::iter::traits::collect::Extend<rustic_core::repofile::indexfile::IndexPack> for rustic_core::index::binarysorted::IndexCollector
pub fn rustic_core::index::binarysorted::IndexCollector::extend<T>(&mut self, iter: T) where T: core::iter::traits::collect::IntoIterator<Item = rustic_core::repofile::indexfile::IndexPack>
impl core::clone::Clone for rustic_core::repofile::indexfile::IndexPack
pub fn rustic_core::repofile::indexfile::IndexPack::clone(&self) -> rustic_core::repofile::indexfile::IndexPack
impl core::default::Default for rustic_core::repofile::indexfile::IndexPack
pub fn rustic_core::repofile::indexfile::IndexPack::default() -> rustic_core::repofile::indexfile::IndexPack
impl core::fmt::Debug for rustic_core::repofile::indexfile::IndexPack
pub fn rustic_core::repofile::indexfile::IndexPack::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::indexfile::IndexPack
pub fn rustic_core::repofile::indexfile::IndexPack::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::indexfile::IndexPack
pub fn rustic_core::repofile::indexfile::IndexPack::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::indexfile::IndexPack
impl core::marker::Sync for rustic_core::repofile::indexfile::IndexPack
impl core::marker::Unpin for rustic_core::repofile::indexfile::IndexPack
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::indexfile::IndexPack
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::indexfile::IndexPack
impl<T, U> core::convert::Into<U> for rustic_core::repofile::indexfile::IndexPack where U: core::convert::From<T>
pub fn rustic_core::repofile::indexfile::IndexPack::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::indexfile::IndexPack where U: core::convert::Into<T>
pub type rustic_core::repofile::indexfile::IndexPack::Error = core::convert::Infallible
pub fn rustic_core::repofile::indexfile::IndexPack::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::indexfile::IndexPack where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::indexfile::IndexPack::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::indexfile::IndexPack::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::indexfile::IndexPack where T: core::clone::Clone
pub type rustic_core::repofile::indexfile::IndexPack::Owned = T
pub fn rustic_core::repofile::indexfile::IndexPack::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::indexfile::IndexPack::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::indexfile::IndexPack where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexPack::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::indexfile::IndexPack where T: core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexPack::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::indexfile::IndexPack where T: core::marker::Sized
pub fn rustic_core::repofile::indexfile::IndexPack::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::indexfile::IndexPack
pub fn rustic_core::repofile::indexfile::IndexPack::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::indexfile::IndexPack
pub type rustic_core::repofile::indexfile::IndexPack::Init = T
pub const rustic_core::repofile::indexfile::IndexPack::ALIGN: usize
pub unsafe fn rustic_core::repofile::indexfile::IndexPack::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::indexfile::IndexPack::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::indexfile::IndexPack::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::indexfile::IndexPack::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::indexfile::IndexPack where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::indexfile::IndexPack
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::indexfile::IndexPack
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::indexfile::IndexPack
pub type rustic_core::repofile::indexfile::IndexPack::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::indexfile::IndexPack where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::indexfile::IndexPack::vzip(self) -> V
pub struct rustic_core::repofile::KeyFile
pub rustic_core::repofile::KeyFile::created: core::option::Option<chrono::datetime::DateTime<chrono::offset::local::Local>>
pub rustic_core::repofile::KeyFile::data: alloc::vec::Vec<u8>
pub rustic_core::repofile::KeyFile::hostname: core::option::Option<alloc::string::String>
pub rustic_core::repofile::KeyFile::kdf: alloc::string::String
pub rustic_core::repofile::KeyFile::n: u32
pub rustic_core::repofile::KeyFile::p: u32
pub rustic_core::repofile::KeyFile::r: u32
pub rustic_core::repofile::KeyFile::salt: alloc::vec::Vec<u8>
pub rustic_core::repofile::KeyFile::username: core::option::Option<alloc::string::String>
impl rustic_core::repofile::keyfile::KeyFile
pub fn rustic_core::repofile::keyfile::KeyFile::from_backend<B: rustic_core::backend::ReadBackend>(be: &B, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::keyfile::KeyFile::generate(key: rustic_core::crypto::aespoly1305::Key, passwd: &impl core::convert::AsRef<[u8]>, hostname: core::option::Option<alloc::string::String>, username: core::option::Option<alloc::string::String>, with_created: bool) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::keyfile::KeyFile::kdf_key(&self, passwd: &impl core::convert::AsRef<[u8]>) -> rustic_core::error::RusticResult<rustic_core::crypto::aespoly1305::Key>
pub fn rustic_core::repofile::keyfile::KeyFile::key_from_data(&self, key: &rustic_core::crypto::aespoly1305::Key) -> rustic_core::error::RusticResult<rustic_core::crypto::aespoly1305::Key>
pub fn rustic_core::repofile::keyfile::KeyFile::key_from_password(&self, passwd: &impl core::convert::AsRef<[u8]>) -> rustic_core::error::RusticResult<rustic_core::crypto::aespoly1305::Key>
impl core::fmt::Debug for rustic_core::repofile::keyfile::KeyFile
pub fn rustic_core::repofile::keyfile::KeyFile::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::keyfile::KeyFile
pub fn rustic_core::repofile::keyfile::KeyFile::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::keyfile::KeyFile
pub fn rustic_core::repofile::keyfile::KeyFile::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::keyfile::KeyFile
impl core::marker::Sync for rustic_core::repofile::keyfile::KeyFile
impl core::marker::Unpin for rustic_core::repofile::keyfile::KeyFile
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::keyfile::KeyFile
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::keyfile::KeyFile
impl<T, U> core::convert::Into<U> for rustic_core::repofile::keyfile::KeyFile where U: core::convert::From<T>
pub fn rustic_core::repofile::keyfile::KeyFile::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::keyfile::KeyFile where U: core::convert::Into<T>
pub type rustic_core::repofile::keyfile::KeyFile::Error = core::convert::Infallible
pub fn rustic_core::repofile::keyfile::KeyFile::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::keyfile::KeyFile where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::keyfile::KeyFile::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::keyfile::KeyFile::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::repofile::keyfile::KeyFile where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::keyfile::KeyFile::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::keyfile::KeyFile where T: core::marker::Sized
pub fn rustic_core::repofile::keyfile::KeyFile::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::keyfile::KeyFile where T: core::marker::Sized
pub fn rustic_core::repofile::keyfile::KeyFile::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::keyfile::KeyFile
pub fn rustic_core::repofile::keyfile::KeyFile::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::keyfile::KeyFile
pub type rustic_core::repofile::keyfile::KeyFile::Init = T
pub const rustic_core::repofile::keyfile::KeyFile::ALIGN: usize
pub unsafe fn rustic_core::repofile::keyfile::KeyFile::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::keyfile::KeyFile::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::keyfile::KeyFile::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::keyfile::KeyFile::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::keyfile::KeyFile where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::keyfile::KeyFile
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::keyfile::KeyFile
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::keyfile::KeyFile
pub type rustic_core::repofile::keyfile::KeyFile::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::keyfile::KeyFile where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::keyfile::KeyFile::vzip(self) -> V
pub struct rustic_core::repofile::Node
pub rustic_core::repofile::Node::content: core::option::Option<alloc::vec::Vec<rustic_core::id::Id>>
pub rustic_core::repofile::Node::meta: rustic_core::backend::node::Metadata
pub rustic_core::repofile::Node::name: alloc::string::String
pub rustic_core::repofile::Node::node_type: rustic_core::backend::node::NodeType
pub rustic_core::repofile::Node::subtree: core::option::Option<rustic_core::id::Id>
impl rustic_core::backend::node::Node
pub const fn rustic_core::backend::node::Node::is_dir(&self) -> bool
pub const fn rustic_core::backend::node::Node::is_file(&self) -> bool
pub const fn rustic_core::backend::node::Node::is_special(&self) -> bool
pub const fn rustic_core::backend::node::Node::is_symlink(&self) -> bool
pub fn rustic_core::backend::node::Node::name(&self) -> std::ffi::os_str::OsString
pub fn rustic_core::backend::node::Node::new_node(name: &std::ffi::os_str::OsStr, node_type: rustic_core::backend::node::NodeType, meta: rustic_core::backend::node::Metadata) -> Self
impl rustic_core::backend::node::Node
pub fn rustic_core::backend::node::Node::new(name: alloc::string::String, node_type: rustic_core::backend::node::NodeType, meta: rustic_core::backend::node::Metadata, content: core::option::Option<alloc::vec::Vec<rustic_core::id::Id>>, subtree: core::option::Option<rustic_core::id::Id>) -> rustic_core::backend::node::Node
impl core::clone::Clone for rustic_core::backend::node::Node
pub fn rustic_core::backend::node::Node::clone(&self) -> rustic_core::backend::node::Node
impl core::cmp::Eq for rustic_core::backend::node::Node
impl core::cmp::PartialEq<rustic_core::backend::node::Node> for rustic_core::backend::node::Node
pub fn rustic_core::backend::node::Node::eq(&self, other: &rustic_core::backend::node::Node) -> bool
impl core::default::Default for rustic_core::backend::node::Node
pub fn rustic_core::backend::node::Node::default() -> rustic_core::backend::node::Node
impl core::fmt::Debug for rustic_core::backend::node::Node
pub fn rustic_core::backend::node::Node::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::backend::node::Node
impl core::marker::StructuralPartialEq for rustic_core::backend::node::Node
impl serde::ser::Serialize for rustic_core::backend::node::Node
pub fn rustic_core::backend::node::Node::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::backend::node::Node
pub fn rustic_core::backend::node::Node::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::backend::node::Node
impl core::marker::Sync for rustic_core::backend::node::Node
impl core::marker::Unpin for rustic_core::backend::node::Node
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::node::Node
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::node::Node
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::backend::node::Node where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::backend::node::Node::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::backend::node::Node where U: core::convert::From<T>
pub fn rustic_core::backend::node::Node::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::node::Node where U: core::convert::Into<T>
pub type rustic_core::backend::node::Node::Error = core::convert::Infallible
pub fn rustic_core::backend::node::Node::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::node::Node where U: core::convert::TryFrom<T>
pub type rustic_core::backend::node::Node::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::node::Node::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::node::Node where T: core::clone::Clone
pub type rustic_core::backend::node::Node::Owned = T
pub fn rustic_core::backend::node::Node::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::node::Node::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::node::Node where T: 'static + core::marker::Sized
pub fn rustic_core::backend::node::Node::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::node::Node where T: core::marker::Sized
pub fn rustic_core::backend::node::Node::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::node::Node where T: core::marker::Sized
pub fn rustic_core::backend::node::Node::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::node::Node
pub fn rustic_core::backend::node::Node::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::node::Node
pub type rustic_core::backend::node::Node::Init = T
pub const rustic_core::backend::node::Node::ALIGN: usize
pub unsafe fn rustic_core::backend::node::Node::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::node::Node::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::node::Node::drop(ptr: usize)
pub unsafe fn rustic_core::backend::node::Node::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::backend::node::Node where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::backend::node::Node
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::node::Node
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::node::Node
pub type rustic_core::backend::node::Node::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::node::Node where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::node::Node::vzip(self) -> V
pub struct rustic_core::repofile::PackHeader(pub alloc::vec::Vec<rustic_core::repofile::indexfile::IndexBlob>)
impl rustic_core::repofile::packfile::PackHeader
pub fn rustic_core::repofile::packfile::PackHeader::from_binary(pack: &[u8]) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::packfile::PackHeader::from_file(be: &impl rustic_core::backend::decrypt::DecryptReadBackend, id: rustic_core::id::Id, size_hint: core::option::Option<u32>, pack_size: u32) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::packfile::PackHeader::into_blobs(self) -> alloc::vec::Vec<rustic_core::repofile::indexfile::IndexBlob>
pub fn rustic_core::repofile::packfile::PackHeader::pack_size(&self) -> u32
pub fn rustic_core::repofile::packfile::PackHeader::size(&self) -> u32
impl core::clone::Clone for rustic_core::repofile::packfile::PackHeader
pub fn rustic_core::repofile::packfile::PackHeader::clone(&self) -> rustic_core::repofile::packfile::PackHeader
impl core::fmt::Debug for rustic_core::repofile::packfile::PackHeader
pub fn rustic_core::repofile::packfile::PackHeader::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::repofile::packfile::PackHeader
impl core::marker::Sync for rustic_core::repofile::packfile::PackHeader
impl core::marker::Unpin for rustic_core::repofile::packfile::PackHeader
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::packfile::PackHeader
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::packfile::PackHeader
impl<T, U> core::convert::Into<U> for rustic_core::repofile::packfile::PackHeader where U: core::convert::From<T>
pub fn rustic_core::repofile::packfile::PackHeader::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::packfile::PackHeader where U: core::convert::Into<T>
pub type rustic_core::repofile::packfile::PackHeader::Error = core::convert::Infallible
pub fn rustic_core::repofile::packfile::PackHeader::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::packfile::PackHeader where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::packfile::PackHeader::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::packfile::PackHeader::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::packfile::PackHeader where T: core::clone::Clone
pub type rustic_core::repofile::packfile::PackHeader::Owned = T
pub fn rustic_core::repofile::packfile::PackHeader::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::packfile::PackHeader::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::packfile::PackHeader where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::packfile::PackHeader::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::packfile::PackHeader where T: core::marker::Sized
pub fn rustic_core::repofile::packfile::PackHeader::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::packfile::PackHeader where T: core::marker::Sized
pub fn rustic_core::repofile::packfile::PackHeader::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::packfile::PackHeader
pub fn rustic_core::repofile::packfile::PackHeader::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::packfile::PackHeader
pub type rustic_core::repofile::packfile::PackHeader::Init = T
pub const rustic_core::repofile::packfile::PackHeader::ALIGN: usize
pub unsafe fn rustic_core::repofile::packfile::PackHeader::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::packfile::PackHeader::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::packfile::PackHeader::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::packfile::PackHeader::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::packfile::PackHeader
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::packfile::PackHeader
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::packfile::PackHeader
pub type rustic_core::repofile::packfile::PackHeader::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::packfile::PackHeader where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::packfile::PackHeader::vzip(self) -> V
pub struct rustic_core::repofile::PackHeaderLength(pub u32)
impl rustic_core::repofile::packfile::PackHeaderLength
pub fn rustic_core::repofile::packfile::PackHeaderLength::from_binary(data: &[u8]) -> rustic_core::error::RusticResult<Self>
pub const fn rustic_core::repofile::packfile::PackHeaderLength::from_u32(len: u32) -> Self
pub fn rustic_core::repofile::packfile::PackHeaderLength::to_binary(self) -> rustic_core::error::RusticResult<alloc::vec::Vec<u8>>
pub const fn rustic_core::repofile::packfile::PackHeaderLength::to_u32(self) -> u32
impl binrw::meta::ReadEndian for rustic_core::repofile::packfile::PackHeaderLength
pub const rustic_core::repofile::packfile::PackHeaderLength::ENDIAN: binrw::meta::EndianKind
impl binrw::meta::WriteEndian for rustic_core::repofile::packfile::PackHeaderLength
pub const rustic_core::repofile::packfile::PackHeaderLength::ENDIAN: binrw::meta::EndianKind
impl binrw::binread::BinRead for rustic_core::repofile::packfile::PackHeaderLength
pub type rustic_core::repofile::packfile::PackHeaderLength::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::repofile::packfile::PackHeaderLength::read_options<R: std::io::Read + std::io::Seek>(__binrw_generated_var_reader: &mut R, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<Self>
impl binrw::binwrite::BinWrite for rustic_core::repofile::packfile::PackHeaderLength
pub type rustic_core::repofile::packfile::PackHeaderLength::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::repofile::packfile::PackHeaderLength::write_options<W: std::io::Write + std::io::Seek>(&self, __binrw_generated_var_writer: &mut W, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<()>
impl core::clone::Clone for rustic_core::repofile::packfile::PackHeaderLength
pub fn rustic_core::repofile::packfile::PackHeaderLength::clone(&self) -> rustic_core::repofile::packfile::PackHeaderLength
impl core::fmt::Debug for rustic_core::repofile::packfile::PackHeaderLength
pub fn rustic_core::repofile::packfile::PackHeaderLength::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::repofile::packfile::PackHeaderLength
impl core::marker::Send for rustic_core::repofile::packfile::PackHeaderLength
impl core::marker::Sync for rustic_core::repofile::packfile::PackHeaderLength
impl core::marker::Unpin for rustic_core::repofile::packfile::PackHeaderLength
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::packfile::PackHeaderLength
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::packfile::PackHeaderLength
impl<T, U> core::convert::Into<U> for rustic_core::repofile::packfile::PackHeaderLength where U: core::convert::From<T>
pub fn rustic_core::repofile::packfile::PackHeaderLength::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::packfile::PackHeaderLength where U: core::convert::Into<T>
pub type rustic_core::repofile::packfile::PackHeaderLength::Error = core::convert::Infallible
pub fn rustic_core::repofile::packfile::PackHeaderLength::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::packfile::PackHeaderLength where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::packfile::PackHeaderLength::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::packfile::PackHeaderLength::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::packfile::PackHeaderLength where T: core::clone::Clone
pub type rustic_core::repofile::packfile::PackHeaderLength::Owned = T
pub fn rustic_core::repofile::packfile::PackHeaderLength::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::packfile::PackHeaderLength::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::packfile::PackHeaderLength where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::packfile::PackHeaderLength::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::packfile::PackHeaderLength where T: core::marker::Sized
pub fn rustic_core::repofile::packfile::PackHeaderLength::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::packfile::PackHeaderLength where T: core::marker::Sized
pub fn rustic_core::repofile::packfile::PackHeaderLength::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::packfile::PackHeaderLength
pub fn rustic_core::repofile::packfile::PackHeaderLength::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::packfile::PackHeaderLength
pub type rustic_core::repofile::packfile::PackHeaderLength::Init = T
pub const rustic_core::repofile::packfile::PackHeaderLength::ALIGN: usize
pub unsafe fn rustic_core::repofile::packfile::PackHeaderLength::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::packfile::PackHeaderLength::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::packfile::PackHeaderLength::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::packfile::PackHeaderLength::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::packfile::PackHeaderLength
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::packfile::PackHeaderLength
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::packfile::PackHeaderLength
pub type rustic_core::repofile::packfile::PackHeaderLength::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::packfile::PackHeaderLength where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::packfile::PackHeaderLength::vzip(self) -> V
pub struct rustic_core::repofile::PackHeaderRef<'a>(pub &'a [rustic_core::repofile::indexfile::IndexBlob])
impl<'a> rustic_core::repofile::packfile::PackHeaderRef<'a>
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::from_index_pack(pack: &'a rustic_core::repofile::indexfile::IndexPack) -> Self
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::pack_size(&self) -> u32
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::size(&self) -> u32
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::to_binary(&self) -> rustic_core::error::RusticResult<alloc::vec::Vec<u8>>
impl<'a> core::clone::Clone for rustic_core::repofile::packfile::PackHeaderRef<'a>
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::clone(&self) -> rustic_core::repofile::packfile::PackHeaderRef<'a>
impl<'a> core::fmt::Debug for rustic_core::repofile::packfile::PackHeaderRef<'a>
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<'a> core::marker::Send for rustic_core::repofile::packfile::PackHeaderRef<'a>
impl<'a> core::marker::Sync for rustic_core::repofile::packfile::PackHeaderRef<'a>
impl<'a> core::marker::Unpin for rustic_core::repofile::packfile::PackHeaderRef<'a>
impl<'a> core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::packfile::PackHeaderRef<'a>
impl<'a> core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::packfile::PackHeaderRef<'a>
impl<T, U> core::convert::Into<U> for rustic_core::repofile::packfile::PackHeaderRef<'a> where U: core::convert::From<T>
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::packfile::PackHeaderRef<'a> where U: core::convert::Into<T>
pub type rustic_core::repofile::packfile::PackHeaderRef<'a>::Error = core::convert::Infallible
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::packfile::PackHeaderRef<'a> where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::packfile::PackHeaderRef<'a>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::packfile::PackHeaderRef<'a> where T: core::clone::Clone
pub type rustic_core::repofile::packfile::PackHeaderRef<'a>::Owned = T
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::packfile::PackHeaderRef<'a> where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::packfile::PackHeaderRef<'a> where T: core::marker::Sized
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::packfile::PackHeaderRef<'a> where T: core::marker::Sized
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::packfile::PackHeaderRef<'a>
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::packfile::PackHeaderRef<'a>
pub type rustic_core::repofile::packfile::PackHeaderRef<'a>::Init = T
pub const rustic_core::repofile::packfile::PackHeaderRef<'a>::ALIGN: usize
pub unsafe fn rustic_core::repofile::packfile::PackHeaderRef<'a>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::packfile::PackHeaderRef<'a>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::packfile::PackHeaderRef<'a>::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::packfile::PackHeaderRef<'a>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::packfile::PackHeaderRef<'a>
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::packfile::PackHeaderRef<'a>
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::packfile::PackHeaderRef<'a>
pub type rustic_core::repofile::packfile::PackHeaderRef<'a>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::packfile::PackHeaderRef<'a> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::packfile::PackHeaderRef<'a>::vzip(self) -> V
pub struct rustic_core::repofile::PathList(pub alloc::vec::Vec<std::path::PathBuf>)
impl rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::from_string(sources: &str) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::snapshotfile::PathList::from_strings<I>(source: I) -> Self where I: core::iter::traits::collect::IntoIterator, <I as core::iter::traits::collect::IntoIterator>::Item: core::convert::AsRef<str>
pub fn rustic_core::repofile::snapshotfile::PathList::is_empty(&self) -> bool
pub fn rustic_core::repofile::snapshotfile::PathList::len(&self) -> usize
pub fn rustic_core::repofile::snapshotfile::PathList::merge(self) -> Self
pub fn rustic_core::repofile::snapshotfile::PathList::paths(&self) -> alloc::vec::Vec<std::path::PathBuf>
pub fn rustic_core::repofile::snapshotfile::PathList::sanitize(self) -> rustic_core::error::RusticResult<Self>
impl core::fmt::Display for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::clone::Clone for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::clone(&self) -> rustic_core::repofile::snapshotfile::PathList
impl core::cmp::Eq for rustic_core::repofile::snapshotfile::PathList
impl core::cmp::Ord for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::cmp(&self, other: &rustic_core::repofile::snapshotfile::PathList) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::repofile::snapshotfile::PathList> for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::eq(&self, other: &rustic_core::repofile::snapshotfile::PathList) -> bool
impl core::cmp::PartialOrd<rustic_core::repofile::snapshotfile::PathList> for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::partial_cmp(&self, other: &rustic_core::repofile::snapshotfile::PathList) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::default() -> rustic_core::repofile::snapshotfile::PathList
impl core::fmt::Debug for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::repofile::snapshotfile::PathList
impl core::marker::StructuralPartialEq for rustic_core::repofile::snapshotfile::PathList
impl core::marker::Send for rustic_core::repofile::snapshotfile::PathList
impl core::marker::Sync for rustic_core::repofile::snapshotfile::PathList
impl core::marker::Unpin for rustic_core::repofile::snapshotfile::PathList
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::snapshotfile::PathList
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::snapshotfile::PathList
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::snapshotfile::PathList where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::PathList::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::snapshotfile::PathList where U: core::convert::From<T>
pub fn rustic_core::repofile::snapshotfile::PathList::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::snapshotfile::PathList where U: core::convert::Into<T>
pub type rustic_core::repofile::snapshotfile::PathList::Error = core::convert::Infallible
pub fn rustic_core::repofile::snapshotfile::PathList::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::snapshotfile::PathList where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::snapshotfile::PathList::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::snapshotfile::PathList::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::snapshotfile::PathList where T: core::clone::Clone
pub type rustic_core::repofile::snapshotfile::PathList::Owned = T
pub fn rustic_core::repofile::snapshotfile::PathList::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::snapshotfile::PathList::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::repofile::snapshotfile::PathList where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::PathList::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::repofile::snapshotfile::PathList where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::repofile::snapshotfile::PathList::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::PathList::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::PathList::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::repofile::snapshotfile::PathList where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::PathList::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::snapshotfile::PathList where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::PathList::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::snapshotfile::PathList where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::PathList::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::snapshotfile::PathList
pub type rustic_core::repofile::snapshotfile::PathList::Init = T
pub const rustic_core::repofile::snapshotfile::PathList::ALIGN: usize
pub unsafe fn rustic_core::repofile::snapshotfile::PathList::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::snapshotfile::PathList::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::snapshotfile::PathList::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::snapshotfile::PathList::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::snapshotfile::PathList
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::snapshotfile::PathList
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::snapshotfile::PathList
pub type rustic_core::repofile::snapshotfile::PathList::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::snapshotfile::PathList where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::snapshotfile::PathList::vzip(self) -> V
pub struct rustic_core::repofile::SnapshotFile
pub rustic_core::repofile::SnapshotFile::delete: rustic_core::repofile::snapshotfile::DeleteOption
pub rustic_core::repofile::SnapshotFile::description: core::option::Option<alloc::string::String>
pub rustic_core::repofile::SnapshotFile::gid: u32
pub rustic_core::repofile::SnapshotFile::hostname: alloc::string::String
pub rustic_core::repofile::SnapshotFile::id: rustic_core::id::Id
pub rustic_core::repofile::SnapshotFile::label: alloc::string::String
pub rustic_core::repofile::SnapshotFile::original: core::option::Option<rustic_core::id::Id>
pub rustic_core::repofile::SnapshotFile::parent: core::option::Option<rustic_core::id::Id>
pub rustic_core::repofile::SnapshotFile::paths: rustic_core::repofile::snapshotfile::StringList
pub rustic_core::repofile::SnapshotFile::program_version: alloc::string::String
pub rustic_core::repofile::SnapshotFile::summary: core::option::Option<rustic_core::repofile::snapshotfile::SnapshotSummary>
pub rustic_core::repofile::SnapshotFile::tags: rustic_core::repofile::snapshotfile::StringList
pub rustic_core::repofile::SnapshotFile::time: chrono::datetime::DateTime<chrono::offset::local::Local>
pub rustic_core::repofile::SnapshotFile::tree: rustic_core::id::Id
pub rustic_core::repofile::SnapshotFile::uid: u32
pub rustic_core::repofile::SnapshotFile::username: alloc::string::String
impl rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::add_tags(&mut self, tag_lists: alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>) -> bool
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::all_from_backend<B, F>(be: &B, filter: F, p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<alloc::vec::Vec<Self>> where B: rustic_core::backend::decrypt::DecryptReadBackend, F: core::ops::function::FnMut(&Self) -> bool
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::clear_ids(sn: Self) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::cmp_group(&self, crit: rustic_core::repofile::snapshotfile::SnapshotGroupCriterion, other: &Self) -> core::cmp::Ordering
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::from_backend<B: rustic_core::backend::decrypt::DecryptReadBackend>(be: &B, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::from_id<B: rustic_core::backend::decrypt::DecryptReadBackend>(be: &B, id: &str) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::from_ids<B: rustic_core::backend::decrypt::DecryptReadBackend, T: core::convert::AsRef<str>>(be: &B, ids: &[T], p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<alloc::vec::Vec<Self>>
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::from_options(opts: &rustic_core::repofile::snapshotfile::SnapshotOptions) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::from_str<B: rustic_core::backend::decrypt::DecryptReadBackend>(be: &B, string: &str, predicate: impl core::ops::function::FnMut(&Self) -> bool + core::marker::Send + core::marker::Sync, p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::group_from_backend<B, F>(be: &B, filter: F, crit: rustic_core::repofile::snapshotfile::SnapshotGroupCriterion, p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::repofile::snapshotfile::SnapshotGroup, alloc::vec::Vec<Self>)>> where B: rustic_core::backend::decrypt::DecryptReadBackend, F: core::ops::function::FnMut(&Self) -> bool
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::has_group(&self, group: &rustic_core::repofile::snapshotfile::SnapshotGroup) -> bool
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::latest<B: rustic_core::backend::decrypt::DecryptReadBackend>(be: &B, predicate: impl core::ops::function::FnMut(&Self) -> bool + core::marker::Send + core::marker::Sync, p: &impl rustic_core::progress::Progress) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::modify_sn(&mut self, set: alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>, add: alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>, remove: &[rustic_core::repofile::snapshotfile::StringList], delete: &core::option::Option<rustic_core::repofile::snapshotfile::DeleteOption>) -> core::option::Option<Self>
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::must_delete(&self, now: chrono::datetime::DateTime<chrono::offset::local::Local>) -> bool
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::must_keep(&self, now: chrono::datetime::DateTime<chrono::offset::local::Local>) -> bool
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::remove_tags(&mut self, tag_lists: &[rustic_core::repofile::snapshotfile::StringList]) -> bool
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::set_id(tuple: (rustic_core::id::Id, Self)) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::set_tags(&mut self, tag_lists: alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>) -> bool
impl core::cmp::Eq for rustic_core::repofile::snapshotfile::SnapshotFile
impl core::cmp::Ord for rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::cmp(&self, other: &Self) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::repofile::snapshotfile::SnapshotFile> for rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::eq(&self, other: &Self) -> bool
impl core::cmp::PartialOrd<rustic_core::repofile::snapshotfile::SnapshotFile> for rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::partial_cmp(&self, other: &Self) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::default() -> Self
impl rustic_core::repofile::RepoFile for rustic_core::repofile::snapshotfile::SnapshotFile
pub const rustic_core::repofile::snapshotfile::SnapshotFile::TYPE: rustic_core::backend::FileType
impl core::clone::Clone for rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::clone(&self) -> rustic_core::repofile::snapshotfile::SnapshotFile
impl core::fmt::Debug for rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::snapshotfile::SnapshotFile
impl core::marker::Sync for rustic_core::repofile::snapshotfile::SnapshotFile
impl core::marker::Unpin for rustic_core::repofile::snapshotfile::SnapshotFile
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::snapshotfile::SnapshotFile
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::snapshotfile::SnapshotFile
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::snapshotfile::SnapshotFile where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::snapshotfile::SnapshotFile where U: core::convert::From<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::snapshotfile::SnapshotFile where U: core::convert::Into<T>
pub type rustic_core::repofile::snapshotfile::SnapshotFile::Error = core::convert::Infallible
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::snapshotfile::SnapshotFile where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::snapshotfile::SnapshotFile::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::snapshotfile::SnapshotFile where T: core::clone::Clone
pub type rustic_core::repofile::snapshotfile::SnapshotFile::Owned = T
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::snapshotfile::SnapshotFile where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::snapshotfile::SnapshotFile where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::snapshotfile::SnapshotFile where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::snapshotfile::SnapshotFile
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::snapshotfile::SnapshotFile
pub type rustic_core::repofile::snapshotfile::SnapshotFile::Init = T
pub const rustic_core::repofile::snapshotfile::SnapshotFile::ALIGN: usize
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotFile::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotFile::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotFile::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotFile::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::snapshotfile::SnapshotFile where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::snapshotfile::SnapshotFile
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::snapshotfile::SnapshotFile
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::snapshotfile::SnapshotFile
pub type rustic_core::repofile::snapshotfile::SnapshotFile::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::snapshotfile::SnapshotFile where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotFile::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::repofile::SnapshotSummary
pub rustic_core::repofile::SnapshotSummary::backup_duration: f64
pub rustic_core::repofile::SnapshotSummary::backup_end: chrono::datetime::DateTime<chrono::offset::local::Local>
pub rustic_core::repofile::SnapshotSummary::backup_start: chrono::datetime::DateTime<chrono::offset::local::Local>
pub rustic_core::repofile::SnapshotSummary::command: alloc::string::String
pub rustic_core::repofile::SnapshotSummary::data_added: u64
pub rustic_core::repofile::SnapshotSummary::data_added_files: u64
pub rustic_core::repofile::SnapshotSummary::data_added_files_packed: u64
pub rustic_core::repofile::SnapshotSummary::data_added_packed: u64
pub rustic_core::repofile::SnapshotSummary::data_added_trees: u64
pub rustic_core::repofile::SnapshotSummary::data_added_trees_packed: u64
pub rustic_core::repofile::SnapshotSummary::data_blobs: u64
pub rustic_core::repofile::SnapshotSummary::dirs_changed: u64
pub rustic_core::repofile::SnapshotSummary::dirs_new: u64
pub rustic_core::repofile::SnapshotSummary::dirs_unmodified: u64
pub rustic_core::repofile::SnapshotSummary::files_changed: u64
pub rustic_core::repofile::SnapshotSummary::files_new: u64
pub rustic_core::repofile::SnapshotSummary::files_unmodified: u64
pub rustic_core::repofile::SnapshotSummary::total_bytes_processed: u64
pub rustic_core::repofile::SnapshotSummary::total_dirs_processed: u64
pub rustic_core::repofile::SnapshotSummary::total_dirsize_processed: u64
pub rustic_core::repofile::SnapshotSummary::total_duration: f64
pub rustic_core::repofile::SnapshotSummary::total_files_processed: u64
pub rustic_core::repofile::SnapshotSummary::tree_blobs: u64
impl rustic_core::repofile::snapshotfile::SnapshotSummary
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::finalize(&mut self, snap_time: chrono::datetime::DateTime<chrono::offset::local::Local>) -> rustic_core::error::RusticResult<()>
impl core::default::Default for rustic_core::repofile::snapshotfile::SnapshotSummary
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::default() -> Self
impl core::clone::Clone for rustic_core::repofile::snapshotfile::SnapshotSummary
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::clone(&self) -> rustic_core::repofile::snapshotfile::SnapshotSummary
impl core::fmt::Debug for rustic_core::repofile::snapshotfile::SnapshotSummary
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::snapshotfile::SnapshotSummary
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::snapshotfile::SnapshotSummary
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::snapshotfile::SnapshotSummary
impl core::marker::Sync for rustic_core::repofile::snapshotfile::SnapshotSummary
impl core::marker::Unpin for rustic_core::repofile::snapshotfile::SnapshotSummary
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::snapshotfile::SnapshotSummary
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::snapshotfile::SnapshotSummary
impl<T, U> core::convert::Into<U> for rustic_core::repofile::snapshotfile::SnapshotSummary where U: core::convert::From<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::snapshotfile::SnapshotSummary where U: core::convert::Into<T>
pub type rustic_core::repofile::snapshotfile::SnapshotSummary::Error = core::convert::Infallible
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::snapshotfile::SnapshotSummary where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::snapshotfile::SnapshotSummary::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::snapshotfile::SnapshotSummary where T: core::clone::Clone
pub type rustic_core::repofile::snapshotfile::SnapshotSummary::Owned = T
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::snapshotfile::SnapshotSummary where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::snapshotfile::SnapshotSummary where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::snapshotfile::SnapshotSummary where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::snapshotfile::SnapshotSummary
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::snapshotfile::SnapshotSummary
pub type rustic_core::repofile::snapshotfile::SnapshotSummary::Init = T
pub const rustic_core::repofile::snapshotfile::SnapshotSummary::ALIGN: usize
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotSummary::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotSummary::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotSummary::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotSummary::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::snapshotfile::SnapshotSummary where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::snapshotfile::SnapshotSummary
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::snapshotfile::SnapshotSummary
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::snapshotfile::SnapshotSummary
pub type rustic_core::repofile::snapshotfile::SnapshotSummary::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::snapshotfile::SnapshotSummary where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotSummary::vzip(self) -> V
pub struct rustic_core::repofile::StringList(pub alloc::vec::Vec<alloc::string::String>)
impl rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::add(&mut self, s: alloc::string::String)
pub fn rustic_core::repofile::snapshotfile::StringList::add_all(&mut self, string_lists: alloc::vec::Vec<Self>)
pub fn rustic_core::repofile::snapshotfile::StringList::add_list(&mut self, sl: Self)
pub fn rustic_core::repofile::snapshotfile::StringList::contains(&self, s: &str) -> bool
pub fn rustic_core::repofile::snapshotfile::StringList::contains_all(&self, sl: &Self) -> bool
pub fn rustic_core::repofile::snapshotfile::StringList::formatln(&self) -> alloc::string::String
pub fn rustic_core::repofile::snapshotfile::StringList::iter(&self) -> core::slice::iter::Iter<'_, alloc::string::String>
pub fn rustic_core::repofile::snapshotfile::StringList::matches(&self, sls: &[Self]) -> bool
pub fn rustic_core::repofile::snapshotfile::StringList::remove_all(&mut self, string_lists: &[Self])
pub fn rustic_core::repofile::snapshotfile::StringList::set_paths<T: core::convert::AsRef<std::path::Path>>(&mut self, paths: &[T]) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repofile::snapshotfile::StringList::sort(&mut self)
impl core::fmt::Display for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::str::traits::FromStr for rustic_core::repofile::snapshotfile::StringList
pub type rustic_core::repofile::snapshotfile::StringList::Err = rustic_core::error::RusticError
pub fn rustic_core::repofile::snapshotfile::StringList::from_str(s: &str) -> rustic_core::error::RusticResult<Self>
impl core::clone::Clone for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::clone(&self) -> rustic_core::repofile::snapshotfile::StringList
impl core::cmp::Eq for rustic_core::repofile::snapshotfile::StringList
impl core::cmp::Ord for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::cmp(&self, other: &rustic_core::repofile::snapshotfile::StringList) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::repofile::snapshotfile::StringList> for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::eq(&self, other: &rustic_core::repofile::snapshotfile::StringList) -> bool
impl core::cmp::PartialOrd<rustic_core::repofile::snapshotfile::StringList> for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::partial_cmp(&self, other: &rustic_core::repofile::snapshotfile::StringList) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::default() -> rustic_core::repofile::snapshotfile::StringList
impl core::fmt::Debug for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::repofile::snapshotfile::StringList
impl core::marker::StructuralPartialEq for rustic_core::repofile::snapshotfile::StringList
impl serde::ser::Serialize for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::snapshotfile::StringList
impl core::marker::Sync for rustic_core::repofile::snapshotfile::StringList
impl core::marker::Unpin for rustic_core::repofile::snapshotfile::StringList
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::snapshotfile::StringList
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::snapshotfile::StringList
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::snapshotfile::StringList where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::StringList::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::snapshotfile::StringList where U: core::convert::From<T>
pub fn rustic_core::repofile::snapshotfile::StringList::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::snapshotfile::StringList where U: core::convert::Into<T>
pub type rustic_core::repofile::snapshotfile::StringList::Error = core::convert::Infallible
pub fn rustic_core::repofile::snapshotfile::StringList::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::snapshotfile::StringList where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::snapshotfile::StringList::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::snapshotfile::StringList::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::snapshotfile::StringList where T: core::clone::Clone
pub type rustic_core::repofile::snapshotfile::StringList::Owned = T
pub fn rustic_core::repofile::snapshotfile::StringList::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::snapshotfile::StringList::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::repofile::snapshotfile::StringList where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::StringList::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::repofile::snapshotfile::StringList where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::repofile::snapshotfile::StringList::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::StringList::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::StringList::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::repofile::snapshotfile::StringList where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::StringList::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::snapshotfile::StringList where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::StringList::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::snapshotfile::StringList where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::StringList::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::snapshotfile::StringList
pub type rustic_core::repofile::snapshotfile::StringList::Init = T
pub const rustic_core::repofile::snapshotfile::StringList::ALIGN: usize
pub unsafe fn rustic_core::repofile::snapshotfile::StringList::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::snapshotfile::StringList::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::snapshotfile::StringList::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::snapshotfile::StringList::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::snapshotfile::StringList where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::snapshotfile::StringList
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::snapshotfile::StringList
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::snapshotfile::StringList
pub type rustic_core::repofile::snapshotfile::StringList::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::snapshotfile::StringList where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::snapshotfile::StringList::vzip(self) -> V
pub struct rustic_core::repofile::Tree
pub rustic_core::repofile::Tree::nodes: alloc::vec::Vec<rustic_core::backend::node::Node>
impl rustic_core::blob::tree::Tree
pub fn rustic_core::blob::tree::Tree::add(&mut self, node: rustic_core::backend::node::Node)
pub fn rustic_core::blob::tree::Tree::from_backend(be: &impl rustic_core::index::IndexedBackend, id: rustic_core::id::Id) -> rustic_core::error::RusticResult<Self>
pub const fn rustic_core::blob::tree::Tree::new() -> Self
pub fn rustic_core::blob::tree::Tree::node_from_path(be: &impl rustic_core::index::IndexedBackend, id: rustic_core::id::Id, path: &std::path::Path) -> rustic_core::error::RusticResult<rustic_core::backend::node::Node>
pub fn rustic_core::blob::tree::Tree::serialize(&self) -> rustic_core::error::RusticResult<(alloc::vec::Vec<u8>, rustic_core::id::Id)>
impl core::iter::traits::collect::IntoIterator for rustic_core::blob::tree::Tree
pub type rustic_core::blob::tree::Tree::IntoIter = alloc::vec::into_iter::IntoIter<rustic_core::backend::node::Node, alloc::alloc::Global>
pub type rustic_core::blob::tree::Tree::Item = rustic_core::backend::node::Node
pub fn rustic_core::blob::tree::Tree::into_iter(self) -> Self::IntoIter
impl core::clone::Clone for rustic_core::blob::tree::Tree
pub fn rustic_core::blob::tree::Tree::clone(&self) -> rustic_core::blob::tree::Tree
impl core::default::Default for rustic_core::blob::tree::Tree
pub fn rustic_core::blob::tree::Tree::default() -> rustic_core::blob::tree::Tree
impl core::fmt::Debug for rustic_core::blob::tree::Tree
pub fn rustic_core::blob::tree::Tree::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::blob::tree::Tree
pub fn rustic_core::blob::tree::Tree::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::blob::tree::Tree
pub fn rustic_core::blob::tree::Tree::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::blob::tree::Tree
impl core::marker::Sync for rustic_core::blob::tree::Tree
impl core::marker::Unpin for rustic_core::blob::tree::Tree
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::blob::tree::Tree
impl core::panic::unwind_safe::UnwindSafe for rustic_core::blob::tree::Tree
impl<T, U> core::convert::Into<U> for rustic_core::blob::tree::Tree where U: core::convert::From<T>
pub fn rustic_core::blob::tree::Tree::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::blob::tree::Tree where U: core::convert::Into<T>
pub type rustic_core::blob::tree::Tree::Error = core::convert::Infallible
pub fn rustic_core::blob::tree::Tree::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::blob::tree::Tree where U: core::convert::TryFrom<T>
pub type rustic_core::blob::tree::Tree::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::blob::tree::Tree::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::blob::tree::Tree where T: core::clone::Clone
pub type rustic_core::blob::tree::Tree::Owned = T
pub fn rustic_core::blob::tree::Tree::clone_into(&self, target: &mut T)
pub fn rustic_core::blob::tree::Tree::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::blob::tree::Tree where T: 'static + core::marker::Sized
pub fn rustic_core::blob::tree::Tree::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::blob::tree::Tree where T: core::marker::Sized
pub fn rustic_core::blob::tree::Tree::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::blob::tree::Tree where T: core::marker::Sized
pub fn rustic_core::blob::tree::Tree::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::blob::tree::Tree
pub fn rustic_core::blob::tree::Tree::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::blob::tree::Tree
pub type rustic_core::blob::tree::Tree::Init = T
pub const rustic_core::blob::tree::Tree::ALIGN: usize
pub unsafe fn rustic_core::blob::tree::Tree::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::blob::tree::Tree::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::blob::tree::Tree::drop(ptr: usize)
pub unsafe fn rustic_core::blob::tree::Tree::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::blob::tree::Tree where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::blob::tree::Tree
impl<T> tracing::instrument::WithSubscriber for rustic_core::blob::tree::Tree
impl<T> typenum::type_operators::Same<T> for rustic_core::blob::tree::Tree
pub type rustic_core::blob::tree::Tree::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::blob::tree::Tree where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::blob::tree::Tree::vzip(self) -> V
pub const rustic_core::repofile::ALL_BLOB_TYPES: _
pub const rustic_core::repofile::ALL_FILE_TYPES: _
pub trait rustic_core::repofile::RepoFile: serde::ser::Serialize + serde::de::DeserializeOwned + core::marker::Sized + core::marker::Send + core::marker::Sync + 'static
pub const rustic_core::repofile::RepoFile::TYPE: rustic_core::backend::FileType
impl rustic_core::repofile::RepoFile for rustic_core::repofile::configfile::ConfigFile
pub const rustic_core::repofile::configfile::ConfigFile::TYPE: rustic_core::backend::FileType
impl rustic_core::repofile::RepoFile for rustic_core::repofile::indexfile::IndexFile
pub const rustic_core::repofile::indexfile::IndexFile::TYPE: rustic_core::backend::FileType
impl rustic_core::repofile::RepoFile for rustic_core::repofile::snapshotfile::SnapshotFile
pub const rustic_core::repofile::snapshotfile::SnapshotFile::TYPE: rustic_core::backend::FileType
pub mod rustic_core::repository
pub mod rustic_core::repository::warm_up
pub mod rustic_core::repository::warm_up::constants
pub const rustic_core::repository::warm_up::constants::MAX_READER_THREADS_NUM: usize = 20usize
pub fn rustic_core::repository::warm_up::warm_up<P: rustic_core::progress::ProgressBars, S>(repo: &rustic_core::repository::Repository<P, S>, packs: impl core::iter::traits::exact_size::ExactSizeIterator<Item = rustic_core::id::Id>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repository::warm_up::warm_up_access<P: rustic_core::progress::ProgressBars, S>(repo: &rustic_core::repository::Repository<P, S>, packs: impl core::iter::traits::exact_size::ExactSizeIterator<Item = rustic_core::id::Id>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repository::warm_up::warm_up_command<P: rustic_core::progress::ProgressBars>(packs: impl core::iter::traits::exact_size::ExactSizeIterator<Item = rustic_core::id::Id>, command: &str, pb: &P) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repository::warm_up::warm_up_wait<P: rustic_core::progress::ProgressBars, S>(repo: &rustic_core::repository::Repository<P, S>, packs: impl core::iter::traits::exact_size::ExactSizeIterator<Item = rustic_core::id::Id>) -> rustic_core::error::RusticResult<()>
pub struct rustic_core::repository::FullIndex
impl core::clone::Clone for rustic_core::repository::FullIndex
pub fn rustic_core::repository::FullIndex::clone(&self) -> rustic_core::repository::FullIndex
impl core::fmt::Debug for rustic_core::repository::FullIndex
pub fn rustic_core::repository::FullIndex::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::repository::FullIndex
impl core::marker::Send for rustic_core::repository::FullIndex
impl core::marker::Sync for rustic_core::repository::FullIndex
impl core::marker::Unpin for rustic_core::repository::FullIndex
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repository::FullIndex
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repository::FullIndex
impl<T, U> core::convert::Into<U> for rustic_core::repository::FullIndex where U: core::convert::From<T>
pub fn rustic_core::repository::FullIndex::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repository::FullIndex where U: core::convert::Into<T>
pub type rustic_core::repository::FullIndex::Error = core::convert::Infallible
pub fn rustic_core::repository::FullIndex::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repository::FullIndex where U: core::convert::TryFrom<T>
pub type rustic_core::repository::FullIndex::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repository::FullIndex::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repository::FullIndex where T: core::clone::Clone
pub type rustic_core::repository::FullIndex::Owned = T
pub fn rustic_core::repository::FullIndex::clone_into(&self, target: &mut T)
pub fn rustic_core::repository::FullIndex::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repository::FullIndex where T: 'static + core::marker::Sized
pub fn rustic_core::repository::FullIndex::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repository::FullIndex where T: core::marker::Sized
pub fn rustic_core::repository::FullIndex::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repository::FullIndex where T: core::marker::Sized
pub fn rustic_core::repository::FullIndex::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repository::FullIndex
pub fn rustic_core::repository::FullIndex::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repository::FullIndex
pub type rustic_core::repository::FullIndex::Init = T
pub const rustic_core::repository::FullIndex::ALIGN: usize
pub unsafe fn rustic_core::repository::FullIndex::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repository::FullIndex::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repository::FullIndex::drop(ptr: usize)
pub unsafe fn rustic_core::repository::FullIndex::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repository::FullIndex
impl<T> tracing::instrument::WithSubscriber for rustic_core::repository::FullIndex
impl<T> typenum::type_operators::Same<T> for rustic_core::repository::FullIndex
pub type rustic_core::repository::FullIndex::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repository::FullIndex where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repository::FullIndex::vzip(self) -> V
pub struct rustic_core::repository::IdIndex
impl core::clone::Clone for rustic_core::repository::IdIndex
pub fn rustic_core::repository::IdIndex::clone(&self) -> rustic_core::repository::IdIndex
impl core::fmt::Debug for rustic_core::repository::IdIndex
pub fn rustic_core::repository::IdIndex::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::repository::IdIndex
impl core::marker::Send for rustic_core::repository::IdIndex
impl core::marker::Sync for rustic_core::repository::IdIndex
impl core::marker::Unpin for rustic_core::repository::IdIndex
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repository::IdIndex
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repository::IdIndex
impl<T, U> core::convert::Into<U> for rustic_core::repository::IdIndex where U: core::convert::From<T>
pub fn rustic_core::repository::IdIndex::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repository::IdIndex where U: core::convert::Into<T>
pub type rustic_core::repository::IdIndex::Error = core::convert::Infallible
pub fn rustic_core::repository::IdIndex::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repository::IdIndex where U: core::convert::TryFrom<T>
pub type rustic_core::repository::IdIndex::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repository::IdIndex::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repository::IdIndex where T: core::clone::Clone
pub type rustic_core::repository::IdIndex::Owned = T
pub fn rustic_core::repository::IdIndex::clone_into(&self, target: &mut T)
pub fn rustic_core::repository::IdIndex::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repository::IdIndex where T: 'static + core::marker::Sized
pub fn rustic_core::repository::IdIndex::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repository::IdIndex where T: core::marker::Sized
pub fn rustic_core::repository::IdIndex::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repository::IdIndex where T: core::marker::Sized
pub fn rustic_core::repository::IdIndex::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repository::IdIndex
pub fn rustic_core::repository::IdIndex::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repository::IdIndex
pub type rustic_core::repository::IdIndex::Init = T
pub const rustic_core::repository::IdIndex::ALIGN: usize
pub unsafe fn rustic_core::repository::IdIndex::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repository::IdIndex::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repository::IdIndex::drop(ptr: usize)
pub unsafe fn rustic_core::repository::IdIndex::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repository::IdIndex
impl<T> tracing::instrument::WithSubscriber for rustic_core::repository::IdIndex
impl<T> typenum::type_operators::Same<T> for rustic_core::repository::IdIndex
pub type rustic_core::repository::IdIndex::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repository::IdIndex where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repository::IdIndex::vzip(self) -> V
pub struct rustic_core::repository::IndexedStatus<T, S: rustic_core::repository::Open>
pub rustic_core::repository::IndexedStatus::index: rustic_core::index::IndexBackend<<S as rustic_core::repository::Open>::DBE>
pub rustic_core::repository::IndexedStatus::marker: core::marker::PhantomData<T>
pub rustic_core::repository::IndexedStatus::open: S
impl<S: rustic_core::repository::Open> rustic_core::repository::IndexedFull for rustic_core::repository::IndexedStatus<rustic_core::repository::FullIndex, S>
impl<S: rustic_core::repository::Open> rustic_core::repository::IndexedIds for rustic_core::repository::IndexedStatus<rustic_core::repository::FullIndex, S>
impl<S: rustic_core::repository::Open> rustic_core::repository::IndexedIds for rustic_core::repository::IndexedStatus<rustic_core::repository::IdIndex, S>
impl<T, S: rustic_core::repository::Open> rustic_core::repository::IndexedTree for rustic_core::repository::IndexedStatus<T, S>
pub type rustic_core::repository::IndexedStatus<T, S>::I = rustic_core::index::IndexBackend<<S as rustic_core::repository::Open>::DBE>
pub fn rustic_core::repository::IndexedStatus<T, S>::index(&self) -> &Self::I
impl<T, S: rustic_core::repository::Open> rustic_core::repository::Open for rustic_core::repository::IndexedStatus<T, S>
pub type rustic_core::repository::IndexedStatus<T, S>::DBE = <S as rustic_core::repository::Open>::DBE
pub fn rustic_core::repository::IndexedStatus<T, S>::cache(&self) -> core::option::Option<&rustic_core::backend::cache::Cache>
pub fn rustic_core::repository::IndexedStatus<T, S>::config(&self) -> &rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repository::IndexedStatus<T, S>::dbe(&self) -> &Self::DBE
pub fn rustic_core::repository::IndexedStatus<T, S>::key(&self) -> &rustic_core::crypto::aespoly1305::Key
impl<T: core::fmt::Debug, S: core::fmt::Debug + rustic_core::repository::Open> core::fmt::Debug for rustic_core::repository::IndexedStatus<T, S> where <S as rustic_core::repository::Open>::DBE: core::fmt::Debug
pub fn rustic_core::repository::IndexedStatus<T, S>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T, S> core::marker::Send for rustic_core::repository::IndexedStatus<T, S> where S: core::marker::Send, T: core::marker::Send
impl<T, S> core::marker::Sync for rustic_core::repository::IndexedStatus<T, S> where S: core::marker::Sync, T: core::marker::Sync
impl<T, S> core::marker::Unpin for rustic_core::repository::IndexedStatus<T, S> where S: core::marker::Unpin, T: core::marker::Unpin, <S as rustic_core::repository::Open>::DBE: core::marker::Unpin
impl<T, S> core::panic::unwind_safe::RefUnwindSafe for rustic_core::repository::IndexedStatus<T, S> where S: core::panic::unwind_safe::RefUnwindSafe, T: core::panic::unwind_safe::RefUnwindSafe, <S as rustic_core::repository::Open>::DBE: core::panic::unwind_safe::RefUnwindSafe
impl<T, S> core::panic::unwind_safe::UnwindSafe for rustic_core::repository::IndexedStatus<T, S> where S: core::panic::unwind_safe::UnwindSafe, T: core::panic::unwind_safe::UnwindSafe, <S as rustic_core::repository::Open>::DBE: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::repository::IndexedStatus<T, S> where U: core::convert::From<T>
pub fn rustic_core::repository::IndexedStatus<T, S>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repository::IndexedStatus<T, S> where U: core::convert::Into<T>
pub type rustic_core::repository::IndexedStatus<T, S>::Error = core::convert::Infallible
pub fn rustic_core::repository::IndexedStatus<T, S>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repository::IndexedStatus<T, S> where U: core::convert::TryFrom<T>
pub type rustic_core::repository::IndexedStatus<T, S>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repository::IndexedStatus<T, S>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::repository::IndexedStatus<T, S> where T: 'static + core::marker::Sized
pub fn rustic_core::repository::IndexedStatus<T, S>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repository::IndexedStatus<T, S> where T: core::marker::Sized
pub fn rustic_core::repository::IndexedStatus<T, S>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repository::IndexedStatus<T, S> where T: core::marker::Sized
pub fn rustic_core::repository::IndexedStatus<T, S>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repository::IndexedStatus<T, S>
pub fn rustic_core::repository::IndexedStatus<T, S>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repository::IndexedStatus<T, S>
pub type rustic_core::repository::IndexedStatus<T, S>::Init = T
pub const rustic_core::repository::IndexedStatus<T, S>::ALIGN: usize
pub unsafe fn rustic_core::repository::IndexedStatus<T, S>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repository::IndexedStatus<T, S>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repository::IndexedStatus<T, S>::drop(ptr: usize)
pub unsafe fn rustic_core::repository::IndexedStatus<T, S>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repository::IndexedStatus<T, S>
impl<T> tracing::instrument::WithSubscriber for rustic_core::repository::IndexedStatus<T, S>
impl<T> typenum::type_operators::Same<T> for rustic_core::repository::IndexedStatus<T, S>
pub type rustic_core::repository::IndexedStatus<T, S>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repository::IndexedStatus<T, S> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repository::IndexedStatus<T, S>::vzip(self) -> V
pub struct rustic_core::repository::OpenStatus
pub rustic_core::repository::OpenStatus::cache: core::option::Option<rustic_core::backend::cache::Cache>
pub rustic_core::repository::OpenStatus::config: rustic_core::repofile::configfile::ConfigFile
pub rustic_core::repository::OpenStatus::dbe: rustic_core::backend::decrypt::DecryptBackend<rustic_core::backend::cache::CachedBackend<rustic_core::backend::hotcold::HotColdBackend<rustic_core::backend::choose::ChooseBackend>>, rustic_core::crypto::aespoly1305::Key>
pub rustic_core::repository::OpenStatus::key: rustic_core::crypto::aespoly1305::Key
impl rustic_core::repository::Open for rustic_core::repository::OpenStatus
pub type rustic_core::repository::OpenStatus::DBE = rustic_core::backend::decrypt::DecryptBackend<rustic_core::backend::cache::CachedBackend<rustic_core::backend::hotcold::HotColdBackend<rustic_core::backend::choose::ChooseBackend>>, rustic_core::crypto::aespoly1305::Key>
pub fn rustic_core::repository::OpenStatus::cache(&self) -> core::option::Option<&rustic_core::backend::cache::Cache>
pub fn rustic_core::repository::OpenStatus::config(&self) -> &rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repository::OpenStatus::dbe(&self) -> &Self::DBE
pub fn rustic_core::repository::OpenStatus::key(&self) -> &rustic_core::crypto::aespoly1305::Key
impl core::fmt::Debug for rustic_core::repository::OpenStatus
pub fn rustic_core::repository::OpenStatus::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::repository::OpenStatus
impl core::marker::Sync for rustic_core::repository::OpenStatus
impl core::marker::Unpin for rustic_core::repository::OpenStatus
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::repository::OpenStatus
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::repository::OpenStatus
impl<T, U> core::convert::Into<U> for rustic_core::repository::OpenStatus where U: core::convert::From<T>
pub fn rustic_core::repository::OpenStatus::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repository::OpenStatus where U: core::convert::Into<T>
pub type rustic_core::repository::OpenStatus::Error = core::convert::Infallible
pub fn rustic_core::repository::OpenStatus::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repository::OpenStatus where U: core::convert::TryFrom<T>
pub type rustic_core::repository::OpenStatus::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repository::OpenStatus::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::repository::OpenStatus where T: 'static + core::marker::Sized
pub fn rustic_core::repository::OpenStatus::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repository::OpenStatus where T: core::marker::Sized
pub fn rustic_core::repository::OpenStatus::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repository::OpenStatus where T: core::marker::Sized
pub fn rustic_core::repository::OpenStatus::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repository::OpenStatus
pub fn rustic_core::repository::OpenStatus::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repository::OpenStatus
pub type rustic_core::repository::OpenStatus::Init = T
pub const rustic_core::repository::OpenStatus::ALIGN: usize
pub unsafe fn rustic_core::repository::OpenStatus::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repository::OpenStatus::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repository::OpenStatus::drop(ptr: usize)
pub unsafe fn rustic_core::repository::OpenStatus::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repository::OpenStatus
impl<T> tracing::instrument::WithSubscriber for rustic_core::repository::OpenStatus
impl<T> typenum::type_operators::Same<T> for rustic_core::repository::OpenStatus
pub type rustic_core::repository::OpenStatus::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repository::OpenStatus where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repository::OpenStatus::vzip(self) -> V
pub struct rustic_core::repository::Repository<P, S>
pub rustic_core::repository::Repository::be: rustic_core::backend::hotcold::HotColdBackend<rustic_core::backend::choose::ChooseBackend>
pub rustic_core::repository::Repository::be_hot: core::option::Option<rustic_core::backend::choose::ChooseBackend>
pub rustic_core::repository::Repository::name: alloc::string::String
pub rustic_core::repository::Repository::opts: rustic_core::repository::RepositoryOptions
pub rustic_core::repository::Repository::pb: P
pub rustic_core::repository::Repository::status: S
impl rustic_core::repository::Repository<rustic_core::progress::NoProgressBars, ()>
pub fn rustic_core::repository::Repository<rustic_core::progress::NoProgressBars, ()>::new(opts: &rustic_core::repository::RepositoryOptions) -> rustic_core::error::RusticResult<Self>
impl<P, S: rustic_core::repository::IndexedFull> rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::get_index_entry(&self, tpe: rustic_core::blob::BlobType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<rustic_core::index::IndexEntry>
impl<P, S: rustic_core::repository::Open> rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::add_key(&self, pass: &str, opts: &rustic_core::commands::key::KeyOptions) -> rustic_core::error::RusticResult<rustic_core::id::Id>
pub fn rustic_core::repository::Repository<P, S>::apply_config(&self, opts: &rustic_core::commands::config::ConfigOptions) -> rustic_core::error::RusticResult<bool>
pub fn rustic_core::repository::Repository<P, S>::cat_file(&self, tpe: rustic_core::backend::FileType, id: &str) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::repository::Repository<P, S>::config(&self) -> &rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repository::Repository<P, S>::dbe(&self) -> &<S as rustic_core::repository::Open>::DBE
impl<P, S> rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::config_id(&self) -> rustic_core::error::RusticResult<core::option::Option<rustic_core::id::Id>>
pub fn rustic_core::repository::Repository<P, S>::init(self, key_opts: &rustic_core::commands::key::KeyOptions, config_opts: &rustic_core::commands::config::ConfigOptions) -> rustic_core::error::RusticResult<rustic_core::repository::Repository<P, rustic_core::repository::OpenStatus>>
pub fn rustic_core::repository::Repository<P, S>::init_with_config(self, password: &str, key_opts: &rustic_core::commands::key::KeyOptions, config: rustic_core::repofile::configfile::ConfigFile) -> rustic_core::error::RusticResult<rustic_core::repository::Repository<P, rustic_core::repository::OpenStatus>>
pub fn rustic_core::repository::Repository<P, S>::init_with_password(self, pass: &str, key_opts: &rustic_core::commands::key::KeyOptions, config_opts: &rustic_core::commands::config::ConfigOptions) -> rustic_core::error::RusticResult<rustic_core::repository::Repository<P, rustic_core::repository::OpenStatus>>
pub fn rustic_core::repository::Repository<P, S>::list(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<impl core::iter::traits::iterator::Iterator<Item = rustic_core::id::Id>>
pub fn rustic_core::repository::Repository<P, S>::open(self) -> rustic_core::error::RusticResult<rustic_core::repository::Repository<P, rustic_core::repository::OpenStatus>>
pub fn rustic_core::repository::Repository<P, S>::open_raw(self, key: rustic_core::crypto::aespoly1305::Key, config: rustic_core::repofile::configfile::ConfigFile) -> rustic_core::error::RusticResult<rustic_core::repository::Repository<P, rustic_core::repository::OpenStatus>>
pub fn rustic_core::repository::Repository<P, S>::open_with_password(self, password: &str) -> rustic_core::error::RusticResult<rustic_core::repository::Repository<P, rustic_core::repository::OpenStatus>>
pub fn rustic_core::repository::Repository<P, S>::password(&self) -> rustic_core::error::RusticResult<core::option::Option<alloc::string::String>>
impl<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedFull> rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::cat_blob(&self, tpe: rustic_core::blob::BlobType, id: &str) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::repository::Repository<P, S>::copy<'a, Q: rustic_core::progress::ProgressBars, R: rustic_core::repository::IndexedIds>(&self, repo_dest: &rustic_core::repository::Repository<Q, R>, snapshots: impl core::iter::traits::collect::IntoIterator<Item = &'a rustic_core::repofile::snapshotfile::SnapshotFile>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repository::Repository<P, S>::dump(&self, node: &rustic_core::backend::node::Node, w: &mut impl std::io::Write) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repository::Repository<P, S>::prepare_restore(&self, opts: &rustic_core::commands::restore::RestoreOptions, node_streamer: impl core::iter::traits::iterator::Iterator<Item = rustic_core::error::RusticResult<(std::path::PathBuf, rustic_core::backend::node::Node)>>, dest: &rustic_core::backend::local::LocalDestination, dry_run: bool) -> rustic_core::error::RusticResult<rustic_core::commands::restore::RestorePlan>
pub fn rustic_core::repository::Repository<P, S>::repair_snapshots(&self, opts: &rustic_core::commands::repair::snapshots::RepairSnapshotsOptions, snapshots: alloc::vec::Vec<rustic_core::repofile::snapshotfile::SnapshotFile>, dry_run: bool) -> rustic_core::error::RusticResult<()>
impl<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedIds> rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::backup(&self, opts: &rustic_core::commands::backup::BackupOptions, source: rustic_core::repofile::snapshotfile::PathList, snap: rustic_core::repofile::snapshotfile::SnapshotFile) -> rustic_core::error::RusticResult<rustic_core::repofile::snapshotfile::SnapshotFile>
impl<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedTree> rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::cat_tree(&self, snap: &str, sn_filter: impl core::ops::function::FnMut(&rustic_core::repofile::snapshotfile::SnapshotFile) -> bool + core::marker::Send + core::marker::Sync) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::repository::Repository<P, S>::ls(&self, node: &rustic_core::backend::node::Node, ls_opts: &rustic_core::blob::tree::TreeStreamerOptions) -> rustic_core::error::RusticResult<impl core::iter::traits::iterator::Iterator<Item = rustic_core::error::RusticResult<(std::path::PathBuf, rustic_core::backend::node::Node)>> + core::clone::Clone>
pub fn rustic_core::repository::Repository<P, S>::merge_snapshots(&self, snaps: &[rustic_core::repofile::snapshotfile::SnapshotFile], cmp: &impl core::ops::function::Fn(&rustic_core::backend::node::Node, &rustic_core::backend::node::Node) -> core::cmp::Ordering, snap: rustic_core::repofile::snapshotfile::SnapshotFile) -> rustic_core::error::RusticResult<rustic_core::repofile::snapshotfile::SnapshotFile>
pub fn rustic_core::repository::Repository<P, S>::merge_trees(&self, trees: &[rustic_core::id::Id], cmp: &impl core::ops::function::Fn(&rustic_core::backend::node::Node, &rustic_core::backend::node::Node) -> core::cmp::Ordering, summary: &mut rustic_core::repofile::snapshotfile::SnapshotSummary) -> rustic_core::error::RusticResult<rustic_core::id::Id>
pub fn rustic_core::repository::Repository<P, S>::node_from_snapshot_and_path(&self, snap: &rustic_core::repofile::snapshotfile::SnapshotFile, path: &str) -> rustic_core::error::RusticResult<rustic_core::backend::node::Node>
pub fn rustic_core::repository::Repository<P, S>::node_from_snapshot_path(&self, snap_path: &str, filter: impl core::ops::function::FnMut(&rustic_core::repofile::snapshotfile::SnapshotFile) -> bool + core::marker::Send + core::marker::Sync) -> rustic_core::error::RusticResult<rustic_core::backend::node::Node>
pub fn rustic_core::repository::Repository<P, S>::restore(&self, restore_infos: rustic_core::commands::restore::RestorePlan, opts: &rustic_core::commands::restore::RestoreOptions, node_streamer: impl core::iter::traits::iterator::Iterator<Item = rustic_core::error::RusticResult<(std::path::PathBuf, rustic_core::backend::node::Node)>>, dest: &rustic_core::backend::local::LocalDestination) -> rustic_core::error::RusticResult<()>
impl<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::Open> rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::check(&self, opts: rustic_core::commands::check::CheckOptions) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repository::Repository<P, S>::delete_snapshots(&self, ids: &[rustic_core::id::Id]) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repository::Repository<P, S>::get_all_snapshots(&self) -> rustic_core::error::RusticResult<alloc::vec::Vec<rustic_core::repofile::snapshotfile::SnapshotFile>>
pub fn rustic_core::repository::Repository<P, S>::get_forget_snapshots(&self, keep: &rustic_core::commands::forget::KeepOptions, group_by: rustic_core::repofile::snapshotfile::SnapshotGroupCriterion, filter: impl core::ops::function::FnMut(&rustic_core::repofile::snapshotfile::SnapshotFile) -> bool) -> rustic_core::error::RusticResult<rustic_core::commands::forget::ForgetGroups>
pub fn rustic_core::repository::Repository<P, S>::get_matching_snapshots(&self, filter: impl core::ops::function::FnMut(&rustic_core::repofile::snapshotfile::SnapshotFile) -> bool) -> rustic_core::error::RusticResult<alloc::vec::Vec<rustic_core::repofile::snapshotfile::SnapshotFile>>
pub fn rustic_core::repository::Repository<P, S>::get_snapshot_from_str(&self, id: &str, filter: impl core::ops::function::FnMut(&rustic_core::repofile::snapshotfile::SnapshotFile) -> bool + core::marker::Send + core::marker::Sync) -> rustic_core::error::RusticResult<rustic_core::repofile::snapshotfile::SnapshotFile>
pub fn rustic_core::repository::Repository<P, S>::get_snapshot_group(&self, ids: &[alloc::string::String], group_by: rustic_core::repofile::snapshotfile::SnapshotGroupCriterion, filter: impl core::ops::function::FnMut(&rustic_core::repofile::snapshotfile::SnapshotFile) -> bool) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::repofile::snapshotfile::SnapshotGroup, alloc::vec::Vec<rustic_core::repofile::snapshotfile::SnapshotFile>)>>
pub fn rustic_core::repository::Repository<P, S>::get_snapshots<T: core::convert::AsRef<str>>(&self, ids: &[T]) -> rustic_core::error::RusticResult<alloc::vec::Vec<rustic_core::repofile::snapshotfile::SnapshotFile>>
pub fn rustic_core::repository::Repository<P, S>::infos_index(&self) -> rustic_core::error::RusticResult<rustic_core::commands::repoinfo::IndexInfos>
pub fn rustic_core::repository::Repository<P, S>::prune_plan(&self, opts: &rustic_core::commands::prune::PruneOptions) -> rustic_core::error::RusticResult<rustic_core::commands::prune::PrunePlan>
pub fn rustic_core::repository::Repository<P, S>::relevant_copy_snapshots(&self, filter: impl core::ops::function::FnMut(&rustic_core::repofile::snapshotfile::SnapshotFile) -> bool, snaps: &[rustic_core::repofile::snapshotfile::SnapshotFile]) -> rustic_core::error::RusticResult<alloc::vec::Vec<rustic_core::commands::copy::CopySnapshot>>
pub fn rustic_core::repository::Repository<P, S>::repair_index(&self, opts: &rustic_core::commands::repair::index::RepairIndexOptions, dry_run: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repository::Repository<P, S>::save_snapshots(&self, snaps: alloc::vec::Vec<rustic_core::repofile::snapshotfile::SnapshotFile>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repository::Repository<P, S>::stream_files<F: rustic_core::repofile::RepoFile>(&self) -> rustic_core::error::RusticResult<impl core::iter::traits::iterator::Iterator<Item = rustic_core::error::RusticResult<(rustic_core::id::Id, F)>>>
pub fn rustic_core::repository::Repository<P, S>::to_indexed(self) -> rustic_core::error::RusticResult<rustic_core::repository::Repository<P, rustic_core::repository::IndexedStatus<rustic_core::repository::FullIndex, S>>>
pub fn rustic_core::repository::Repository<P, S>::to_indexed_ids(self) -> rustic_core::error::RusticResult<rustic_core::repository::Repository<P, rustic_core::repository::IndexedStatus<rustic_core::repository::IdIndex, S>>>
impl<P: rustic_core::progress::ProgressBars, S> rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::infos_files(&self) -> rustic_core::error::RusticResult<rustic_core::commands::repoinfo::RepoFileInfos>
pub fn rustic_core::repository::Repository<P, S>::warm_up(&self, packs: impl core::iter::traits::exact_size::ExactSizeIterator<Item = rustic_core::id::Id>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repository::Repository<P, S>::warm_up_wait(&self, packs: impl core::iter::traits::exact_size::ExactSizeIterator<Item = rustic_core::id::Id>) -> rustic_core::error::RusticResult<()>
impl<P> rustic_core::repository::Repository<P, ()>
pub fn rustic_core::repository::Repository<P, ()>::new_with_progress(opts: &rustic_core::repository::RepositoryOptions, pb: P) -> rustic_core::error::RusticResult<Self>
impl<P, S: rustic_core::repository::IndexedTree> rustic_core::repository::IndexedTree for rustic_core::repository::Repository<P, S>
pub type rustic_core::repository::Repository<P, S>::I = <S as rustic_core::repository::IndexedTree>::I
pub fn rustic_core::repository::Repository<P, S>::index(&self) -> &Self::I
impl<P, S: rustic_core::repository::Open> rustic_core::repository::Open for rustic_core::repository::Repository<P, S>
pub type rustic_core::repository::Repository<P, S>::DBE = <S as rustic_core::repository::Open>::DBE
pub fn rustic_core::repository::Repository<P, S>::cache(&self) -> core::option::Option<&rustic_core::backend::cache::Cache>
pub fn rustic_core::repository::Repository<P, S>::config(&self) -> &rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repository::Repository<P, S>::dbe(&self) -> &Self::DBE
pub fn rustic_core::repository::Repository<P, S>::key(&self) -> &rustic_core::crypto::aespoly1305::Key
impl<P: core::clone::Clone, S: core::clone::Clone> core::clone::Clone for rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::clone(&self) -> rustic_core::repository::Repository<P, S>
impl<P: core::fmt::Debug, S: core::fmt::Debug> core::fmt::Debug for rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<P, S> core::marker::Send for rustic_core::repository::Repository<P, S> where P: core::marker::Send, S: core::marker::Send
impl<P, S> core::marker::Sync for rustic_core::repository::Repository<P, S> where P: core::marker::Sync, S: core::marker::Sync
impl<P, S> core::marker::Unpin for rustic_core::repository::Repository<P, S> where P: core::marker::Unpin, S: core::marker::Unpin
impl<P, S> !core::panic::unwind_safe::RefUnwindSafe for rustic_core::repository::Repository<P, S>
impl<P, S> !core::panic::unwind_safe::UnwindSafe for rustic_core::repository::Repository<P, S>
impl<T, U> core::convert::Into<U> for rustic_core::repository::Repository<P, S> where U: core::convert::From<T>
pub fn rustic_core::repository::Repository<P, S>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repository::Repository<P, S> where U: core::convert::Into<T>
pub type rustic_core::repository::Repository<P, S>::Error = core::convert::Infallible
pub fn rustic_core::repository::Repository<P, S>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repository::Repository<P, S> where U: core::convert::TryFrom<T>
pub type rustic_core::repository::Repository<P, S>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repository::Repository<P, S>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repository::Repository<P, S> where T: core::clone::Clone
pub type rustic_core::repository::Repository<P, S>::Owned = T
pub fn rustic_core::repository::Repository<P, S>::clone_into(&self, target: &mut T)
pub fn rustic_core::repository::Repository<P, S>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repository::Repository<P, S> where T: 'static + core::marker::Sized
pub fn rustic_core::repository::Repository<P, S>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repository::Repository<P, S> where T: core::marker::Sized
pub fn rustic_core::repository::Repository<P, S>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repository::Repository<P, S> where T: core::marker::Sized
pub fn rustic_core::repository::Repository<P, S>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repository::Repository<P, S>
pub type rustic_core::repository::Repository<P, S>::Init = T
pub const rustic_core::repository::Repository<P, S>::ALIGN: usize
pub unsafe fn rustic_core::repository::Repository<P, S>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repository::Repository<P, S>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repository::Repository<P, S>::drop(ptr: usize)
pub unsafe fn rustic_core::repository::Repository<P, S>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repository::Repository<P, S>
impl<T> tracing::instrument::WithSubscriber for rustic_core::repository::Repository<P, S>
impl<T> typenum::type_operators::Same<T> for rustic_core::repository::Repository<P, S>
pub type rustic_core::repository::Repository<P, S>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repository::Repository<P, S> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repository::Repository<P, S>::vzip(self) -> V
pub struct rustic_core::repository::RepositoryOptions
pub rustic_core::repository::RepositoryOptions::cache_dir: core::option::Option<std::path::PathBuf>
pub rustic_core::repository::RepositoryOptions::no_cache: bool
pub rustic_core::repository::RepositoryOptions::options: std::collections::hash::map::HashMap<alloc::string::String, alloc::string::String>
pub rustic_core::repository::RepositoryOptions::password: core::option::Option<alloc::string::String>
pub rustic_core::repository::RepositoryOptions::password_command: core::option::Option<alloc::string::String>
pub rustic_core::repository::RepositoryOptions::password_file: core::option::Option<std::path::PathBuf>
pub rustic_core::repository::RepositoryOptions::repo_hot: core::option::Option<alloc::string::String>
pub rustic_core::repository::RepositoryOptions::repository: core::option::Option<alloc::string::String>
pub rustic_core::repository::RepositoryOptions::warm_up: bool
pub rustic_core::repository::RepositoryOptions::warm_up_command: core::option::Option<alloc::string::String>
pub rustic_core::repository::RepositoryOptions::warm_up_wait: core::option::Option<humantime::wrapper::Duration>
impl rustic_core::repository::RepositoryOptions
pub fn rustic_core::repository::RepositoryOptions::cache_dir(self, value: impl core::convert::Into<std::path::PathBuf>) -> Self
pub fn rustic_core::repository::RepositoryOptions::no_cache(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::repository::RepositoryOptions::options(self, value: impl core::convert::Into<std::collections::hash::map::HashMap<alloc::string::String, alloc::string::String>>) -> Self
pub fn rustic_core::repository::RepositoryOptions::password(self, value: impl core::convert::Into<alloc::string::String>) -> Self
pub fn rustic_core::repository::RepositoryOptions::password_command(self, value: impl core::convert::Into<alloc::string::String>) -> Self
pub fn rustic_core::repository::RepositoryOptions::password_file(self, value: impl core::convert::Into<std::path::PathBuf>) -> Self
pub fn rustic_core::repository::RepositoryOptions::repo_hot(self, value: impl core::convert::Into<alloc::string::String>) -> Self
pub fn rustic_core::repository::RepositoryOptions::repository(self, value: impl core::convert::Into<alloc::string::String>) -> Self
pub fn rustic_core::repository::RepositoryOptions::warm_up(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::repository::RepositoryOptions::warm_up_command(self, value: impl core::convert::Into<alloc::string::String>) -> Self
pub fn rustic_core::repository::RepositoryOptions::warm_up_wait(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
impl rustic_core::repository::RepositoryOptions
pub fn rustic_core::repository::RepositoryOptions::to_repository(&self) -> rustic_core::error::RusticResult<rustic_core::repository::Repository<rustic_core::progress::NoProgressBars, ()>>
impl core::clone::Clone for rustic_core::repository::RepositoryOptions
pub fn rustic_core::repository::RepositoryOptions::clone(&self) -> rustic_core::repository::RepositoryOptions
impl core::default::Default for rustic_core::repository::RepositoryOptions
pub fn rustic_core::repository::RepositoryOptions::default() -> rustic_core::repository::RepositoryOptions
impl core::fmt::Debug for rustic_core::repository::RepositoryOptions
pub fn rustic_core::repository::RepositoryOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repository::RepositoryOptions
pub fn rustic_core::repository::RepositoryOptions::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repository::RepositoryOptions where rustic_core::repository::RepositoryOptions: core::default::Default
pub fn rustic_core::repository::RepositoryOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repository::RepositoryOptions
impl core::marker::Sync for rustic_core::repository::RepositoryOptions
impl core::marker::Unpin for rustic_core::repository::RepositoryOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repository::RepositoryOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repository::RepositoryOptions
impl<T, U> core::convert::Into<U> for rustic_core::repository::RepositoryOptions where U: core::convert::From<T>
pub fn rustic_core::repository::RepositoryOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repository::RepositoryOptions where U: core::convert::Into<T>
pub type rustic_core::repository::RepositoryOptions::Error = core::convert::Infallible
pub fn rustic_core::repository::RepositoryOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repository::RepositoryOptions where U: core::convert::TryFrom<T>
pub type rustic_core::repository::RepositoryOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repository::RepositoryOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repository::RepositoryOptions where T: core::clone::Clone
pub type rustic_core::repository::RepositoryOptions::Owned = T
pub fn rustic_core::repository::RepositoryOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::repository::RepositoryOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repository::RepositoryOptions where T: 'static + core::marker::Sized
pub fn rustic_core::repository::RepositoryOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repository::RepositoryOptions where T: core::marker::Sized
pub fn rustic_core::repository::RepositoryOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repository::RepositoryOptions where T: core::marker::Sized
pub fn rustic_core::repository::RepositoryOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repository::RepositoryOptions
pub fn rustic_core::repository::RepositoryOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repository::RepositoryOptions
pub type rustic_core::repository::RepositoryOptions::Init = T
pub const rustic_core::repository::RepositoryOptions::ALIGN: usize
pub unsafe fn rustic_core::repository::RepositoryOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repository::RepositoryOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repository::RepositoryOptions::drop(ptr: usize)
pub unsafe fn rustic_core::repository::RepositoryOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repository::RepositoryOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repository::RepositoryOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::repository::RepositoryOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::repository::RepositoryOptions
pub type rustic_core::repository::RepositoryOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repository::RepositoryOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repository::RepositoryOptions::vzip(self) -> V
pub trait rustic_core::repository::IndexedFull: rustic_core::repository::IndexedIds
impl<S: rustic_core::repository::Open> rustic_core::repository::IndexedFull for rustic_core::repository::IndexedStatus<rustic_core::repository::FullIndex, S>
pub trait rustic_core::repository::IndexedIds: rustic_core::repository::IndexedTree
impl<S: rustic_core::repository::Open> rustic_core::repository::IndexedIds for rustic_core::repository::IndexedStatus<rustic_core::repository::FullIndex, S>
impl<S: rustic_core::repository::Open> rustic_core::repository::IndexedIds for rustic_core::repository::IndexedStatus<rustic_core::repository::IdIndex, S>
pub trait rustic_core::repository::IndexedTree: rustic_core::repository::Open
pub type rustic_core::repository::IndexedTree::I: rustic_core::index::IndexedBackend
pub fn rustic_core::repository::IndexedTree::index(&self) -> &Self::I
impl<P, S: rustic_core::repository::IndexedTree> rustic_core::repository::IndexedTree for rustic_core::repository::Repository<P, S>
pub type rustic_core::repository::Repository<P, S>::I = <S as rustic_core::repository::IndexedTree>::I
pub fn rustic_core::repository::Repository<P, S>::index(&self) -> &Self::I
impl<T, S: rustic_core::repository::Open> rustic_core::repository::IndexedTree for rustic_core::repository::IndexedStatus<T, S>
pub type rustic_core::repository::IndexedStatus<T, S>::I = rustic_core::index::IndexBackend<<S as rustic_core::repository::Open>::DBE>
pub fn rustic_core::repository::IndexedStatus<T, S>::index(&self) -> &Self::I
pub trait rustic_core::repository::Open
pub type rustic_core::repository::Open::DBE: rustic_core::backend::decrypt::DecryptFullBackend
pub fn rustic_core::repository::Open::cache(&self) -> core::option::Option<&rustic_core::backend::cache::Cache>
pub fn rustic_core::repository::Open::config(&self) -> &rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repository::Open::dbe(&self) -> &Self::DBE
pub fn rustic_core::repository::Open::key(&self) -> &rustic_core::crypto::aespoly1305::Key
impl rustic_core::repository::Open for rustic_core::repository::OpenStatus
pub type rustic_core::repository::OpenStatus::DBE = rustic_core::backend::decrypt::DecryptBackend<rustic_core::backend::cache::CachedBackend<rustic_core::backend::hotcold::HotColdBackend<rustic_core::backend::choose::ChooseBackend>>, rustic_core::crypto::aespoly1305::Key>
pub fn rustic_core::repository::OpenStatus::cache(&self) -> core::option::Option<&rustic_core::backend::cache::Cache>
pub fn rustic_core::repository::OpenStatus::config(&self) -> &rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repository::OpenStatus::dbe(&self) -> &Self::DBE
pub fn rustic_core::repository::OpenStatus::key(&self) -> &rustic_core::crypto::aespoly1305::Key
impl<P, S: rustic_core::repository::Open> rustic_core::repository::Open for rustic_core::repository::Repository<P, S>
pub type rustic_core::repository::Repository<P, S>::DBE = <S as rustic_core::repository::Open>::DBE
pub fn rustic_core::repository::Repository<P, S>::cache(&self) -> core::option::Option<&rustic_core::backend::cache::Cache>
pub fn rustic_core::repository::Repository<P, S>::config(&self) -> &rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repository::Repository<P, S>::dbe(&self) -> &Self::DBE
pub fn rustic_core::repository::Repository<P, S>::key(&self) -> &rustic_core::crypto::aespoly1305::Key
impl<T, S: rustic_core::repository::Open> rustic_core::repository::Open for rustic_core::repository::IndexedStatus<T, S>
pub type rustic_core::repository::IndexedStatus<T, S>::DBE = <S as rustic_core::repository::Open>::DBE
pub fn rustic_core::repository::IndexedStatus<T, S>::cache(&self) -> core::option::Option<&rustic_core::backend::cache::Cache>
pub fn rustic_core::repository::IndexedStatus<T, S>::config(&self) -> &rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repository::IndexedStatus<T, S>::dbe(&self) -> &Self::DBE
pub fn rustic_core::repository::IndexedStatus<T, S>::key(&self) -> &rustic_core::crypto::aespoly1305::Key
pub fn rustic_core::repository::read_password_from_reader(file: &mut impl std::io::BufRead) -> rustic_core::error::RusticResult<alloc::string::String>
#[non_exhaustive] pub struct rustic_core::BackupOptions
pub rustic_core::BackupOptions::as_path: core::option::Option<std::path::PathBuf>
pub rustic_core::BackupOptions::dry_run: bool
pub rustic_core::BackupOptions::ignore_filter_opts: rustic_core::backend::ignore::LocalSourceFilterOptions
pub rustic_core::BackupOptions::ignore_save_opts: rustic_core::backend::ignore::LocalSourceSaveOptions
pub rustic_core::BackupOptions::parent_opts: rustic_core::commands::backup::ParentOptions
pub rustic_core::BackupOptions::stdin_filename: alloc::string::String
impl rustic_core::commands::backup::BackupOptions
pub fn rustic_core::commands::backup::BackupOptions::as_path(self, value: impl core::convert::Into<core::option::Option<std::path::PathBuf>>) -> Self
pub fn rustic_core::commands::backup::BackupOptions::dry_run(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::backup::BackupOptions::ignore_filter_opts(self, value: impl core::convert::Into<rustic_core::backend::ignore::LocalSourceFilterOptions>) -> Self
pub fn rustic_core::commands::backup::BackupOptions::ignore_save_opts(self, value: impl core::convert::Into<rustic_core::backend::ignore::LocalSourceSaveOptions>) -> Self
pub fn rustic_core::commands::backup::BackupOptions::parent_opts(self, value: impl core::convert::Into<rustic_core::commands::backup::ParentOptions>) -> Self
pub fn rustic_core::commands::backup::BackupOptions::stdin_filename(self, value: impl core::convert::Into<alloc::string::String>) -> Self
impl core::clone::Clone for rustic_core::commands::backup::BackupOptions
pub fn rustic_core::commands::backup::BackupOptions::clone(&self) -> rustic_core::commands::backup::BackupOptions
impl core::default::Default for rustic_core::commands::backup::BackupOptions
pub fn rustic_core::commands::backup::BackupOptions::default() -> rustic_core::commands::backup::BackupOptions
impl core::fmt::Debug for rustic_core::commands::backup::BackupOptions
pub fn rustic_core::commands::backup::BackupOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::commands::backup::BackupOptions
pub fn rustic_core::commands::backup::BackupOptions::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::commands::backup::BackupOptions where rustic_core::commands::backup::BackupOptions: core::default::Default
pub fn rustic_core::commands::backup::BackupOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::commands::backup::BackupOptions
impl core::marker::Sync for rustic_core::commands::backup::BackupOptions
impl core::marker::Unpin for rustic_core::commands::backup::BackupOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::backup::BackupOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::backup::BackupOptions
impl<T, U> core::convert::Into<U> for rustic_core::commands::backup::BackupOptions where U: core::convert::From<T>
pub fn rustic_core::commands::backup::BackupOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::backup::BackupOptions where U: core::convert::Into<T>
pub type rustic_core::commands::backup::BackupOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::backup::BackupOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::backup::BackupOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::backup::BackupOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::backup::BackupOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::backup::BackupOptions where T: core::clone::Clone
pub type rustic_core::commands::backup::BackupOptions::Owned = T
pub fn rustic_core::commands::backup::BackupOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::backup::BackupOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::backup::BackupOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::backup::BackupOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::backup::BackupOptions where T: core::marker::Sized
pub fn rustic_core::commands::backup::BackupOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::backup::BackupOptions where T: core::marker::Sized
pub fn rustic_core::commands::backup::BackupOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::backup::BackupOptions
pub fn rustic_core::commands::backup::BackupOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::backup::BackupOptions
pub type rustic_core::commands::backup::BackupOptions::Init = T
pub const rustic_core::commands::backup::BackupOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::backup::BackupOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::backup::BackupOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::backup::BackupOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::backup::BackupOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::commands::backup::BackupOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::commands::backup::BackupOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::backup::BackupOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::backup::BackupOptions
pub type rustic_core::commands::backup::BackupOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::backup::BackupOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::backup::BackupOptions::vzip(self) -> V
pub struct rustic_core::BlobInfo
pub rustic_core::BlobInfo::blob_type: rustic_core::blob::BlobType
pub rustic_core::BlobInfo::count: u64
pub rustic_core::BlobInfo::data_size: u64
pub rustic_core::BlobInfo::size: u64
impl rustic_core::commands::repoinfo::BlobInfo
pub fn rustic_core::commands::repoinfo::BlobInfo::add(&mut self, ie: rustic_core::index::IndexEntry)
impl core::clone::Clone for rustic_core::commands::repoinfo::BlobInfo
pub fn rustic_core::commands::repoinfo::BlobInfo::clone(&self) -> rustic_core::commands::repoinfo::BlobInfo
impl core::fmt::Debug for rustic_core::commands::repoinfo::BlobInfo
pub fn rustic_core::commands::repoinfo::BlobInfo::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::repoinfo::BlobInfo
impl serde::ser::Serialize for rustic_core::commands::repoinfo::BlobInfo
pub fn rustic_core::commands::repoinfo::BlobInfo::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::commands::repoinfo::BlobInfo
pub fn rustic_core::commands::repoinfo::BlobInfo::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::commands::repoinfo::BlobInfo
impl core::marker::Sync for rustic_core::commands::repoinfo::BlobInfo
impl core::marker::Unpin for rustic_core::commands::repoinfo::BlobInfo
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::repoinfo::BlobInfo
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::repoinfo::BlobInfo
impl<T, U> core::convert::Into<U> for rustic_core::commands::repoinfo::BlobInfo where U: core::convert::From<T>
pub fn rustic_core::commands::repoinfo::BlobInfo::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::repoinfo::BlobInfo where U: core::convert::Into<T>
pub type rustic_core::commands::repoinfo::BlobInfo::Error = core::convert::Infallible
pub fn rustic_core::commands::repoinfo::BlobInfo::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::repoinfo::BlobInfo where U: core::convert::TryFrom<T>
pub type rustic_core::commands::repoinfo::BlobInfo::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::repoinfo::BlobInfo::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::repoinfo::BlobInfo where T: core::clone::Clone
pub type rustic_core::commands::repoinfo::BlobInfo::Owned = T
pub fn rustic_core::commands::repoinfo::BlobInfo::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::repoinfo::BlobInfo::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::repoinfo::BlobInfo where T: 'static + core::marker::Sized
pub fn rustic_core::commands::repoinfo::BlobInfo::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::repoinfo::BlobInfo where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::BlobInfo::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::repoinfo::BlobInfo where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::BlobInfo::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::repoinfo::BlobInfo
pub fn rustic_core::commands::repoinfo::BlobInfo::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::repoinfo::BlobInfo
pub type rustic_core::commands::repoinfo::BlobInfo::Init = T
pub const rustic_core::commands::repoinfo::BlobInfo::ALIGN: usize
pub unsafe fn rustic_core::commands::repoinfo::BlobInfo::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::repoinfo::BlobInfo::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::repoinfo::BlobInfo::drop(ptr: usize)
pub unsafe fn rustic_core::commands::repoinfo::BlobInfo::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::commands::repoinfo::BlobInfo where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::commands::repoinfo::BlobInfo
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::repoinfo::BlobInfo
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::repoinfo::BlobInfo
pub type rustic_core::commands::repoinfo::BlobInfo::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::repoinfo::BlobInfo where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::repoinfo::BlobInfo::vzip(self) -> V
pub struct rustic_core::CheckOptions
pub rustic_core::CheckOptions::read_data: bool
pub rustic_core::CheckOptions::trust_cache: bool
impl rustic_core::commands::check::CheckOptions
pub fn rustic_core::commands::check::CheckOptions::read_data(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::check::CheckOptions::trust_cache(self, value: impl core::convert::Into<bool>) -> Self
impl rustic_core::commands::check::CheckOptions
pub fn rustic_core::commands::check::CheckOptions::run<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::Open>(self, repo: &rustic_core::repository::Repository<P, S>) -> rustic_core::error::RusticResult<()>
impl core::clone::Clone for rustic_core::commands::check::CheckOptions
pub fn rustic_core::commands::check::CheckOptions::clone(&self) -> rustic_core::commands::check::CheckOptions
impl core::default::Default for rustic_core::commands::check::CheckOptions
pub fn rustic_core::commands::check::CheckOptions::default() -> rustic_core::commands::check::CheckOptions
impl core::fmt::Debug for rustic_core::commands::check::CheckOptions
pub fn rustic_core::commands::check::CheckOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::check::CheckOptions
impl core::marker::Send for rustic_core::commands::check::CheckOptions
impl core::marker::Sync for rustic_core::commands::check::CheckOptions
impl core::marker::Unpin for rustic_core::commands::check::CheckOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::check::CheckOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::check::CheckOptions
impl<T, U> core::convert::Into<U> for rustic_core::commands::check::CheckOptions where U: core::convert::From<T>
pub fn rustic_core::commands::check::CheckOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::check::CheckOptions where U: core::convert::Into<T>
pub type rustic_core::commands::check::CheckOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::check::CheckOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::check::CheckOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::check::CheckOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::check::CheckOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::check::CheckOptions where T: core::clone::Clone
pub type rustic_core::commands::check::CheckOptions::Owned = T
pub fn rustic_core::commands::check::CheckOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::check::CheckOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::check::CheckOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::check::CheckOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::check::CheckOptions where T: core::marker::Sized
pub fn rustic_core::commands::check::CheckOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::check::CheckOptions where T: core::marker::Sized
pub fn rustic_core::commands::check::CheckOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::check::CheckOptions
pub fn rustic_core::commands::check::CheckOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::check::CheckOptions
pub type rustic_core::commands::check::CheckOptions::Init = T
pub const rustic_core::commands::check::CheckOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::check::CheckOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::check::CheckOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::check::CheckOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::check::CheckOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::check::CheckOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::check::CheckOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::check::CheckOptions
pub type rustic_core::commands::check::CheckOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::check::CheckOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::check::CheckOptions::vzip(self) -> V
pub struct rustic_core::ConfigOptions
pub rustic_core::ConfigOptions::set_compression: core::option::Option<i32>
pub rustic_core::ConfigOptions::set_datapack_growfactor: core::option::Option<u32>
pub rustic_core::ConfigOptions::set_datapack_size: core::option::Option<bytesize::ByteSize>
pub rustic_core::ConfigOptions::set_datapack_size_limit: core::option::Option<bytesize::ByteSize>
pub rustic_core::ConfigOptions::set_max_packsize_tolerate_percent: core::option::Option<u32>
pub rustic_core::ConfigOptions::set_min_packsize_tolerate_percent: core::option::Option<u32>
pub rustic_core::ConfigOptions::set_treepack_growfactor: core::option::Option<u32>
pub rustic_core::ConfigOptions::set_treepack_size: core::option::Option<bytesize::ByteSize>
pub rustic_core::ConfigOptions::set_treepack_size_limit: core::option::Option<bytesize::ByteSize>
pub rustic_core::ConfigOptions::set_version: core::option::Option<u32>
impl rustic_core::commands::config::ConfigOptions
pub fn rustic_core::commands::config::ConfigOptions::apply(&self, config: &mut rustic_core::repofile::configfile::ConfigFile) -> rustic_core::error::RusticResult<()>
impl rustic_core::commands::config::ConfigOptions
pub fn rustic_core::commands::config::ConfigOptions::set_compression(self, value: impl core::convert::Into<core::option::Option<i32>>) -> Self
pub fn rustic_core::commands::config::ConfigOptions::set_datapack_growfactor(self, value: impl core::convert::Into<core::option::Option<u32>>) -> Self
pub fn rustic_core::commands::config::ConfigOptions::set_datapack_size(self, value: impl core::convert::Into<core::option::Option<bytesize::ByteSize>>) -> Self
pub fn rustic_core::commands::config::ConfigOptions::set_datapack_size_limit(self, value: impl core::convert::Into<core::option::Option<bytesize::ByteSize>>) -> Self
pub fn rustic_core::commands::config::ConfigOptions::set_max_packsize_tolerate_percent(self, value: impl core::convert::Into<core::option::Option<u32>>) -> Self
pub fn rustic_core::commands::config::ConfigOptions::set_min_packsize_tolerate_percent(self, value: impl core::convert::Into<core::option::Option<u32>>) -> Self
pub fn rustic_core::commands::config::ConfigOptions::set_treepack_growfactor(self, value: impl core::convert::Into<core::option::Option<u32>>) -> Self
pub fn rustic_core::commands::config::ConfigOptions::set_treepack_size(self, value: impl core::convert::Into<core::option::Option<bytesize::ByteSize>>) -> Self
pub fn rustic_core::commands::config::ConfigOptions::set_treepack_size_limit(self, value: impl core::convert::Into<core::option::Option<bytesize::ByteSize>>) -> Self
pub fn rustic_core::commands::config::ConfigOptions::set_version(self, value: impl core::convert::Into<core::option::Option<u32>>) -> Self
impl core::clone::Clone for rustic_core::commands::config::ConfigOptions
pub fn rustic_core::commands::config::ConfigOptions::clone(&self) -> rustic_core::commands::config::ConfigOptions
impl core::default::Default for rustic_core::commands::config::ConfigOptions
pub fn rustic_core::commands::config::ConfigOptions::default() -> rustic_core::commands::config::ConfigOptions
impl core::fmt::Debug for rustic_core::commands::config::ConfigOptions
pub fn rustic_core::commands::config::ConfigOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::config::ConfigOptions
impl core::marker::Send for rustic_core::commands::config::ConfigOptions
impl core::marker::Sync for rustic_core::commands::config::ConfigOptions
impl core::marker::Unpin for rustic_core::commands::config::ConfigOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::config::ConfigOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::config::ConfigOptions
impl<T, U> core::convert::Into<U> for rustic_core::commands::config::ConfigOptions where U: core::convert::From<T>
pub fn rustic_core::commands::config::ConfigOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::config::ConfigOptions where U: core::convert::Into<T>
pub type rustic_core::commands::config::ConfigOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::config::ConfigOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::config::ConfigOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::config::ConfigOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::config::ConfigOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::config::ConfigOptions where T: core::clone::Clone
pub type rustic_core::commands::config::ConfigOptions::Owned = T
pub fn rustic_core::commands::config::ConfigOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::config::ConfigOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::config::ConfigOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::config::ConfigOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::config::ConfigOptions where T: core::marker::Sized
pub fn rustic_core::commands::config::ConfigOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::config::ConfigOptions where T: core::marker::Sized
pub fn rustic_core::commands::config::ConfigOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::config::ConfigOptions
pub fn rustic_core::commands::config::ConfigOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::config::ConfigOptions
pub type rustic_core::commands::config::ConfigOptions::Init = T
pub const rustic_core::commands::config::ConfigOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::config::ConfigOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::config::ConfigOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::config::ConfigOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::config::ConfigOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::config::ConfigOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::config::ConfigOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::config::ConfigOptions
pub type rustic_core::commands::config::ConfigOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::config::ConfigOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::config::ConfigOptions::vzip(self) -> V
pub struct rustic_core::CopySnapshot
pub rustic_core::CopySnapshot::relevant: bool
pub rustic_core::CopySnapshot::sn: rustic_core::repofile::snapshotfile::SnapshotFile
impl core::fmt::Debug for rustic_core::commands::copy::CopySnapshot
pub fn rustic_core::commands::copy::CopySnapshot::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::commands::copy::CopySnapshot
impl core::marker::Sync for rustic_core::commands::copy::CopySnapshot
impl core::marker::Unpin for rustic_core::commands::copy::CopySnapshot
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::copy::CopySnapshot
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::copy::CopySnapshot
impl<T, U> core::convert::Into<U> for rustic_core::commands::copy::CopySnapshot where U: core::convert::From<T>
pub fn rustic_core::commands::copy::CopySnapshot::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::copy::CopySnapshot where U: core::convert::Into<T>
pub type rustic_core::commands::copy::CopySnapshot::Error = core::convert::Infallible
pub fn rustic_core::commands::copy::CopySnapshot::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::copy::CopySnapshot where U: core::convert::TryFrom<T>
pub type rustic_core::commands::copy::CopySnapshot::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::copy::CopySnapshot::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::copy::CopySnapshot where T: 'static + core::marker::Sized
pub fn rustic_core::commands::copy::CopySnapshot::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::copy::CopySnapshot where T: core::marker::Sized
pub fn rustic_core::commands::copy::CopySnapshot::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::copy::CopySnapshot where T: core::marker::Sized
pub fn rustic_core::commands::copy::CopySnapshot::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::copy::CopySnapshot
pub fn rustic_core::commands::copy::CopySnapshot::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::copy::CopySnapshot
pub type rustic_core::commands::copy::CopySnapshot::Init = T
pub const rustic_core::commands::copy::CopySnapshot::ALIGN: usize
pub unsafe fn rustic_core::commands::copy::CopySnapshot::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::copy::CopySnapshot::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::copy::CopySnapshot::drop(ptr: usize)
pub unsafe fn rustic_core::commands::copy::CopySnapshot::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::copy::CopySnapshot
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::copy::CopySnapshot
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::copy::CopySnapshot
pub type rustic_core::commands::copy::CopySnapshot::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::copy::CopySnapshot where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::copy::CopySnapshot::vzip(self) -> V
pub struct rustic_core::FileDirStats
pub rustic_core::FileDirStats::additional: u64
pub rustic_core::FileDirStats::modify: u64
pub rustic_core::FileDirStats::restore: u64
pub rustic_core::FileDirStats::unchanged: u64
pub rustic_core::FileDirStats::verified: u64
impl core::clone::Clone for rustic_core::commands::restore::FileDirStats
pub fn rustic_core::commands::restore::FileDirStats::clone(&self) -> rustic_core::commands::restore::FileDirStats
impl core::default::Default for rustic_core::commands::restore::FileDirStats
pub fn rustic_core::commands::restore::FileDirStats::default() -> rustic_core::commands::restore::FileDirStats
impl core::fmt::Debug for rustic_core::commands::restore::FileDirStats
pub fn rustic_core::commands::restore::FileDirStats::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::restore::FileDirStats
impl core::marker::Send for rustic_core::commands::restore::FileDirStats
impl core::marker::Sync for rustic_core::commands::restore::FileDirStats
impl core::marker::Unpin for rustic_core::commands::restore::FileDirStats
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::restore::FileDirStats
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::restore::FileDirStats
impl<T, U> core::convert::Into<U> for rustic_core::commands::restore::FileDirStats where U: core::convert::From<T>
pub fn rustic_core::commands::restore::FileDirStats::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::restore::FileDirStats where U: core::convert::Into<T>
pub type rustic_core::commands::restore::FileDirStats::Error = core::convert::Infallible
pub fn rustic_core::commands::restore::FileDirStats::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::restore::FileDirStats where U: core::convert::TryFrom<T>
pub type rustic_core::commands::restore::FileDirStats::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::restore::FileDirStats::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::restore::FileDirStats where T: core::clone::Clone
pub type rustic_core::commands::restore::FileDirStats::Owned = T
pub fn rustic_core::commands::restore::FileDirStats::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::restore::FileDirStats::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::restore::FileDirStats where T: 'static + core::marker::Sized
pub fn rustic_core::commands::restore::FileDirStats::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::restore::FileDirStats where T: core::marker::Sized
pub fn rustic_core::commands::restore::FileDirStats::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::restore::FileDirStats where T: core::marker::Sized
pub fn rustic_core::commands::restore::FileDirStats::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::restore::FileDirStats
pub fn rustic_core::commands::restore::FileDirStats::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::restore::FileDirStats
pub type rustic_core::commands::restore::FileDirStats::Init = T
pub const rustic_core::commands::restore::FileDirStats::ALIGN: usize
pub unsafe fn rustic_core::commands::restore::FileDirStats::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::restore::FileDirStats::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::restore::FileDirStats::drop(ptr: usize)
pub unsafe fn rustic_core::commands::restore::FileDirStats::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::restore::FileDirStats
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::restore::FileDirStats
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::restore::FileDirStats
pub type rustic_core::commands::restore::FileDirStats::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::restore::FileDirStats where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::restore::FileDirStats::vzip(self) -> V
pub struct rustic_core::ForgetGroup
pub rustic_core::ForgetGroup::group: rustic_core::repofile::snapshotfile::SnapshotGroup
pub rustic_core::ForgetGroup::snapshots: alloc::vec::Vec<rustic_core::commands::forget::ForgetSnapshot>
impl core::fmt::Debug for rustic_core::commands::forget::ForgetGroup
pub fn rustic_core::commands::forget::ForgetGroup::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::commands::forget::ForgetGroup
pub fn rustic_core::commands::forget::ForgetGroup::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl core::marker::Send for rustic_core::commands::forget::ForgetGroup
impl core::marker::Sync for rustic_core::commands::forget::ForgetGroup
impl core::marker::Unpin for rustic_core::commands::forget::ForgetGroup
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::forget::ForgetGroup
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::forget::ForgetGroup
impl<T, U> core::convert::Into<U> for rustic_core::commands::forget::ForgetGroup where U: core::convert::From<T>
pub fn rustic_core::commands::forget::ForgetGroup::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::forget::ForgetGroup where U: core::convert::Into<T>
pub type rustic_core::commands::forget::ForgetGroup::Error = core::convert::Infallible
pub fn rustic_core::commands::forget::ForgetGroup::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::forget::ForgetGroup where U: core::convert::TryFrom<T>
pub type rustic_core::commands::forget::ForgetGroup::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::forget::ForgetGroup::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::forget::ForgetGroup where T: 'static + core::marker::Sized
pub fn rustic_core::commands::forget::ForgetGroup::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::forget::ForgetGroup where T: core::marker::Sized
pub fn rustic_core::commands::forget::ForgetGroup::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::forget::ForgetGroup where T: core::marker::Sized
pub fn rustic_core::commands::forget::ForgetGroup::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::forget::ForgetGroup
pub fn rustic_core::commands::forget::ForgetGroup::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::forget::ForgetGroup
pub type rustic_core::commands::forget::ForgetGroup::Init = T
pub const rustic_core::commands::forget::ForgetGroup::ALIGN: usize
pub unsafe fn rustic_core::commands::forget::ForgetGroup::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::forget::ForgetGroup::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::forget::ForgetGroup::drop(ptr: usize)
pub unsafe fn rustic_core::commands::forget::ForgetGroup::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::forget::ForgetGroup
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::forget::ForgetGroup
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::forget::ForgetGroup
pub type rustic_core::commands::forget::ForgetGroup::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::forget::ForgetGroup where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::forget::ForgetGroup::vzip(self) -> V
pub struct rustic_core::ForgetGroups(pub alloc::vec::Vec<rustic_core::commands::forget::ForgetGroup>)
impl rustic_core::commands::forget::ForgetGroups
pub fn rustic_core::commands::forget::ForgetGroups::into_forget_ids(self) -> alloc::vec::Vec<rustic_core::id::Id>
impl core::fmt::Debug for rustic_core::commands::forget::ForgetGroups
pub fn rustic_core::commands::forget::ForgetGroups::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::commands::forget::ForgetGroups
pub fn rustic_core::commands::forget::ForgetGroups::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl core::marker::Send for rustic_core::commands::forget::ForgetGroups
impl core::marker::Sync for rustic_core::commands::forget::ForgetGroups
impl core::marker::Unpin for rustic_core::commands::forget::ForgetGroups
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::forget::ForgetGroups
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::forget::ForgetGroups
impl<T, U> core::convert::Into<U> for rustic_core::commands::forget::ForgetGroups where U: core::convert::From<T>
pub fn rustic_core::commands::forget::ForgetGroups::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::forget::ForgetGroups where U: core::convert::Into<T>
pub type rustic_core::commands::forget::ForgetGroups::Error = core::convert::Infallible
pub fn rustic_core::commands::forget::ForgetGroups::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::forget::ForgetGroups where U: core::convert::TryFrom<T>
pub type rustic_core::commands::forget::ForgetGroups::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::forget::ForgetGroups::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::forget::ForgetGroups where T: 'static + core::marker::Sized
pub fn rustic_core::commands::forget::ForgetGroups::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::forget::ForgetGroups where T: core::marker::Sized
pub fn rustic_core::commands::forget::ForgetGroups::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::forget::ForgetGroups where T: core::marker::Sized
pub fn rustic_core::commands::forget::ForgetGroups::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::forget::ForgetGroups
pub fn rustic_core::commands::forget::ForgetGroups::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::forget::ForgetGroups
pub type rustic_core::commands::forget::ForgetGroups::Init = T
pub const rustic_core::commands::forget::ForgetGroups::ALIGN: usize
pub unsafe fn rustic_core::commands::forget::ForgetGroups::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::forget::ForgetGroups::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::forget::ForgetGroups::drop(ptr: usize)
pub unsafe fn rustic_core::commands::forget::ForgetGroups::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::forget::ForgetGroups
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::forget::ForgetGroups
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::forget::ForgetGroups
pub type rustic_core::commands::forget::ForgetGroups::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::forget::ForgetGroups where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::forget::ForgetGroups::vzip(self) -> V
pub struct rustic_core::ForgetSnapshot
pub rustic_core::ForgetSnapshot::keep: bool
pub rustic_core::ForgetSnapshot::reasons: alloc::vec::Vec<alloc::string::String>
pub rustic_core::ForgetSnapshot::snapshot: rustic_core::repofile::snapshotfile::SnapshotFile
impl core::fmt::Debug for rustic_core::commands::forget::ForgetSnapshot
pub fn rustic_core::commands::forget::ForgetSnapshot::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::commands::forget::ForgetSnapshot
pub fn rustic_core::commands::forget::ForgetSnapshot::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl core::marker::Send for rustic_core::commands::forget::ForgetSnapshot
impl core::marker::Sync for rustic_core::commands::forget::ForgetSnapshot
impl core::marker::Unpin for rustic_core::commands::forget::ForgetSnapshot
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::forget::ForgetSnapshot
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::forget::ForgetSnapshot
impl<T, U> core::convert::Into<U> for rustic_core::commands::forget::ForgetSnapshot where U: core::convert::From<T>
pub fn rustic_core::commands::forget::ForgetSnapshot::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::forget::ForgetSnapshot where U: core::convert::Into<T>
pub type rustic_core::commands::forget::ForgetSnapshot::Error = core::convert::Infallible
pub fn rustic_core::commands::forget::ForgetSnapshot::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::forget::ForgetSnapshot where U: core::convert::TryFrom<T>
pub type rustic_core::commands::forget::ForgetSnapshot::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::forget::ForgetSnapshot::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::forget::ForgetSnapshot where T: 'static + core::marker::Sized
pub fn rustic_core::commands::forget::ForgetSnapshot::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::forget::ForgetSnapshot where T: core::marker::Sized
pub fn rustic_core::commands::forget::ForgetSnapshot::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::forget::ForgetSnapshot where T: core::marker::Sized
pub fn rustic_core::commands::forget::ForgetSnapshot::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::forget::ForgetSnapshot
pub fn rustic_core::commands::forget::ForgetSnapshot::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::forget::ForgetSnapshot
pub type rustic_core::commands::forget::ForgetSnapshot::Init = T
pub const rustic_core::commands::forget::ForgetSnapshot::ALIGN: usize
pub unsafe fn rustic_core::commands::forget::ForgetSnapshot::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::forget::ForgetSnapshot::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::forget::ForgetSnapshot::drop(ptr: usize)
pub unsafe fn rustic_core::commands::forget::ForgetSnapshot::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::forget::ForgetSnapshot
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::forget::ForgetSnapshot
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::forget::ForgetSnapshot
pub type rustic_core::commands::forget::ForgetSnapshot::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::forget::ForgetSnapshot where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::forget::ForgetSnapshot::vzip(self) -> V
pub struct rustic_core::HexId(pub [u8; 64])
impl rustic_core::id::HexId
pub const rustic_core::id::HexId::EMPTY: Self
pub fn rustic_core::id::HexId::as_str(&self) -> &str
impl core::convert::AsRef<std::path::Path> for rustic_core::id::HexId
pub fn rustic_core::id::HexId::as_ref(&self) -> &std::path::Path
impl core::ops::deref::Deref for rustic_core::id::HexId
pub type rustic_core::id::HexId::Target = str
pub fn rustic_core::id::HexId::deref(&self) -> &Self::Target
impl core::clone::Clone for rustic_core::id::HexId
pub fn rustic_core::id::HexId::clone(&self) -> rustic_core::id::HexId
impl core::fmt::Debug for rustic_core::id::HexId
pub fn rustic_core::id::HexId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::id::HexId
impl core::marker::Send for rustic_core::id::HexId
impl core::marker::Sync for rustic_core::id::HexId
impl core::marker::Unpin for rustic_core::id::HexId
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::id::HexId
impl core::panic::unwind_safe::UnwindSafe for rustic_core::id::HexId
impl<T, U> core::convert::Into<U> for rustic_core::id::HexId where U: core::convert::From<T>
pub fn rustic_core::id::HexId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::id::HexId where U: core::convert::Into<T>
pub type rustic_core::id::HexId::Error = core::convert::Infallible
pub fn rustic_core::id::HexId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::id::HexId where U: core::convert::TryFrom<T>
pub type rustic_core::id::HexId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::id::HexId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::id::HexId where T: core::clone::Clone
pub type rustic_core::id::HexId::Owned = T
pub fn rustic_core::id::HexId::clone_into(&self, target: &mut T)
pub fn rustic_core::id::HexId::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::id::HexId where T: 'static + core::marker::Sized
pub fn rustic_core::id::HexId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::id::HexId where T: core::marker::Sized
pub fn rustic_core::id::HexId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::id::HexId where T: core::marker::Sized
pub fn rustic_core::id::HexId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::id::HexId
pub fn rustic_core::id::HexId::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::id::HexId
pub type rustic_core::id::HexId::Init = T
pub const rustic_core::id::HexId::ALIGN: usize
pub unsafe fn rustic_core::id::HexId::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::id::HexId::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::id::HexId::drop(ptr: usize)
pub unsafe fn rustic_core::id::HexId::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::id::HexId
impl<T> tracing::instrument::WithSubscriber for rustic_core::id::HexId
impl<T> typenum::type_operators::Same<T> for rustic_core::id::HexId
pub type rustic_core::id::HexId::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::id::HexId where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::id::HexId::vzip(self) -> V
pub struct rustic_core::Id(pub [u8; 32])
impl rustic_core::id::Id
pub fn rustic_core::id::Id::blob_matches_reader(&self, length: usize, r: &mut impl std::io::Read) -> bool
pub fn rustic_core::id::Id::from_hex(s: &str) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::id::Id::is_null(&self) -> bool
pub fn rustic_core::id::Id::random() -> Self
pub fn rustic_core::id::Id::to_hex(self) -> rustic_core::id::HexId
impl rustic_core::id::Id
pub fn rustic_core::id::Id::new(__0: [u8; 32]) -> rustic_core::id::Id
impl core::fmt::Debug for rustic_core::id::Id
pub fn rustic_core::id::Id::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for rustic_core::id::Id
pub fn rustic_core::id::Id::fmt(&self, _derive_more_display_formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl binrw::binread::BinRead for rustic_core::id::Id
pub type rustic_core::id::Id::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::id::Id::read_options<R: std::io::Read + std::io::Seek>(__binrw_generated_var_reader: &mut R, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<Self>
impl binrw::binwrite::BinWrite for rustic_core::id::Id
pub type rustic_core::id::Id::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::id::Id::write_options<W: std::io::Write + std::io::Seek>(&self, __binrw_generated_var_writer: &mut W, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<()>
impl core::clone::Clone for rustic_core::id::Id
pub fn rustic_core::id::Id::clone(&self) -> rustic_core::id::Id
impl core::cmp::Eq for rustic_core::id::Id
impl core::cmp::Ord for rustic_core::id::Id
pub fn rustic_core::id::Id::cmp(&self, other: &rustic_core::id::Id) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::id::Id> for rustic_core::id::Id
pub fn rustic_core::id::Id::eq(&self, other: &rustic_core::id::Id) -> bool
impl core::cmp::PartialOrd<rustic_core::id::Id> for rustic_core::id::Id
pub fn rustic_core::id::Id::partial_cmp(&self, other: &rustic_core::id::Id) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::id::Id
pub fn rustic_core::id::Id::default() -> rustic_core::id::Id
impl core::hash::Hash for rustic_core::id::Id
pub fn rustic_core::id::Id::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::Copy for rustic_core::id::Id
impl core::marker::StructuralEq for rustic_core::id::Id
impl core::marker::StructuralPartialEq for rustic_core::id::Id
impl serde::ser::Serialize for rustic_core::id::Id
pub fn rustic_core::id::Id::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::id::Id
pub fn rustic_core::id::Id::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::id::Id
impl core::marker::Sync for rustic_core::id::Id
impl core::marker::Unpin for rustic_core::id::Id
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::id::Id
impl core::panic::unwind_safe::UnwindSafe for rustic_core::id::Id
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::id::Id where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::id::Id::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::id::Id where U: core::convert::From<T>
pub fn rustic_core::id::Id::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::id::Id where U: core::convert::Into<T>
pub type rustic_core::id::Id::Error = core::convert::Infallible
pub fn rustic_core::id::Id::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::id::Id where U: core::convert::TryFrom<T>
pub type rustic_core::id::Id::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::id::Id::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::id::Id where T: core::clone::Clone
pub type rustic_core::id::Id::Owned = T
pub fn rustic_core::id::Id::clone_into(&self, target: &mut T)
pub fn rustic_core::id::Id::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::id::Id where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::id::Id::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::id::Id where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::id::Id::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::id::Id::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::id::Id::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::id::Id where T: 'static + core::marker::Sized
pub fn rustic_core::id::Id::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::id::Id where T: core::marker::Sized
pub fn rustic_core::id::Id::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::id::Id where T: core::marker::Sized
pub fn rustic_core::id::Id::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::id::Id
pub fn rustic_core::id::Id::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::id::Id
pub type rustic_core::id::Id::Init = T
pub const rustic_core::id::Id::ALIGN: usize
pub unsafe fn rustic_core::id::Id::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::id::Id::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::id::Id::drop(ptr: usize)
pub unsafe fn rustic_core::id::Id::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::id::Id where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::id::Id
impl<T> tracing::instrument::WithSubscriber for rustic_core::id::Id
impl<T> typenum::type_operators::Same<T> for rustic_core::id::Id
pub type rustic_core::id::Id::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::id::Id where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::id::Id::vzip(self) -> V
pub struct rustic_core::IndexInfos
pub rustic_core::IndexInfos::blobs: alloc::vec::Vec<rustic_core::commands::repoinfo::BlobInfo>
pub rustic_core::IndexInfos::blobs_delete: alloc::vec::Vec<rustic_core::commands::repoinfo::BlobInfo>
pub rustic_core::IndexInfos::packs: alloc::vec::Vec<rustic_core::commands::repoinfo::PackInfo>
pub rustic_core::IndexInfos::packs_delete: alloc::vec::Vec<rustic_core::commands::repoinfo::PackInfo>
impl core::clone::Clone for rustic_core::commands::repoinfo::IndexInfos
pub fn rustic_core::commands::repoinfo::IndexInfos::clone(&self) -> rustic_core::commands::repoinfo::IndexInfos
impl core::default::Default for rustic_core::commands::repoinfo::IndexInfos
pub fn rustic_core::commands::repoinfo::IndexInfos::default() -> rustic_core::commands::repoinfo::IndexInfos
impl core::fmt::Debug for rustic_core::commands::repoinfo::IndexInfos
pub fn rustic_core::commands::repoinfo::IndexInfos::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::commands::repoinfo::IndexInfos
pub fn rustic_core::commands::repoinfo::IndexInfos::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::commands::repoinfo::IndexInfos
pub fn rustic_core::commands::repoinfo::IndexInfos::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::commands::repoinfo::IndexInfos
impl core::marker::Sync for rustic_core::commands::repoinfo::IndexInfos
impl core::marker::Unpin for rustic_core::commands::repoinfo::IndexInfos
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::repoinfo::IndexInfos
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::repoinfo::IndexInfos
impl<T, U> core::convert::Into<U> for rustic_core::commands::repoinfo::IndexInfos where U: core::convert::From<T>
pub fn rustic_core::commands::repoinfo::IndexInfos::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::repoinfo::IndexInfos where U: core::convert::Into<T>
pub type rustic_core::commands::repoinfo::IndexInfos::Error = core::convert::Infallible
pub fn rustic_core::commands::repoinfo::IndexInfos::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::repoinfo::IndexInfos where U: core::convert::TryFrom<T>
pub type rustic_core::commands::repoinfo::IndexInfos::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::repoinfo::IndexInfos::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::repoinfo::IndexInfos where T: core::clone::Clone
pub type rustic_core::commands::repoinfo::IndexInfos::Owned = T
pub fn rustic_core::commands::repoinfo::IndexInfos::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::repoinfo::IndexInfos::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::repoinfo::IndexInfos where T: 'static + core::marker::Sized
pub fn rustic_core::commands::repoinfo::IndexInfos::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::repoinfo::IndexInfos where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::IndexInfos::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::repoinfo::IndexInfos where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::IndexInfos::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::repoinfo::IndexInfos
pub fn rustic_core::commands::repoinfo::IndexInfos::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::repoinfo::IndexInfos
pub type rustic_core::commands::repoinfo::IndexInfos::Init = T
pub const rustic_core::commands::repoinfo::IndexInfos::ALIGN: usize
pub unsafe fn rustic_core::commands::repoinfo::IndexInfos::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::repoinfo::IndexInfos::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::repoinfo::IndexInfos::drop(ptr: usize)
pub unsafe fn rustic_core::commands::repoinfo::IndexInfos::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::commands::repoinfo::IndexInfos where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::commands::repoinfo::IndexInfos
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::repoinfo::IndexInfos
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::repoinfo::IndexInfos
pub type rustic_core::commands::repoinfo::IndexInfos::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::repoinfo::IndexInfos where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::repoinfo::IndexInfos::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::KeepOptions
pub rustic_core::KeepOptions::keep_daily: i32
pub rustic_core::KeepOptions::keep_half_yearly: i32
pub rustic_core::KeepOptions::keep_hourly: i32
pub rustic_core::KeepOptions::keep_ids: alloc::vec::Vec<alloc::string::String>
pub rustic_core::KeepOptions::keep_last: i32
pub rustic_core::KeepOptions::keep_monthly: i32
pub rustic_core::KeepOptions::keep_quarter_yearly: i32
pub rustic_core::KeepOptions::keep_tags: alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>
pub rustic_core::KeepOptions::keep_weekly: i32
pub rustic_core::KeepOptions::keep_within: humantime::wrapper::Duration
pub rustic_core::KeepOptions::keep_within_daily: humantime::wrapper::Duration
pub rustic_core::KeepOptions::keep_within_half_yearly: humantime::wrapper::Duration
pub rustic_core::KeepOptions::keep_within_hourly: humantime::wrapper::Duration
pub rustic_core::KeepOptions::keep_within_monthly: humantime::wrapper::Duration
pub rustic_core::KeepOptions::keep_within_quarter_yearly: humantime::wrapper::Duration
pub rustic_core::KeepOptions::keep_within_weekly: humantime::wrapper::Duration
pub rustic_core::KeepOptions::keep_within_yearly: humantime::wrapper::Duration
pub rustic_core::KeepOptions::keep_yearly: i32
impl rustic_core::commands::forget::KeepOptions
pub fn rustic_core::commands::forget::KeepOptions::apply(&self, snapshots: alloc::vec::Vec<rustic_core::repofile::snapshotfile::SnapshotFile>, now: chrono::datetime::DateTime<chrono::offset::local::Local>) -> alloc::vec::Vec<rustic_core::commands::forget::ForgetSnapshot>
pub fn rustic_core::commands::forget::KeepOptions::matches(&mut self, sn: &rustic_core::repofile::snapshotfile::SnapshotFile, last: core::option::Option<&rustic_core::repofile::snapshotfile::SnapshotFile>, has_next: bool, latest_time: chrono::datetime::DateTime<chrono::offset::local::Local>) -> alloc::vec::Vec<&str>
impl rustic_core::commands::forget::KeepOptions
pub fn rustic_core::commands::forget::KeepOptions::keep_daily(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_half_yearly(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_hourly(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_ids(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_last(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_monthly(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_quarter_yearly(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_tags(self, value: impl core::convert::Into<alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_weekly(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_within(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_within_daily(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_within_half_yearly(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_within_hourly(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_within_monthly(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_within_quarter_yearly(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_within_weekly(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_within_yearly(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::forget::KeepOptions::keep_yearly(self, value: impl core::convert::Into<i32>) -> Self
impl core::default::Default for rustic_core::commands::forget::KeepOptions
pub fn rustic_core::commands::forget::KeepOptions::default() -> Self
impl core::clone::Clone for rustic_core::commands::forget::KeepOptions
pub fn rustic_core::commands::forget::KeepOptions::clone(&self) -> rustic_core::commands::forget::KeepOptions
impl core::cmp::Eq for rustic_core::commands::forget::KeepOptions
impl core::cmp::PartialEq<rustic_core::commands::forget::KeepOptions> for rustic_core::commands::forget::KeepOptions
pub fn rustic_core::commands::forget::KeepOptions::eq(&self, other: &rustic_core::commands::forget::KeepOptions) -> bool
impl core::fmt::Debug for rustic_core::commands::forget::KeepOptions
pub fn rustic_core::commands::forget::KeepOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::commands::forget::KeepOptions
impl core::marker::StructuralPartialEq for rustic_core::commands::forget::KeepOptions
impl<'de> serde::de::Deserialize<'de> for rustic_core::commands::forget::KeepOptions where rustic_core::commands::forget::KeepOptions: core::default::Default
pub fn rustic_core::commands::forget::KeepOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::commands::forget::KeepOptions
impl core::marker::Sync for rustic_core::commands::forget::KeepOptions
impl core::marker::Unpin for rustic_core::commands::forget::KeepOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::forget::KeepOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::forget::KeepOptions
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::commands::forget::KeepOptions where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::commands::forget::KeepOptions::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::commands::forget::KeepOptions where U: core::convert::From<T>
pub fn rustic_core::commands::forget::KeepOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::forget::KeepOptions where U: core::convert::Into<T>
pub type rustic_core::commands::forget::KeepOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::forget::KeepOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::forget::KeepOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::forget::KeepOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::forget::KeepOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::forget::KeepOptions where T: core::clone::Clone
pub type rustic_core::commands::forget::KeepOptions::Owned = T
pub fn rustic_core::commands::forget::KeepOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::forget::KeepOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::forget::KeepOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::forget::KeepOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::forget::KeepOptions where T: core::marker::Sized
pub fn rustic_core::commands::forget::KeepOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::forget::KeepOptions where T: core::marker::Sized
pub fn rustic_core::commands::forget::KeepOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::forget::KeepOptions
pub fn rustic_core::commands::forget::KeepOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::forget::KeepOptions
pub type rustic_core::commands::forget::KeepOptions::Init = T
pub const rustic_core::commands::forget::KeepOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::forget::KeepOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::forget::KeepOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::forget::KeepOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::forget::KeepOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::commands::forget::KeepOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::commands::forget::KeepOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::forget::KeepOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::forget::KeepOptions
pub type rustic_core::commands::forget::KeepOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::forget::KeepOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::forget::KeepOptions::vzip(self) -> V
pub struct rustic_core::KeyOptions
pub rustic_core::KeyOptions::hostname: core::option::Option<alloc::string::String>
pub rustic_core::KeyOptions::username: core::option::Option<alloc::string::String>
pub rustic_core::KeyOptions::with_created: bool
impl rustic_core::commands::key::KeyOptions
pub fn rustic_core::commands::key::KeyOptions::add<P, S>(&self, repo: &rustic_core::repository::Repository<P, S>, pass: &str, key: rustic_core::crypto::aespoly1305::Key) -> rustic_core::error::RusticResult<rustic_core::id::Id>
pub fn rustic_core::commands::key::KeyOptions::add_key<P, S: rustic_core::repository::Open>(&self, repo: &rustic_core::repository::Repository<P, S>, pass: &str) -> rustic_core::error::RusticResult<rustic_core::id::Id>
pub fn rustic_core::commands::key::KeyOptions::init_key<P, S>(&self, repo: &rustic_core::repository::Repository<P, S>, pass: &str) -> rustic_core::error::RusticResult<(rustic_core::crypto::aespoly1305::Key, rustic_core::id::Id)>
impl rustic_core::commands::key::KeyOptions
pub fn rustic_core::commands::key::KeyOptions::hostname(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
pub fn rustic_core::commands::key::KeyOptions::username(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
pub fn rustic_core::commands::key::KeyOptions::with_created(self, value: impl core::convert::Into<bool>) -> Self
impl core::clone::Clone for rustic_core::commands::key::KeyOptions
pub fn rustic_core::commands::key::KeyOptions::clone(&self) -> rustic_core::commands::key::KeyOptions
impl core::default::Default for rustic_core::commands::key::KeyOptions
pub fn rustic_core::commands::key::KeyOptions::default() -> rustic_core::commands::key::KeyOptions
impl core::fmt::Debug for rustic_core::commands::key::KeyOptions
pub fn rustic_core::commands::key::KeyOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::commands::key::KeyOptions
impl core::marker::Sync for rustic_core::commands::key::KeyOptions
impl core::marker::Unpin for rustic_core::commands::key::KeyOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::key::KeyOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::key::KeyOptions
impl<T, U> core::convert::Into<U> for rustic_core::commands::key::KeyOptions where U: core::convert::From<T>
pub fn rustic_core::commands::key::KeyOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::key::KeyOptions where U: core::convert::Into<T>
pub type rustic_core::commands::key::KeyOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::key::KeyOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::key::KeyOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::key::KeyOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::key::KeyOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::key::KeyOptions where T: core::clone::Clone
pub type rustic_core::commands::key::KeyOptions::Owned = T
pub fn rustic_core::commands::key::KeyOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::key::KeyOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::key::KeyOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::key::KeyOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::key::KeyOptions where T: core::marker::Sized
pub fn rustic_core::commands::key::KeyOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::key::KeyOptions where T: core::marker::Sized
pub fn rustic_core::commands::key::KeyOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::key::KeyOptions
pub fn rustic_core::commands::key::KeyOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::key::KeyOptions
pub type rustic_core::commands::key::KeyOptions::Init = T
pub const rustic_core::commands::key::KeyOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::key::KeyOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::key::KeyOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::key::KeyOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::key::KeyOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::key::KeyOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::key::KeyOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::key::KeyOptions
pub type rustic_core::commands::key::KeyOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::key::KeyOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::key::KeyOptions::vzip(self) -> V
pub struct rustic_core::LocalDestination
pub rustic_core::LocalDestination::is_file: bool
pub rustic_core::LocalDestination::path: std::path::PathBuf
impl rustic_core::backend::local::LocalDestination
pub fn rustic_core::backend::local::LocalDestination::create_dir(&self, item: impl core::convert::AsRef<std::path::Path>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::create_special(&self, _item: impl core::convert::AsRef<std::path::Path>, _node: &rustic_core::backend::node::Node) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::get_matching_file(&self, item: impl core::convert::AsRef<std::path::Path>, size: u64) -> core::option::Option<std::fs::File>
pub fn rustic_core::backend::local::LocalDestination::new(path: &str, create: bool, expect_file: bool) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::backend::local::LocalDestination::path(&self, item: impl core::convert::AsRef<std::path::Path>) -> std::path::PathBuf
pub fn rustic_core::backend::local::LocalDestination::read_at(&self, item: impl core::convert::AsRef<std::path::Path>, offset: u64, length: u64) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::backend::local::LocalDestination::remove_dir(&self, dirname: impl core::convert::AsRef<std::path::Path>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::remove_file(&self, filename: impl core::convert::AsRef<std::path::Path>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::set_extended_attributes(&self, _item: impl core::convert::AsRef<std::path::Path>, _extended_attributes: &[rustic_core::backend::node::ExtendedAttribute]) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::set_length(&self, item: impl core::convert::AsRef<std::path::Path>, size: u64) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::set_permission(&self, _item: impl core::convert::AsRef<std::path::Path>, _node: &rustic_core::backend::node::Node) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::set_times(&self, item: impl core::convert::AsRef<std::path::Path>, meta: &rustic_core::backend::node::Metadata) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::set_uid_gid(&self, _item: impl core::convert::AsRef<std::path::Path>, _meta: &rustic_core::backend::node::Metadata) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::set_user_group(&self, _item: impl core::convert::AsRef<std::path::Path>, _meta: &rustic_core::backend::node::Metadata) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::backend::local::LocalDestination::write_at(&self, item: impl core::convert::AsRef<std::path::Path>, offset: u64, data: &[u8]) -> rustic_core::error::RusticResult<()>
impl core::clone::Clone for rustic_core::backend::local::LocalDestination
pub fn rustic_core::backend::local::LocalDestination::clone(&self) -> rustic_core::backend::local::LocalDestination
impl core::fmt::Debug for rustic_core::backend::local::LocalDestination
pub fn rustic_core::backend::local::LocalDestination::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::backend::local::LocalDestination
impl core::marker::Sync for rustic_core::backend::local::LocalDestination
impl core::marker::Unpin for rustic_core::backend::local::LocalDestination
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::local::LocalDestination
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::local::LocalDestination
impl<T, U> core::convert::Into<U> for rustic_core::backend::local::LocalDestination where U: core::convert::From<T>
pub fn rustic_core::backend::local::LocalDestination::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::local::LocalDestination where U: core::convert::Into<T>
pub type rustic_core::backend::local::LocalDestination::Error = core::convert::Infallible
pub fn rustic_core::backend::local::LocalDestination::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::local::LocalDestination where U: core::convert::TryFrom<T>
pub type rustic_core::backend::local::LocalDestination::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::local::LocalDestination::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::local::LocalDestination where T: core::clone::Clone
pub type rustic_core::backend::local::LocalDestination::Owned = T
pub fn rustic_core::backend::local::LocalDestination::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::local::LocalDestination::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::local::LocalDestination where T: 'static + core::marker::Sized
pub fn rustic_core::backend::local::LocalDestination::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::local::LocalDestination where T: core::marker::Sized
pub fn rustic_core::backend::local::LocalDestination::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::local::LocalDestination where T: core::marker::Sized
pub fn rustic_core::backend::local::LocalDestination::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::local::LocalDestination
pub fn rustic_core::backend::local::LocalDestination::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::local::LocalDestination
pub type rustic_core::backend::local::LocalDestination::Init = T
pub const rustic_core::backend::local::LocalDestination::ALIGN: usize
pub unsafe fn rustic_core::backend::local::LocalDestination::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::local::LocalDestination::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::local::LocalDestination::drop(ptr: usize)
pub unsafe fn rustic_core::backend::local::LocalDestination::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::backend::local::LocalDestination
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::local::LocalDestination
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::local::LocalDestination
pub type rustic_core::backend::local::LocalDestination::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::local::LocalDestination where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::local::LocalDestination::vzip(self) -> V
pub struct rustic_core::LocalSource
pub rustic_core::LocalSource::builder: ignore::walk::WalkBuilder
pub rustic_core::LocalSource::save_opts: rustic_core::backend::ignore::LocalSourceSaveOptions
pub rustic_core::LocalSource::walker: ignore::walk::Walk
impl rustic_core::backend::ignore::LocalSource
pub fn rustic_core::backend::ignore::LocalSource::new(save_opts: rustic_core::backend::ignore::LocalSourceSaveOptions, filter_opts: &rustic_core::backend::ignore::LocalSourceFilterOptions, backup_paths: &[impl core::convert::AsRef<std::path::Path>]) -> rustic_core::error::RusticResult<Self>
impl core::iter::traits::iterator::Iterator for rustic_core::backend::ignore::LocalSource
pub type rustic_core::backend::ignore::LocalSource::Item = core::result::Result<rustic_core::backend::ReadSourceEntry<rustic_core::backend::ignore::OpenFile>, rustic_core::error::RusticError>
pub fn rustic_core::backend::ignore::LocalSource::next(&mut self) -> core::option::Option<Self::Item>
impl rustic_core::backend::ReadSource for rustic_core::backend::ignore::LocalSource
pub type rustic_core::backend::ignore::LocalSource::Iter = rustic_core::backend::ignore::LocalSource
pub type rustic_core::backend::ignore::LocalSource::Open = rustic_core::backend::ignore::OpenFile
pub fn rustic_core::backend::ignore::LocalSource::entries(self) -> Self::Iter
pub fn rustic_core::backend::ignore::LocalSource::size(&self) -> rustic_core::error::RusticResult<core::option::Option<u64>>
impl core::marker::Send for rustic_core::backend::ignore::LocalSource
impl core::marker::Sync for rustic_core::backend::ignore::LocalSource
impl core::marker::Unpin for rustic_core::backend::ignore::LocalSource
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::ignore::LocalSource
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::backend::ignore::LocalSource
impl<I> core::iter::traits::collect::IntoIterator for rustic_core::backend::ignore::LocalSource where I: core::iter::traits::iterator::Iterator
pub type rustic_core::backend::ignore::LocalSource::IntoIter = I
pub type rustic_core::backend::ignore::LocalSource::Item = <I as core::iter::traits::iterator::Iterator>::Item
pub fn rustic_core::backend::ignore::LocalSource::into_iter(self) -> I
impl<I> pariter::IteratorExt for rustic_core::backend::ignore::LocalSource where I: core::iter::traits::iterator::Iterator
impl<I> rand::seq::IteratorRandom for rustic_core::backend::ignore::LocalSource where I: core::iter::traits::iterator::Iterator
impl<T, U> core::convert::Into<U> for rustic_core::backend::ignore::LocalSource where U: core::convert::From<T>
pub fn rustic_core::backend::ignore::LocalSource::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::ignore::LocalSource where U: core::convert::Into<T>
pub type rustic_core::backend::ignore::LocalSource::Error = core::convert::Infallible
pub fn rustic_core::backend::ignore::LocalSource::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::ignore::LocalSource where U: core::convert::TryFrom<T>
pub type rustic_core::backend::ignore::LocalSource::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::ignore::LocalSource::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::backend::ignore::LocalSource where T: 'static + core::marker::Sized
pub fn rustic_core::backend::ignore::LocalSource::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::ignore::LocalSource where T: core::marker::Sized
pub fn rustic_core::backend::ignore::LocalSource::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::ignore::LocalSource where T: core::marker::Sized
pub fn rustic_core::backend::ignore::LocalSource::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::ignore::LocalSource
pub fn rustic_core::backend::ignore::LocalSource::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::ignore::LocalSource
pub type rustic_core::backend::ignore::LocalSource::Init = T
pub const rustic_core::backend::ignore::LocalSource::ALIGN: usize
pub unsafe fn rustic_core::backend::ignore::LocalSource::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::ignore::LocalSource::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::ignore::LocalSource::drop(ptr: usize)
pub unsafe fn rustic_core::backend::ignore::LocalSource::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> itertools::Itertools for rustic_core::backend::ignore::LocalSource where T: core::iter::traits::iterator::Iterator + core::marker::Sized
impl<T> rayon::iter::par_bridge::ParallelBridge for rustic_core::backend::ignore::LocalSource where T: core::iter::traits::iterator::Iterator + core::marker::Send, <T as core::iter::traits::iterator::Iterator>::Item: core::marker::Send
pub fn rustic_core::backend::ignore::LocalSource::par_bridge(self) -> rayon::iter::par_bridge::IterBridge<T>
impl<T> tracing::instrument::Instrument for rustic_core::backend::ignore::LocalSource
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::ignore::LocalSource
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::ignore::LocalSource
pub type rustic_core::backend::ignore::LocalSource::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::ignore::LocalSource where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::ignore::LocalSource::vzip(self) -> V
pub struct rustic_core::LocalSourceFilterOptions
pub rustic_core::LocalSourceFilterOptions::exclude_if_present: alloc::vec::Vec<alloc::string::String>
pub rustic_core::LocalSourceFilterOptions::exclude_larger_than: core::option::Option<bytesize::ByteSize>
pub rustic_core::LocalSourceFilterOptions::git_ignore: bool
pub rustic_core::LocalSourceFilterOptions::glob: alloc::vec::Vec<alloc::string::String>
pub rustic_core::LocalSourceFilterOptions::glob_file: alloc::vec::Vec<alloc::string::String>
pub rustic_core::LocalSourceFilterOptions::iglob: alloc::vec::Vec<alloc::string::String>
pub rustic_core::LocalSourceFilterOptions::iglob_file: alloc::vec::Vec<alloc::string::String>
pub rustic_core::LocalSourceFilterOptions::no_require_git: bool
pub rustic_core::LocalSourceFilterOptions::one_file_system: bool
impl rustic_core::backend::ignore::LocalSourceFilterOptions
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::exclude_if_present(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::exclude_larger_than(self, value: impl core::convert::Into<core::option::Option<bytesize::ByteSize>>) -> Self
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::git_ignore(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::glob(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::glob_file(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::iglob(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::iglob_file(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::no_require_git(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::one_file_system(self, value: impl core::convert::Into<bool>) -> Self
impl core::clone::Clone for rustic_core::backend::ignore::LocalSourceFilterOptions
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::clone(&self) -> rustic_core::backend::ignore::LocalSourceFilterOptions
impl core::default::Default for rustic_core::backend::ignore::LocalSourceFilterOptions
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::default() -> rustic_core::backend::ignore::LocalSourceFilterOptions
impl core::fmt::Debug for rustic_core::backend::ignore::LocalSourceFilterOptions
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::backend::ignore::LocalSourceFilterOptions
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::backend::ignore::LocalSourceFilterOptions where rustic_core::backend::ignore::LocalSourceFilterOptions: core::default::Default
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::backend::ignore::LocalSourceFilterOptions
impl core::marker::Sync for rustic_core::backend::ignore::LocalSourceFilterOptions
impl core::marker::Unpin for rustic_core::backend::ignore::LocalSourceFilterOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::ignore::LocalSourceFilterOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::ignore::LocalSourceFilterOptions
impl<T, U> core::convert::Into<U> for rustic_core::backend::ignore::LocalSourceFilterOptions where U: core::convert::From<T>
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::ignore::LocalSourceFilterOptions where U: core::convert::Into<T>
pub type rustic_core::backend::ignore::LocalSourceFilterOptions::Error = core::convert::Infallible
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::ignore::LocalSourceFilterOptions where U: core::convert::TryFrom<T>
pub type rustic_core::backend::ignore::LocalSourceFilterOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::ignore::LocalSourceFilterOptions where T: core::clone::Clone
pub type rustic_core::backend::ignore::LocalSourceFilterOptions::Owned = T
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::ignore::LocalSourceFilterOptions where T: 'static + core::marker::Sized
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::ignore::LocalSourceFilterOptions where T: core::marker::Sized
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::ignore::LocalSourceFilterOptions where T: core::marker::Sized
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::ignore::LocalSourceFilterOptions
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::ignore::LocalSourceFilterOptions
pub type rustic_core::backend::ignore::LocalSourceFilterOptions::Init = T
pub const rustic_core::backend::ignore::LocalSourceFilterOptions::ALIGN: usize
pub unsafe fn rustic_core::backend::ignore::LocalSourceFilterOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::ignore::LocalSourceFilterOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::ignore::LocalSourceFilterOptions::drop(ptr: usize)
pub unsafe fn rustic_core::backend::ignore::LocalSourceFilterOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::backend::ignore::LocalSourceFilterOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::backend::ignore::LocalSourceFilterOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::ignore::LocalSourceFilterOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::ignore::LocalSourceFilterOptions
pub type rustic_core::backend::ignore::LocalSourceFilterOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::ignore::LocalSourceFilterOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::ignore::LocalSourceFilterOptions::vzip(self) -> V
pub struct rustic_core::LocalSourceSaveOptions
pub rustic_core::LocalSourceSaveOptions::ignore_devid: bool
pub rustic_core::LocalSourceSaveOptions::with_atime: bool
impl rustic_core::backend::ignore::LocalSourceSaveOptions
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::ignore_devid(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::with_atime(self, value: impl core::convert::Into<bool>) -> Self
impl core::clone::Clone for rustic_core::backend::ignore::LocalSourceSaveOptions
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::clone(&self) -> rustic_core::backend::ignore::LocalSourceSaveOptions
impl core::default::Default for rustic_core::backend::ignore::LocalSourceSaveOptions
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::default() -> rustic_core::backend::ignore::LocalSourceSaveOptions
impl core::fmt::Debug for rustic_core::backend::ignore::LocalSourceSaveOptions
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::backend::ignore::LocalSourceSaveOptions
impl serde::ser::Serialize for rustic_core::backend::ignore::LocalSourceSaveOptions
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::backend::ignore::LocalSourceSaveOptions where rustic_core::backend::ignore::LocalSourceSaveOptions: core::default::Default
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::backend::ignore::LocalSourceSaveOptions
impl core::marker::Sync for rustic_core::backend::ignore::LocalSourceSaveOptions
impl core::marker::Unpin for rustic_core::backend::ignore::LocalSourceSaveOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::ignore::LocalSourceSaveOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::backend::ignore::LocalSourceSaveOptions
impl<T, U> core::convert::Into<U> for rustic_core::backend::ignore::LocalSourceSaveOptions where U: core::convert::From<T>
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::ignore::LocalSourceSaveOptions where U: core::convert::Into<T>
pub type rustic_core::backend::ignore::LocalSourceSaveOptions::Error = core::convert::Infallible
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::ignore::LocalSourceSaveOptions where U: core::convert::TryFrom<T>
pub type rustic_core::backend::ignore::LocalSourceSaveOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::ignore::LocalSourceSaveOptions where T: core::clone::Clone
pub type rustic_core::backend::ignore::LocalSourceSaveOptions::Owned = T
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::ignore::LocalSourceSaveOptions where T: 'static + core::marker::Sized
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::ignore::LocalSourceSaveOptions where T: core::marker::Sized
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::ignore::LocalSourceSaveOptions where T: core::marker::Sized
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::ignore::LocalSourceSaveOptions
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::ignore::LocalSourceSaveOptions
pub type rustic_core::backend::ignore::LocalSourceSaveOptions::Init = T
pub const rustic_core::backend::ignore::LocalSourceSaveOptions::ALIGN: usize
pub unsafe fn rustic_core::backend::ignore::LocalSourceSaveOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::ignore::LocalSourceSaveOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::ignore::LocalSourceSaveOptions::drop(ptr: usize)
pub unsafe fn rustic_core::backend::ignore::LocalSourceSaveOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::backend::ignore::LocalSourceSaveOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::backend::ignore::LocalSourceSaveOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::ignore::LocalSourceSaveOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::ignore::LocalSourceSaveOptions
pub type rustic_core::backend::ignore::LocalSourceSaveOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::ignore::LocalSourceSaveOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::ignore::LocalSourceSaveOptions::vzip(self) -> V
pub struct rustic_core::LsOptions
pub rustic_core::LsOptions::glob: alloc::vec::Vec<alloc::string::String>
pub rustic_core::LsOptions::glob_file: alloc::vec::Vec<alloc::string::String>
pub rustic_core::LsOptions::iglob: alloc::vec::Vec<alloc::string::String>
pub rustic_core::LsOptions::iglob_file: alloc::vec::Vec<alloc::string::String>
pub rustic_core::LsOptions::recursive: bool
impl rustic_core::blob::tree::TreeStreamerOptions
pub fn rustic_core::blob::tree::TreeStreamerOptions::glob(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::blob::tree::TreeStreamerOptions::glob_file(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::blob::tree::TreeStreamerOptions::iglob(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::blob::tree::TreeStreamerOptions::iglob_file(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::blob::tree::TreeStreamerOptions::recursive(self, value: impl core::convert::Into<bool>) -> Self
impl core::default::Default for rustic_core::blob::tree::TreeStreamerOptions
pub fn rustic_core::blob::tree::TreeStreamerOptions::default() -> Self
impl core::clone::Clone for rustic_core::blob::tree::TreeStreamerOptions
pub fn rustic_core::blob::tree::TreeStreamerOptions::clone(&self) -> rustic_core::blob::tree::TreeStreamerOptions
impl core::fmt::Debug for rustic_core::blob::tree::TreeStreamerOptions
pub fn rustic_core::blob::tree::TreeStreamerOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::blob::tree::TreeStreamerOptions
impl core::marker::Sync for rustic_core::blob::tree::TreeStreamerOptions
impl core::marker::Unpin for rustic_core::blob::tree::TreeStreamerOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::blob::tree::TreeStreamerOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::blob::tree::TreeStreamerOptions
impl<T, U> core::convert::Into<U> for rustic_core::blob::tree::TreeStreamerOptions where U: core::convert::From<T>
pub fn rustic_core::blob::tree::TreeStreamerOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::blob::tree::TreeStreamerOptions where U: core::convert::Into<T>
pub type rustic_core::blob::tree::TreeStreamerOptions::Error = core::convert::Infallible
pub fn rustic_core::blob::tree::TreeStreamerOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::blob::tree::TreeStreamerOptions where U: core::convert::TryFrom<T>
pub type rustic_core::blob::tree::TreeStreamerOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::blob::tree::TreeStreamerOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::blob::tree::TreeStreamerOptions where T: core::clone::Clone
pub type rustic_core::blob::tree::TreeStreamerOptions::Owned = T
pub fn rustic_core::blob::tree::TreeStreamerOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::blob::tree::TreeStreamerOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::blob::tree::TreeStreamerOptions where T: 'static + core::marker::Sized
pub fn rustic_core::blob::tree::TreeStreamerOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::blob::tree::TreeStreamerOptions where T: core::marker::Sized
pub fn rustic_core::blob::tree::TreeStreamerOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::blob::tree::TreeStreamerOptions where T: core::marker::Sized
pub fn rustic_core::blob::tree::TreeStreamerOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::blob::tree::TreeStreamerOptions
pub fn rustic_core::blob::tree::TreeStreamerOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::blob::tree::TreeStreamerOptions
pub type rustic_core::blob::tree::TreeStreamerOptions::Init = T
pub const rustic_core::blob::tree::TreeStreamerOptions::ALIGN: usize
pub unsafe fn rustic_core::blob::tree::TreeStreamerOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::blob::tree::TreeStreamerOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::blob::tree::TreeStreamerOptions::drop(ptr: usize)
pub unsafe fn rustic_core::blob::tree::TreeStreamerOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::blob::tree::TreeStreamerOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::blob::tree::TreeStreamerOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::blob::tree::TreeStreamerOptions
pub type rustic_core::blob::tree::TreeStreamerOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::blob::tree::TreeStreamerOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::blob::tree::TreeStreamerOptions::vzip(self) -> V
pub struct rustic_core::NoProgress
impl rustic_core::progress::Progress for rustic_core::progress::NoProgress
pub fn rustic_core::progress::NoProgress::finish(&self)
pub fn rustic_core::progress::NoProgress::inc(&self, _inc: u64)
pub fn rustic_core::progress::NoProgress::is_hidden(&self) -> bool
pub fn rustic_core::progress::NoProgress::set_length(&self, _len: u64)
pub fn rustic_core::progress::NoProgress::set_title(&self, title: &'static str)
impl core::clone::Clone for rustic_core::progress::NoProgress
pub fn rustic_core::progress::NoProgress::clone(&self) -> rustic_core::progress::NoProgress
impl core::fmt::Debug for rustic_core::progress::NoProgress
pub fn rustic_core::progress::NoProgress::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::progress::NoProgress
impl core::marker::Send for rustic_core::progress::NoProgress
impl core::marker::Sync for rustic_core::progress::NoProgress
impl core::marker::Unpin for rustic_core::progress::NoProgress
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::progress::NoProgress
impl core::panic::unwind_safe::UnwindSafe for rustic_core::progress::NoProgress
impl<T, U> core::convert::Into<U> for rustic_core::progress::NoProgress where U: core::convert::From<T>
pub fn rustic_core::progress::NoProgress::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::progress::NoProgress where U: core::convert::Into<T>
pub type rustic_core::progress::NoProgress::Error = core::convert::Infallible
pub fn rustic_core::progress::NoProgress::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::progress::NoProgress where U: core::convert::TryFrom<T>
pub type rustic_core::progress::NoProgress::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::progress::NoProgress::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::progress::NoProgress where T: core::clone::Clone
pub type rustic_core::progress::NoProgress::Owned = T
pub fn rustic_core::progress::NoProgress::clone_into(&self, target: &mut T)
pub fn rustic_core::progress::NoProgress::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::progress::NoProgress where T: 'static + core::marker::Sized
pub fn rustic_core::progress::NoProgress::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::progress::NoProgress where T: core::marker::Sized
pub fn rustic_core::progress::NoProgress::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::progress::NoProgress where T: core::marker::Sized
pub fn rustic_core::progress::NoProgress::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::progress::NoProgress
pub fn rustic_core::progress::NoProgress::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::progress::NoProgress
pub type rustic_core::progress::NoProgress::Init = T
pub const rustic_core::progress::NoProgress::ALIGN: usize
pub unsafe fn rustic_core::progress::NoProgress::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::progress::NoProgress::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::progress::NoProgress::drop(ptr: usize)
pub unsafe fn rustic_core::progress::NoProgress::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::progress::NoProgress
impl<T> tracing::instrument::WithSubscriber for rustic_core::progress::NoProgress
impl<T> typenum::type_operators::Same<T> for rustic_core::progress::NoProgress
pub type rustic_core::progress::NoProgress::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::progress::NoProgress where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::progress::NoProgress::vzip(self) -> V
pub struct rustic_core::NoProgressBars
impl rustic_core::progress::ProgressBars for rustic_core::progress::NoProgressBars
pub type rustic_core::progress::NoProgressBars::P = rustic_core::progress::NoProgress
pub fn rustic_core::progress::NoProgressBars::progress_bytes(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::progress::NoProgressBars::progress_counter(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::progress::NoProgressBars::progress_hidden(&self) -> Self::P
pub fn rustic_core::progress::NoProgressBars::progress_spinner(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
impl core::clone::Clone for rustic_core::progress::NoProgressBars
pub fn rustic_core::progress::NoProgressBars::clone(&self) -> rustic_core::progress::NoProgressBars
impl core::fmt::Debug for rustic_core::progress::NoProgressBars
pub fn rustic_core::progress::NoProgressBars::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::progress::NoProgressBars
impl core::marker::Send for rustic_core::progress::NoProgressBars
impl core::marker::Sync for rustic_core::progress::NoProgressBars
impl core::marker::Unpin for rustic_core::progress::NoProgressBars
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::progress::NoProgressBars
impl core::panic::unwind_safe::UnwindSafe for rustic_core::progress::NoProgressBars
impl<T, U> core::convert::Into<U> for rustic_core::progress::NoProgressBars where U: core::convert::From<T>
pub fn rustic_core::progress::NoProgressBars::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::progress::NoProgressBars where U: core::convert::Into<T>
pub type rustic_core::progress::NoProgressBars::Error = core::convert::Infallible
pub fn rustic_core::progress::NoProgressBars::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::progress::NoProgressBars where U: core::convert::TryFrom<T>
pub type rustic_core::progress::NoProgressBars::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::progress::NoProgressBars::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::progress::NoProgressBars where T: core::clone::Clone
pub type rustic_core::progress::NoProgressBars::Owned = T
pub fn rustic_core::progress::NoProgressBars::clone_into(&self, target: &mut T)
pub fn rustic_core::progress::NoProgressBars::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::progress::NoProgressBars where T: 'static + core::marker::Sized
pub fn rustic_core::progress::NoProgressBars::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::progress::NoProgressBars where T: core::marker::Sized
pub fn rustic_core::progress::NoProgressBars::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::progress::NoProgressBars where T: core::marker::Sized
pub fn rustic_core::progress::NoProgressBars::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::progress::NoProgressBars
pub fn rustic_core::progress::NoProgressBars::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::progress::NoProgressBars
pub type rustic_core::progress::NoProgressBars::Init = T
pub const rustic_core::progress::NoProgressBars::ALIGN: usize
pub unsafe fn rustic_core::progress::NoProgressBars::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::progress::NoProgressBars::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::progress::NoProgressBars::drop(ptr: usize)
pub unsafe fn rustic_core::progress::NoProgressBars::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::progress::NoProgressBars
impl<T> tracing::instrument::WithSubscriber for rustic_core::progress::NoProgressBars
impl<T> typenum::type_operators::Same<T> for rustic_core::progress::NoProgressBars
pub type rustic_core::progress::NoProgressBars::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::progress::NoProgressBars where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::progress::NoProgressBars::vzip(self) -> V
pub struct rustic_core::OpenStatus
pub rustic_core::OpenStatus::cache: core::option::Option<rustic_core::backend::cache::Cache>
pub rustic_core::OpenStatus::config: rustic_core::repofile::configfile::ConfigFile
pub rustic_core::OpenStatus::dbe: rustic_core::backend::decrypt::DecryptBackend<rustic_core::backend::cache::CachedBackend<rustic_core::backend::hotcold::HotColdBackend<rustic_core::backend::choose::ChooseBackend>>, rustic_core::crypto::aespoly1305::Key>
pub rustic_core::OpenStatus::key: rustic_core::crypto::aespoly1305::Key
impl rustic_core::repository::Open for rustic_core::repository::OpenStatus
pub type rustic_core::repository::OpenStatus::DBE = rustic_core::backend::decrypt::DecryptBackend<rustic_core::backend::cache::CachedBackend<rustic_core::backend::hotcold::HotColdBackend<rustic_core::backend::choose::ChooseBackend>>, rustic_core::crypto::aespoly1305::Key>
pub fn rustic_core::repository::OpenStatus::cache(&self) -> core::option::Option<&rustic_core::backend::cache::Cache>
pub fn rustic_core::repository::OpenStatus::config(&self) -> &rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repository::OpenStatus::dbe(&self) -> &Self::DBE
pub fn rustic_core::repository::OpenStatus::key(&self) -> &rustic_core::crypto::aespoly1305::Key
impl core::fmt::Debug for rustic_core::repository::OpenStatus
pub fn rustic_core::repository::OpenStatus::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::repository::OpenStatus
impl core::marker::Sync for rustic_core::repository::OpenStatus
impl core::marker::Unpin for rustic_core::repository::OpenStatus
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::repository::OpenStatus
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::repository::OpenStatus
impl<T, U> core::convert::Into<U> for rustic_core::repository::OpenStatus where U: core::convert::From<T>
pub fn rustic_core::repository::OpenStatus::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repository::OpenStatus where U: core::convert::Into<T>
pub type rustic_core::repository::OpenStatus::Error = core::convert::Infallible
pub fn rustic_core::repository::OpenStatus::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repository::OpenStatus where U: core::convert::TryFrom<T>
pub type rustic_core::repository::OpenStatus::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repository::OpenStatus::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::repository::OpenStatus where T: 'static + core::marker::Sized
pub fn rustic_core::repository::OpenStatus::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repository::OpenStatus where T: core::marker::Sized
pub fn rustic_core::repository::OpenStatus::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repository::OpenStatus where T: core::marker::Sized
pub fn rustic_core::repository::OpenStatus::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repository::OpenStatus
pub fn rustic_core::repository::OpenStatus::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repository::OpenStatus
pub type rustic_core::repository::OpenStatus::Init = T
pub const rustic_core::repository::OpenStatus::ALIGN: usize
pub unsafe fn rustic_core::repository::OpenStatus::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repository::OpenStatus::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repository::OpenStatus::drop(ptr: usize)
pub unsafe fn rustic_core::repository::OpenStatus::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repository::OpenStatus
impl<T> tracing::instrument::WithSubscriber for rustic_core::repository::OpenStatus
impl<T> typenum::type_operators::Same<T> for rustic_core::repository::OpenStatus
pub type rustic_core::repository::OpenStatus::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repository::OpenStatus where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repository::OpenStatus::vzip(self) -> V
pub struct rustic_core::PackInfo
pub rustic_core::PackInfo::blob_type: rustic_core::blob::BlobType
pub rustic_core::PackInfo::count: u64
pub rustic_core::PackInfo::max_size: core::option::Option<u64>
pub rustic_core::PackInfo::min_size: core::option::Option<u64>
impl rustic_core::commands::repoinfo::PackInfo
pub fn rustic_core::commands::repoinfo::PackInfo::add(&mut self, ip: &rustic_core::repofile::indexfile::IndexPack)
impl core::clone::Clone for rustic_core::commands::repoinfo::PackInfo
pub fn rustic_core::commands::repoinfo::PackInfo::clone(&self) -> rustic_core::commands::repoinfo::PackInfo
impl core::fmt::Debug for rustic_core::commands::repoinfo::PackInfo
pub fn rustic_core::commands::repoinfo::PackInfo::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::repoinfo::PackInfo
impl serde::ser::Serialize for rustic_core::commands::repoinfo::PackInfo
pub fn rustic_core::commands::repoinfo::PackInfo::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::commands::repoinfo::PackInfo
pub fn rustic_core::commands::repoinfo::PackInfo::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::commands::repoinfo::PackInfo
impl core::marker::Sync for rustic_core::commands::repoinfo::PackInfo
impl core::marker::Unpin for rustic_core::commands::repoinfo::PackInfo
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::repoinfo::PackInfo
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::repoinfo::PackInfo
impl<T, U> core::convert::Into<U> for rustic_core::commands::repoinfo::PackInfo where U: core::convert::From<T>
pub fn rustic_core::commands::repoinfo::PackInfo::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::repoinfo::PackInfo where U: core::convert::Into<T>
pub type rustic_core::commands::repoinfo::PackInfo::Error = core::convert::Infallible
pub fn rustic_core::commands::repoinfo::PackInfo::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::repoinfo::PackInfo where U: core::convert::TryFrom<T>
pub type rustic_core::commands::repoinfo::PackInfo::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::repoinfo::PackInfo::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::repoinfo::PackInfo where T: core::clone::Clone
pub type rustic_core::commands::repoinfo::PackInfo::Owned = T
pub fn rustic_core::commands::repoinfo::PackInfo::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::repoinfo::PackInfo::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::repoinfo::PackInfo where T: 'static + core::marker::Sized
pub fn rustic_core::commands::repoinfo::PackInfo::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::repoinfo::PackInfo where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::PackInfo::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::repoinfo::PackInfo where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::PackInfo::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::repoinfo::PackInfo
pub fn rustic_core::commands::repoinfo::PackInfo::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::repoinfo::PackInfo
pub type rustic_core::commands::repoinfo::PackInfo::Init = T
pub const rustic_core::commands::repoinfo::PackInfo::ALIGN: usize
pub unsafe fn rustic_core::commands::repoinfo::PackInfo::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::repoinfo::PackInfo::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::repoinfo::PackInfo::drop(ptr: usize)
pub unsafe fn rustic_core::commands::repoinfo::PackInfo::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::commands::repoinfo::PackInfo where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::commands::repoinfo::PackInfo
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::repoinfo::PackInfo
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::repoinfo::PackInfo
pub type rustic_core::commands::repoinfo::PackInfo::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::repoinfo::PackInfo where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::repoinfo::PackInfo::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::ParentOptions
pub rustic_core::ParentOptions::force: bool
pub rustic_core::ParentOptions::group_by: core::option::Option<rustic_core::repofile::snapshotfile::SnapshotGroupCriterion>
pub rustic_core::ParentOptions::ignore_ctime: bool
pub rustic_core::ParentOptions::ignore_inode: bool
pub rustic_core::ParentOptions::parent: core::option::Option<alloc::string::String>
impl rustic_core::commands::backup::ParentOptions
pub fn rustic_core::commands::backup::ParentOptions::force(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::backup::ParentOptions::group_by(self, value: impl core::convert::Into<core::option::Option<rustic_core::repofile::snapshotfile::SnapshotGroupCriterion>>) -> Self
pub fn rustic_core::commands::backup::ParentOptions::ignore_ctime(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::backup::ParentOptions::ignore_inode(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::backup::ParentOptions::parent(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
impl rustic_core::commands::backup::ParentOptions
pub fn rustic_core::commands::backup::ParentOptions::get_parent<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedTree>(&self, repo: &rustic_core::repository::Repository<P, S>, snap: &rustic_core::repofile::snapshotfile::SnapshotFile, backup_stdin: bool) -> (core::option::Option<rustic_core::id::Id>, rustic_core::archiver::parent::Parent)
impl core::clone::Clone for rustic_core::commands::backup::ParentOptions
pub fn rustic_core::commands::backup::ParentOptions::clone(&self) -> rustic_core::commands::backup::ParentOptions
impl core::default::Default for rustic_core::commands::backup::ParentOptions
pub fn rustic_core::commands::backup::ParentOptions::default() -> rustic_core::commands::backup::ParentOptions
impl core::fmt::Debug for rustic_core::commands::backup::ParentOptions
pub fn rustic_core::commands::backup::ParentOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::commands::backup::ParentOptions
pub fn rustic_core::commands::backup::ParentOptions::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::commands::backup::ParentOptions where rustic_core::commands::backup::ParentOptions: core::default::Default
pub fn rustic_core::commands::backup::ParentOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::commands::backup::ParentOptions
impl core::marker::Sync for rustic_core::commands::backup::ParentOptions
impl core::marker::Unpin for rustic_core::commands::backup::ParentOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::backup::ParentOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::backup::ParentOptions
impl<T, U> core::convert::Into<U> for rustic_core::commands::backup::ParentOptions where U: core::convert::From<T>
pub fn rustic_core::commands::backup::ParentOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::backup::ParentOptions where U: core::convert::Into<T>
pub type rustic_core::commands::backup::ParentOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::backup::ParentOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::backup::ParentOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::backup::ParentOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::backup::ParentOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::backup::ParentOptions where T: core::clone::Clone
pub type rustic_core::commands::backup::ParentOptions::Owned = T
pub fn rustic_core::commands::backup::ParentOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::backup::ParentOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::backup::ParentOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::backup::ParentOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::backup::ParentOptions where T: core::marker::Sized
pub fn rustic_core::commands::backup::ParentOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::backup::ParentOptions where T: core::marker::Sized
pub fn rustic_core::commands::backup::ParentOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::backup::ParentOptions
pub fn rustic_core::commands::backup::ParentOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::backup::ParentOptions
pub type rustic_core::commands::backup::ParentOptions::Init = T
pub const rustic_core::commands::backup::ParentOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::backup::ParentOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::backup::ParentOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::backup::ParentOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::backup::ParentOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::commands::backup::ParentOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::commands::backup::ParentOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::backup::ParentOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::backup::ParentOptions
pub type rustic_core::commands::backup::ParentOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::backup::ParentOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::backup::ParentOptions::vzip(self) -> V
pub struct rustic_core::PathList(pub alloc::vec::Vec<std::path::PathBuf>)
impl rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::from_string(sources: &str) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::snapshotfile::PathList::from_strings<I>(source: I) -> Self where I: core::iter::traits::collect::IntoIterator, <I as core::iter::traits::collect::IntoIterator>::Item: core::convert::AsRef<str>
pub fn rustic_core::repofile::snapshotfile::PathList::is_empty(&self) -> bool
pub fn rustic_core::repofile::snapshotfile::PathList::len(&self) -> usize
pub fn rustic_core::repofile::snapshotfile::PathList::merge(self) -> Self
pub fn rustic_core::repofile::snapshotfile::PathList::paths(&self) -> alloc::vec::Vec<std::path::PathBuf>
pub fn rustic_core::repofile::snapshotfile::PathList::sanitize(self) -> rustic_core::error::RusticResult<Self>
impl core::fmt::Display for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::clone::Clone for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::clone(&self) -> rustic_core::repofile::snapshotfile::PathList
impl core::cmp::Eq for rustic_core::repofile::snapshotfile::PathList
impl core::cmp::Ord for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::cmp(&self, other: &rustic_core::repofile::snapshotfile::PathList) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::repofile::snapshotfile::PathList> for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::eq(&self, other: &rustic_core::repofile::snapshotfile::PathList) -> bool
impl core::cmp::PartialOrd<rustic_core::repofile::snapshotfile::PathList> for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::partial_cmp(&self, other: &rustic_core::repofile::snapshotfile::PathList) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::default() -> rustic_core::repofile::snapshotfile::PathList
impl core::fmt::Debug for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::repofile::snapshotfile::PathList
impl core::marker::StructuralPartialEq for rustic_core::repofile::snapshotfile::PathList
impl core::marker::Send for rustic_core::repofile::snapshotfile::PathList
impl core::marker::Sync for rustic_core::repofile::snapshotfile::PathList
impl core::marker::Unpin for rustic_core::repofile::snapshotfile::PathList
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::snapshotfile::PathList
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::snapshotfile::PathList
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::snapshotfile::PathList where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::PathList::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::snapshotfile::PathList where U: core::convert::From<T>
pub fn rustic_core::repofile::snapshotfile::PathList::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::snapshotfile::PathList where U: core::convert::Into<T>
pub type rustic_core::repofile::snapshotfile::PathList::Error = core::convert::Infallible
pub fn rustic_core::repofile::snapshotfile::PathList::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::snapshotfile::PathList where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::snapshotfile::PathList::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::snapshotfile::PathList::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::snapshotfile::PathList where T: core::clone::Clone
pub type rustic_core::repofile::snapshotfile::PathList::Owned = T
pub fn rustic_core::repofile::snapshotfile::PathList::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::snapshotfile::PathList::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::repofile::snapshotfile::PathList where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::PathList::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::repofile::snapshotfile::PathList where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::repofile::snapshotfile::PathList::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::PathList::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::PathList::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::repofile::snapshotfile::PathList where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::PathList::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::snapshotfile::PathList where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::PathList::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::snapshotfile::PathList where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::PathList::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::snapshotfile::PathList
pub fn rustic_core::repofile::snapshotfile::PathList::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::snapshotfile::PathList
pub type rustic_core::repofile::snapshotfile::PathList::Init = T
pub const rustic_core::repofile::snapshotfile::PathList::ALIGN: usize
pub unsafe fn rustic_core::repofile::snapshotfile::PathList::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::snapshotfile::PathList::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::snapshotfile::PathList::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::snapshotfile::PathList::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::snapshotfile::PathList
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::snapshotfile::PathList
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::snapshotfile::PathList
pub type rustic_core::repofile::snapshotfile::PathList::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::snapshotfile::PathList where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::snapshotfile::PathList::vzip(self) -> V
pub struct rustic_core::PruneOptions
pub rustic_core::PruneOptions::fast_repack: bool
pub rustic_core::PruneOptions::ignore_snaps: alloc::vec::Vec<rustic_core::id::Id>
pub rustic_core::PruneOptions::instant_delete: bool
pub rustic_core::PruneOptions::keep_delete: humantime::wrapper::Duration
pub rustic_core::PruneOptions::keep_pack: humantime::wrapper::Duration
pub rustic_core::PruneOptions::max_repack: rustic_core::commands::prune::LimitOption
pub rustic_core::PruneOptions::max_unused: rustic_core::commands::prune::LimitOption
pub rustic_core::PruneOptions::no_resize: bool
pub rustic_core::PruneOptions::repack_all: bool
pub rustic_core::PruneOptions::repack_cacheable_only: core::option::Option<bool>
pub rustic_core::PruneOptions::repack_uncompressed: bool
impl rustic_core::commands::prune::PruneOptions
pub fn rustic_core::commands::prune::PruneOptions::fast_repack(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::ignore_snaps(self, value: impl core::convert::Into<alloc::vec::Vec<rustic_core::id::Id>>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::instant_delete(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::keep_delete(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::keep_pack(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::max_repack(self, value: impl core::convert::Into<rustic_core::commands::prune::LimitOption>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::max_unused(self, value: impl core::convert::Into<rustic_core::commands::prune::LimitOption>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::no_resize(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::repack_all(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::repack_cacheable_only(self, value: impl core::convert::Into<core::option::Option<bool>>) -> Self
pub fn rustic_core::commands::prune::PruneOptions::repack_uncompressed(self, value: impl core::convert::Into<bool>) -> Self
impl rustic_core::commands::prune::PruneOptions
pub fn rustic_core::commands::prune::PruneOptions::get_plan<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::Open>(&self, repo: &rustic_core::repository::Repository<P, S>) -> rustic_core::error::RusticResult<rustic_core::commands::prune::PrunePlan>
impl core::default::Default for rustic_core::commands::prune::PruneOptions
pub fn rustic_core::commands::prune::PruneOptions::default() -> Self
impl core::clone::Clone for rustic_core::commands::prune::PruneOptions
pub fn rustic_core::commands::prune::PruneOptions::clone(&self) -> rustic_core::commands::prune::PruneOptions
impl core::fmt::Debug for rustic_core::commands::prune::PruneOptions
pub fn rustic_core::commands::prune::PruneOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::commands::prune::PruneOptions
impl core::marker::Sync for rustic_core::commands::prune::PruneOptions
impl core::marker::Unpin for rustic_core::commands::prune::PruneOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::prune::PruneOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::prune::PruneOptions
impl<T, U> core::convert::Into<U> for rustic_core::commands::prune::PruneOptions where U: core::convert::From<T>
pub fn rustic_core::commands::prune::PruneOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::prune::PruneOptions where U: core::convert::Into<T>
pub type rustic_core::commands::prune::PruneOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::prune::PruneOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::prune::PruneOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::prune::PruneOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::prune::PruneOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::prune::PruneOptions where T: core::clone::Clone
pub type rustic_core::commands::prune::PruneOptions::Owned = T
pub fn rustic_core::commands::prune::PruneOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::prune::PruneOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::prune::PruneOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::prune::PruneOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::prune::PruneOptions where T: core::marker::Sized
pub fn rustic_core::commands::prune::PruneOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::prune::PruneOptions where T: core::marker::Sized
pub fn rustic_core::commands::prune::PruneOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::prune::PruneOptions
pub fn rustic_core::commands::prune::PruneOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::prune::PruneOptions
pub type rustic_core::commands::prune::PruneOptions::Init = T
pub const rustic_core::commands::prune::PruneOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::prune::PruneOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::prune::PruneOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::prune::PruneOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::prune::PruneOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::prune::PruneOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::prune::PruneOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::prune::PruneOptions
pub type rustic_core::commands::prune::PruneOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::prune::PruneOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::prune::PruneOptions::vzip(self) -> V
pub struct rustic_core::PrunePlan
pub rustic_core::PrunePlan::existing_packs: std::collections::hash::map::HashMap<rustic_core::id::Id, u32>
pub rustic_core::PrunePlan::index_files: alloc::vec::Vec<rustic_core::commands::prune::PruneIndex>
pub rustic_core::PrunePlan::repack_candidates: alloc::vec::Vec<(rustic_core::commands::prune::PackInfo, rustic_core::commands::prune::RepackReason, usize, usize)>
pub rustic_core::PrunePlan::stats: rustic_core::commands::prune::PruneStats
pub rustic_core::PrunePlan::time: chrono::datetime::DateTime<chrono::offset::local::Local>
pub rustic_core::PrunePlan::used_ids: std::collections::hash::map::HashMap<rustic_core::id::Id, u8>
impl rustic_core::commands::prune::PrunePlan
pub fn rustic_core::commands::prune::PrunePlan::check(&self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::prune::PrunePlan::check_existing_packs(&mut self) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::prune::PrunePlan::count_used_blobs(&mut self)
pub fn rustic_core::commands::prune::PrunePlan::decide_packs(&mut self, keep_pack: chrono::duration::Duration, keep_delete: chrono::duration::Duration, repack_cacheable_only: bool, repack_uncompressed: bool, repack_all: bool, pack_sizer: &enum_map::EnumMap<rustic_core::blob::BlobType, rustic_core::blob::packer::PackSizer>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::prune::PrunePlan::decide_repack(&mut self, max_repack: &rustic_core::commands::prune::LimitOption, max_unused: &rustic_core::commands::prune::LimitOption, repack_uncompressed: bool, no_resize: bool, pack_sizer: &enum_map::EnumMap<rustic_core::blob::BlobType, rustic_core::blob::packer::PackSizer>)
pub fn rustic_core::commands::prune::PrunePlan::do_prune<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::Open>(self, repo: &rustic_core::repository::Repository<P, S>, opts: &rustic_core::commands::prune::PruneOptions) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::prune::PrunePlan::filter_index_files(&mut self, instant_delete: bool)
pub fn rustic_core::commands::prune::PrunePlan::new(used_ids: std::collections::hash::map::HashMap<rustic_core::id::Id, u8>, existing_packs: std::collections::hash::map::HashMap<rustic_core::id::Id, u32>, index_files: alloc::vec::Vec<(rustic_core::id::Id, rustic_core::repofile::indexfile::IndexFile)>) -> Self
pub fn rustic_core::commands::prune::PrunePlan::repack_packs(&self) -> alloc::vec::Vec<rustic_core::id::Id>
impl core::fmt::Debug for rustic_core::commands::prune::PrunePlan
pub fn rustic_core::commands::prune::PrunePlan::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::commands::prune::PrunePlan
impl core::marker::Sync for rustic_core::commands::prune::PrunePlan
impl core::marker::Unpin for rustic_core::commands::prune::PrunePlan
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::prune::PrunePlan
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::prune::PrunePlan
impl<T, U> core::convert::Into<U> for rustic_core::commands::prune::PrunePlan where U: core::convert::From<T>
pub fn rustic_core::commands::prune::PrunePlan::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::prune::PrunePlan where U: core::convert::Into<T>
pub type rustic_core::commands::prune::PrunePlan::Error = core::convert::Infallible
pub fn rustic_core::commands::prune::PrunePlan::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::prune::PrunePlan where U: core::convert::TryFrom<T>
pub type rustic_core::commands::prune::PrunePlan::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::prune::PrunePlan::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::prune::PrunePlan where T: 'static + core::marker::Sized
pub fn rustic_core::commands::prune::PrunePlan::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::prune::PrunePlan where T: core::marker::Sized
pub fn rustic_core::commands::prune::PrunePlan::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::prune::PrunePlan where T: core::marker::Sized
pub fn rustic_core::commands::prune::PrunePlan::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::prune::PrunePlan
pub fn rustic_core::commands::prune::PrunePlan::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::prune::PrunePlan
pub type rustic_core::commands::prune::PrunePlan::Init = T
pub const rustic_core::commands::prune::PrunePlan::ALIGN: usize
pub unsafe fn rustic_core::commands::prune::PrunePlan::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::prune::PrunePlan::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::prune::PrunePlan::drop(ptr: usize)
pub unsafe fn rustic_core::commands::prune::PrunePlan::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::prune::PrunePlan
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::prune::PrunePlan
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::prune::PrunePlan
pub type rustic_core::commands::prune::PrunePlan::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::prune::PrunePlan where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::prune::PrunePlan::vzip(self) -> V
pub struct rustic_core::PruneStats
pub rustic_core::PruneStats::blobs: enum_map::EnumMap<rustic_core::blob::BlobType, rustic_core::commands::prune::SizeStats>
pub rustic_core::PruneStats::index_files: u64
pub rustic_core::PruneStats::index_files_rebuild: u64
pub rustic_core::PruneStats::packs: rustic_core::commands::prune::PackStats
pub rustic_core::PruneStats::packs_to_delete: rustic_core::commands::prune::DeleteStats
pub rustic_core::PruneStats::packs_unref: u64
pub rustic_core::PruneStats::size: enum_map::EnumMap<rustic_core::blob::BlobType, rustic_core::commands::prune::SizeStats>
pub rustic_core::PruneStats::size_to_delete: rustic_core::commands::prune::DeleteStats
pub rustic_core::PruneStats::size_unref: u64
impl rustic_core::commands::prune::PruneStats
pub fn rustic_core::commands::prune::PruneStats::blobs_sum(&self) -> rustic_core::commands::prune::SizeStats
pub fn rustic_core::commands::prune::PruneStats::size_sum(&self) -> rustic_core::commands::prune::SizeStats
impl core::default::Default for rustic_core::commands::prune::PruneStats
pub fn rustic_core::commands::prune::PruneStats::default() -> rustic_core::commands::prune::PruneStats
impl core::fmt::Debug for rustic_core::commands::prune::PruneStats
pub fn rustic_core::commands::prune::PruneStats::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::commands::prune::PruneStats
impl core::marker::Sync for rustic_core::commands::prune::PruneStats
impl core::marker::Unpin for rustic_core::commands::prune::PruneStats
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::prune::PruneStats
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::prune::PruneStats
impl<T, U> core::convert::Into<U> for rustic_core::commands::prune::PruneStats where U: core::convert::From<T>
pub fn rustic_core::commands::prune::PruneStats::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::prune::PruneStats where U: core::convert::Into<T>
pub type rustic_core::commands::prune::PruneStats::Error = core::convert::Infallible
pub fn rustic_core::commands::prune::PruneStats::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::prune::PruneStats where U: core::convert::TryFrom<T>
pub type rustic_core::commands::prune::PruneStats::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::prune::PruneStats::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::prune::PruneStats where T: 'static + core::marker::Sized
pub fn rustic_core::commands::prune::PruneStats::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::prune::PruneStats where T: core::marker::Sized
pub fn rustic_core::commands::prune::PruneStats::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::prune::PruneStats where T: core::marker::Sized
pub fn rustic_core::commands::prune::PruneStats::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::prune::PruneStats
pub fn rustic_core::commands::prune::PruneStats::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::prune::PruneStats
pub type rustic_core::commands::prune::PruneStats::Init = T
pub const rustic_core::commands::prune::PruneStats::ALIGN: usize
pub unsafe fn rustic_core::commands::prune::PruneStats::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::prune::PruneStats::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::prune::PruneStats::drop(ptr: usize)
pub unsafe fn rustic_core::commands::prune::PruneStats::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::prune::PruneStats
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::prune::PruneStats
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::prune::PruneStats
pub type rustic_core::commands::prune::PruneStats::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::prune::PruneStats where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::prune::PruneStats::vzip(self) -> V
pub struct rustic_core::ReadSourceEntry<O>
pub rustic_core::ReadSourceEntry::node: rustic_core::backend::node::Node
pub rustic_core::ReadSourceEntry::open: core::option::Option<O>
pub rustic_core::ReadSourceEntry::path: std::path::PathBuf
impl<O: core::clone::Clone> core::clone::Clone for rustic_core::backend::ReadSourceEntry<O>
pub fn rustic_core::backend::ReadSourceEntry<O>::clone(&self) -> rustic_core::backend::ReadSourceEntry<O>
impl<O: core::fmt::Debug> core::fmt::Debug for rustic_core::backend::ReadSourceEntry<O>
pub fn rustic_core::backend::ReadSourceEntry<O>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<O> core::marker::Send for rustic_core::backend::ReadSourceEntry<O> where O: core::marker::Send
impl<O> core::marker::Sync for rustic_core::backend::ReadSourceEntry<O> where O: core::marker::Sync
impl<O> core::marker::Unpin for rustic_core::backend::ReadSourceEntry<O> where O: core::marker::Unpin
impl<O> core::panic::unwind_safe::RefUnwindSafe for rustic_core::backend::ReadSourceEntry<O> where O: core::panic::unwind_safe::RefUnwindSafe
impl<O> core::panic::unwind_safe::UnwindSafe for rustic_core::backend::ReadSourceEntry<O> where O: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::backend::ReadSourceEntry<O> where U: core::convert::From<T>
pub fn rustic_core::backend::ReadSourceEntry<O>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::backend::ReadSourceEntry<O> where U: core::convert::Into<T>
pub type rustic_core::backend::ReadSourceEntry<O>::Error = core::convert::Infallible
pub fn rustic_core::backend::ReadSourceEntry<O>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::backend::ReadSourceEntry<O> where U: core::convert::TryFrom<T>
pub type rustic_core::backend::ReadSourceEntry<O>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::backend::ReadSourceEntry<O>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::backend::ReadSourceEntry<O> where T: core::clone::Clone
pub type rustic_core::backend::ReadSourceEntry<O>::Owned = T
pub fn rustic_core::backend::ReadSourceEntry<O>::clone_into(&self, target: &mut T)
pub fn rustic_core::backend::ReadSourceEntry<O>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::backend::ReadSourceEntry<O> where T: 'static + core::marker::Sized
pub fn rustic_core::backend::ReadSourceEntry<O>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::backend::ReadSourceEntry<O> where T: core::marker::Sized
pub fn rustic_core::backend::ReadSourceEntry<O>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::backend::ReadSourceEntry<O> where T: core::marker::Sized
pub fn rustic_core::backend::ReadSourceEntry<O>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::backend::ReadSourceEntry<O>
pub fn rustic_core::backend::ReadSourceEntry<O>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::backend::ReadSourceEntry<O>
pub type rustic_core::backend::ReadSourceEntry<O>::Init = T
pub const rustic_core::backend::ReadSourceEntry<O>::ALIGN: usize
pub unsafe fn rustic_core::backend::ReadSourceEntry<O>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::backend::ReadSourceEntry<O>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::backend::ReadSourceEntry<O>::drop(ptr: usize)
pub unsafe fn rustic_core::backend::ReadSourceEntry<O>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::backend::ReadSourceEntry<O>
impl<T> tracing::instrument::WithSubscriber for rustic_core::backend::ReadSourceEntry<O>
impl<T> typenum::type_operators::Same<T> for rustic_core::backend::ReadSourceEntry<O>
pub type rustic_core::backend::ReadSourceEntry<O>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::backend::ReadSourceEntry<O> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::backend::ReadSourceEntry<O>::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::RepairIndexOptions
pub rustic_core::RepairIndexOptions::read_all: bool
impl rustic_core::commands::repair::index::RepairIndexOptions
pub fn rustic_core::commands::repair::index::RepairIndexOptions::read_all(self, value: impl core::convert::Into<bool>) -> Self
impl rustic_core::commands::repair::index::RepairIndexOptions
pub fn rustic_core::commands::repair::index::RepairIndexOptions::repair<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::Open>(self, repo: &rustic_core::repository::Repository<P, S>, dry_run: bool) -> rustic_core::error::RusticResult<()>
impl core::clone::Clone for rustic_core::commands::repair::index::RepairIndexOptions
pub fn rustic_core::commands::repair::index::RepairIndexOptions::clone(&self) -> rustic_core::commands::repair::index::RepairIndexOptions
impl core::default::Default for rustic_core::commands::repair::index::RepairIndexOptions
pub fn rustic_core::commands::repair::index::RepairIndexOptions::default() -> rustic_core::commands::repair::index::RepairIndexOptions
impl core::fmt::Debug for rustic_core::commands::repair::index::RepairIndexOptions
pub fn rustic_core::commands::repair::index::RepairIndexOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::repair::index::RepairIndexOptions
impl core::marker::Send for rustic_core::commands::repair::index::RepairIndexOptions
impl core::marker::Sync for rustic_core::commands::repair::index::RepairIndexOptions
impl core::marker::Unpin for rustic_core::commands::repair::index::RepairIndexOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::repair::index::RepairIndexOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::repair::index::RepairIndexOptions
impl<T, U> core::convert::Into<U> for rustic_core::commands::repair::index::RepairIndexOptions where U: core::convert::From<T>
pub fn rustic_core::commands::repair::index::RepairIndexOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::repair::index::RepairIndexOptions where U: core::convert::Into<T>
pub type rustic_core::commands::repair::index::RepairIndexOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::repair::index::RepairIndexOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::repair::index::RepairIndexOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::repair::index::RepairIndexOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::repair::index::RepairIndexOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::repair::index::RepairIndexOptions where T: core::clone::Clone
pub type rustic_core::commands::repair::index::RepairIndexOptions::Owned = T
pub fn rustic_core::commands::repair::index::RepairIndexOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::repair::index::RepairIndexOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::repair::index::RepairIndexOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::repair::index::RepairIndexOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::repair::index::RepairIndexOptions where T: core::marker::Sized
pub fn rustic_core::commands::repair::index::RepairIndexOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::repair::index::RepairIndexOptions where T: core::marker::Sized
pub fn rustic_core::commands::repair::index::RepairIndexOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::repair::index::RepairIndexOptions
pub fn rustic_core::commands::repair::index::RepairIndexOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::repair::index::RepairIndexOptions
pub type rustic_core::commands::repair::index::RepairIndexOptions::Init = T
pub const rustic_core::commands::repair::index::RepairIndexOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::repair::index::RepairIndexOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::repair::index::RepairIndexOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::repair::index::RepairIndexOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::repair::index::RepairIndexOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::repair::index::RepairIndexOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::repair::index::RepairIndexOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::repair::index::RepairIndexOptions
pub type rustic_core::commands::repair::index::RepairIndexOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::repair::index::RepairIndexOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::repair::index::RepairIndexOptions::vzip(self) -> V
pub struct rustic_core::RepairSnapshotsOptions
pub rustic_core::RepairSnapshotsOptions::delete: bool
pub rustic_core::RepairSnapshotsOptions::suffix: alloc::string::String
pub rustic_core::RepairSnapshotsOptions::tag: alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>
impl rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::delete(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::suffix(self, value: impl core::convert::Into<alloc::string::String>) -> Self
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::tag(self, value: impl core::convert::Into<alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>>) -> Self
impl rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::repair<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedFull>(&self, repo: &rustic_core::repository::Repository<P, S>, snapshots: alloc::vec::Vec<rustic_core::repofile::snapshotfile::SnapshotFile>, dry_run: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::repair_tree<BE: rustic_core::backend::decrypt::DecryptWriteBackend>(&self, be: &impl rustic_core::index::IndexedBackend, packer: &mut rustic_core::blob::packer::Packer<BE>, id: core::option::Option<rustic_core::id::Id>, replaced: &mut std::collections::hash::map::HashMap<rustic_core::id::Id, (rustic_core::commands::repair::snapshots::Changed, rustic_core::id::Id)>, seen: &mut std::collections::hash::set::HashSet<rustic_core::id::Id>, dry_run: bool) -> rustic_core::error::RusticResult<(rustic_core::commands::repair::snapshots::Changed, rustic_core::id::Id)>
impl core::default::Default for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::default() -> Self
impl core::fmt::Debug for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
impl core::marker::Sync for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
impl core::marker::Unpin for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
impl<T, U> core::convert::Into<U> for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions where U: core::convert::From<T>
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions where U: core::convert::Into<T>
pub type rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions where T: core::marker::Sized
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions where T: core::marker::Sized
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
pub type rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::Init = T
pub const rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions
pub type rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::repair::snapshots::RepairSnapshotsOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::repair::snapshots::RepairSnapshotsOptions::vzip(self) -> V
pub struct rustic_core::RepoFileInfo
pub rustic_core::RepoFileInfo::count: u64
pub rustic_core::RepoFileInfo::size: u64
pub rustic_core::RepoFileInfo::tpe: rustic_core::backend::FileType
impl core::clone::Clone for rustic_core::commands::repoinfo::RepoFileInfo
pub fn rustic_core::commands::repoinfo::RepoFileInfo::clone(&self) -> rustic_core::commands::repoinfo::RepoFileInfo
impl core::fmt::Debug for rustic_core::commands::repoinfo::RepoFileInfo
pub fn rustic_core::commands::repoinfo::RepoFileInfo::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::repoinfo::RepoFileInfo
impl serde::ser::Serialize for rustic_core::commands::repoinfo::RepoFileInfo
pub fn rustic_core::commands::repoinfo::RepoFileInfo::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::commands::repoinfo::RepoFileInfo
pub fn rustic_core::commands::repoinfo::RepoFileInfo::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::commands::repoinfo::RepoFileInfo
impl core::marker::Sync for rustic_core::commands::repoinfo::RepoFileInfo
impl core::marker::Unpin for rustic_core::commands::repoinfo::RepoFileInfo
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::repoinfo::RepoFileInfo
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::repoinfo::RepoFileInfo
impl<T, U> core::convert::Into<U> for rustic_core::commands::repoinfo::RepoFileInfo where U: core::convert::From<T>
pub fn rustic_core::commands::repoinfo::RepoFileInfo::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::repoinfo::RepoFileInfo where U: core::convert::Into<T>
pub type rustic_core::commands::repoinfo::RepoFileInfo::Error = core::convert::Infallible
pub fn rustic_core::commands::repoinfo::RepoFileInfo::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::repoinfo::RepoFileInfo where U: core::convert::TryFrom<T>
pub type rustic_core::commands::repoinfo::RepoFileInfo::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::repoinfo::RepoFileInfo::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::repoinfo::RepoFileInfo where T: core::clone::Clone
pub type rustic_core::commands::repoinfo::RepoFileInfo::Owned = T
pub fn rustic_core::commands::repoinfo::RepoFileInfo::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::repoinfo::RepoFileInfo::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::repoinfo::RepoFileInfo where T: 'static + core::marker::Sized
pub fn rustic_core::commands::repoinfo::RepoFileInfo::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::repoinfo::RepoFileInfo where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::RepoFileInfo::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::repoinfo::RepoFileInfo where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::RepoFileInfo::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::repoinfo::RepoFileInfo
pub fn rustic_core::commands::repoinfo::RepoFileInfo::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::repoinfo::RepoFileInfo
pub type rustic_core::commands::repoinfo::RepoFileInfo::Init = T
pub const rustic_core::commands::repoinfo::RepoFileInfo::ALIGN: usize
pub unsafe fn rustic_core::commands::repoinfo::RepoFileInfo::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::repoinfo::RepoFileInfo::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::repoinfo::RepoFileInfo::drop(ptr: usize)
pub unsafe fn rustic_core::commands::repoinfo::RepoFileInfo::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::commands::repoinfo::RepoFileInfo where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::commands::repoinfo::RepoFileInfo
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::repoinfo::RepoFileInfo
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::repoinfo::RepoFileInfo
pub type rustic_core::commands::repoinfo::RepoFileInfo::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::repoinfo::RepoFileInfo where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::repoinfo::RepoFileInfo::vzip(self) -> V
pub struct rustic_core::RepoFileInfos
pub rustic_core::RepoFileInfos::repo: alloc::vec::Vec<rustic_core::commands::repoinfo::RepoFileInfo>
pub rustic_core::RepoFileInfos::repo_hot: core::option::Option<alloc::vec::Vec<rustic_core::commands::repoinfo::RepoFileInfo>>
impl core::clone::Clone for rustic_core::commands::repoinfo::RepoFileInfos
pub fn rustic_core::commands::repoinfo::RepoFileInfos::clone(&self) -> rustic_core::commands::repoinfo::RepoFileInfos
impl core::default::Default for rustic_core::commands::repoinfo::RepoFileInfos
pub fn rustic_core::commands::repoinfo::RepoFileInfos::default() -> rustic_core::commands::repoinfo::RepoFileInfos
impl core::fmt::Debug for rustic_core::commands::repoinfo::RepoFileInfos
pub fn rustic_core::commands::repoinfo::RepoFileInfos::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::commands::repoinfo::RepoFileInfos
pub fn rustic_core::commands::repoinfo::RepoFileInfos::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::commands::repoinfo::RepoFileInfos
pub fn rustic_core::commands::repoinfo::RepoFileInfos::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::commands::repoinfo::RepoFileInfos
impl core::marker::Sync for rustic_core::commands::repoinfo::RepoFileInfos
impl core::marker::Unpin for rustic_core::commands::repoinfo::RepoFileInfos
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::repoinfo::RepoFileInfos
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::repoinfo::RepoFileInfos
impl<T, U> core::convert::Into<U> for rustic_core::commands::repoinfo::RepoFileInfos where U: core::convert::From<T>
pub fn rustic_core::commands::repoinfo::RepoFileInfos::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::repoinfo::RepoFileInfos where U: core::convert::Into<T>
pub type rustic_core::commands::repoinfo::RepoFileInfos::Error = core::convert::Infallible
pub fn rustic_core::commands::repoinfo::RepoFileInfos::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::repoinfo::RepoFileInfos where U: core::convert::TryFrom<T>
pub type rustic_core::commands::repoinfo::RepoFileInfos::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::repoinfo::RepoFileInfos::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::repoinfo::RepoFileInfos where T: core::clone::Clone
pub type rustic_core::commands::repoinfo::RepoFileInfos::Owned = T
pub fn rustic_core::commands::repoinfo::RepoFileInfos::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::repoinfo::RepoFileInfos::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::repoinfo::RepoFileInfos where T: 'static + core::marker::Sized
pub fn rustic_core::commands::repoinfo::RepoFileInfos::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::repoinfo::RepoFileInfos where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::RepoFileInfos::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::repoinfo::RepoFileInfos where T: core::marker::Sized
pub fn rustic_core::commands::repoinfo::RepoFileInfos::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::repoinfo::RepoFileInfos
pub fn rustic_core::commands::repoinfo::RepoFileInfos::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::repoinfo::RepoFileInfos
pub type rustic_core::commands::repoinfo::RepoFileInfos::Init = T
pub const rustic_core::commands::repoinfo::RepoFileInfos::ALIGN: usize
pub unsafe fn rustic_core::commands::repoinfo::RepoFileInfos::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::repoinfo::RepoFileInfos::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::repoinfo::RepoFileInfos::drop(ptr: usize)
pub unsafe fn rustic_core::commands::repoinfo::RepoFileInfos::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::commands::repoinfo::RepoFileInfos where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::commands::repoinfo::RepoFileInfos
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::repoinfo::RepoFileInfos
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::repoinfo::RepoFileInfos
pub type rustic_core::commands::repoinfo::RepoFileInfos::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::repoinfo::RepoFileInfos where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::repoinfo::RepoFileInfos::vzip(self) -> V
pub struct rustic_core::Repository<P, S>
pub rustic_core::Repository::be: rustic_core::backend::hotcold::HotColdBackend<rustic_core::backend::choose::ChooseBackend>
pub rustic_core::Repository::be_hot: core::option::Option<rustic_core::backend::choose::ChooseBackend>
pub rustic_core::Repository::name: alloc::string::String
pub rustic_core::Repository::opts: rustic_core::repository::RepositoryOptions
pub rustic_core::Repository::pb: P
pub rustic_core::Repository::status: S
impl rustic_core::repository::Repository<rustic_core::progress::NoProgressBars, ()>
pub fn rustic_core::repository::Repository<rustic_core::progress::NoProgressBars, ()>::new(opts: &rustic_core::repository::RepositoryOptions) -> rustic_core::error::RusticResult<Self>
impl<P, S: rustic_core::repository::IndexedFull> rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::get_index_entry(&self, tpe: rustic_core::blob::BlobType, id: &rustic_core::id::Id) -> rustic_core::error::RusticResult<rustic_core::index::IndexEntry>
impl<P, S: rustic_core::repository::Open> rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::add_key(&self, pass: &str, opts: &rustic_core::commands::key::KeyOptions) -> rustic_core::error::RusticResult<rustic_core::id::Id>
pub fn rustic_core::repository::Repository<P, S>::apply_config(&self, opts: &rustic_core::commands::config::ConfigOptions) -> rustic_core::error::RusticResult<bool>
pub fn rustic_core::repository::Repository<P, S>::cat_file(&self, tpe: rustic_core::backend::FileType, id: &str) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::repository::Repository<P, S>::config(&self) -> &rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repository::Repository<P, S>::dbe(&self) -> &<S as rustic_core::repository::Open>::DBE
impl<P, S> rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::config_id(&self) -> rustic_core::error::RusticResult<core::option::Option<rustic_core::id::Id>>
pub fn rustic_core::repository::Repository<P, S>::init(self, key_opts: &rustic_core::commands::key::KeyOptions, config_opts: &rustic_core::commands::config::ConfigOptions) -> rustic_core::error::RusticResult<rustic_core::repository::Repository<P, rustic_core::repository::OpenStatus>>
pub fn rustic_core::repository::Repository<P, S>::init_with_config(self, password: &str, key_opts: &rustic_core::commands::key::KeyOptions, config: rustic_core::repofile::configfile::ConfigFile) -> rustic_core::error::RusticResult<rustic_core::repository::Repository<P, rustic_core::repository::OpenStatus>>
pub fn rustic_core::repository::Repository<P, S>::init_with_password(self, pass: &str, key_opts: &rustic_core::commands::key::KeyOptions, config_opts: &rustic_core::commands::config::ConfigOptions) -> rustic_core::error::RusticResult<rustic_core::repository::Repository<P, rustic_core::repository::OpenStatus>>
pub fn rustic_core::repository::Repository<P, S>::list(&self, tpe: rustic_core::backend::FileType) -> rustic_core::error::RusticResult<impl core::iter::traits::iterator::Iterator<Item = rustic_core::id::Id>>
pub fn rustic_core::repository::Repository<P, S>::open(self) -> rustic_core::error::RusticResult<rustic_core::repository::Repository<P, rustic_core::repository::OpenStatus>>
pub fn rustic_core::repository::Repository<P, S>::open_raw(self, key: rustic_core::crypto::aespoly1305::Key, config: rustic_core::repofile::configfile::ConfigFile) -> rustic_core::error::RusticResult<rustic_core::repository::Repository<P, rustic_core::repository::OpenStatus>>
pub fn rustic_core::repository::Repository<P, S>::open_with_password(self, password: &str) -> rustic_core::error::RusticResult<rustic_core::repository::Repository<P, rustic_core::repository::OpenStatus>>
pub fn rustic_core::repository::Repository<P, S>::password(&self) -> rustic_core::error::RusticResult<core::option::Option<alloc::string::String>>
impl<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedFull> rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::cat_blob(&self, tpe: rustic_core::blob::BlobType, id: &str) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::repository::Repository<P, S>::copy<'a, Q: rustic_core::progress::ProgressBars, R: rustic_core::repository::IndexedIds>(&self, repo_dest: &rustic_core::repository::Repository<Q, R>, snapshots: impl core::iter::traits::collect::IntoIterator<Item = &'a rustic_core::repofile::snapshotfile::SnapshotFile>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repository::Repository<P, S>::dump(&self, node: &rustic_core::backend::node::Node, w: &mut impl std::io::Write) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repository::Repository<P, S>::prepare_restore(&self, opts: &rustic_core::commands::restore::RestoreOptions, node_streamer: impl core::iter::traits::iterator::Iterator<Item = rustic_core::error::RusticResult<(std::path::PathBuf, rustic_core::backend::node::Node)>>, dest: &rustic_core::backend::local::LocalDestination, dry_run: bool) -> rustic_core::error::RusticResult<rustic_core::commands::restore::RestorePlan>
pub fn rustic_core::repository::Repository<P, S>::repair_snapshots(&self, opts: &rustic_core::commands::repair::snapshots::RepairSnapshotsOptions, snapshots: alloc::vec::Vec<rustic_core::repofile::snapshotfile::SnapshotFile>, dry_run: bool) -> rustic_core::error::RusticResult<()>
impl<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedIds> rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::backup(&self, opts: &rustic_core::commands::backup::BackupOptions, source: rustic_core::repofile::snapshotfile::PathList, snap: rustic_core::repofile::snapshotfile::SnapshotFile) -> rustic_core::error::RusticResult<rustic_core::repofile::snapshotfile::SnapshotFile>
impl<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedTree> rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::cat_tree(&self, snap: &str, sn_filter: impl core::ops::function::FnMut(&rustic_core::repofile::snapshotfile::SnapshotFile) -> bool + core::marker::Send + core::marker::Sync) -> rustic_core::error::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::repository::Repository<P, S>::ls(&self, node: &rustic_core::backend::node::Node, ls_opts: &rustic_core::blob::tree::TreeStreamerOptions) -> rustic_core::error::RusticResult<impl core::iter::traits::iterator::Iterator<Item = rustic_core::error::RusticResult<(std::path::PathBuf, rustic_core::backend::node::Node)>> + core::clone::Clone>
pub fn rustic_core::repository::Repository<P, S>::merge_snapshots(&self, snaps: &[rustic_core::repofile::snapshotfile::SnapshotFile], cmp: &impl core::ops::function::Fn(&rustic_core::backend::node::Node, &rustic_core::backend::node::Node) -> core::cmp::Ordering, snap: rustic_core::repofile::snapshotfile::SnapshotFile) -> rustic_core::error::RusticResult<rustic_core::repofile::snapshotfile::SnapshotFile>
pub fn rustic_core::repository::Repository<P, S>::merge_trees(&self, trees: &[rustic_core::id::Id], cmp: &impl core::ops::function::Fn(&rustic_core::backend::node::Node, &rustic_core::backend::node::Node) -> core::cmp::Ordering, summary: &mut rustic_core::repofile::snapshotfile::SnapshotSummary) -> rustic_core::error::RusticResult<rustic_core::id::Id>
pub fn rustic_core::repository::Repository<P, S>::node_from_snapshot_and_path(&self, snap: &rustic_core::repofile::snapshotfile::SnapshotFile, path: &str) -> rustic_core::error::RusticResult<rustic_core::backend::node::Node>
pub fn rustic_core::repository::Repository<P, S>::node_from_snapshot_path(&self, snap_path: &str, filter: impl core::ops::function::FnMut(&rustic_core::repofile::snapshotfile::SnapshotFile) -> bool + core::marker::Send + core::marker::Sync) -> rustic_core::error::RusticResult<rustic_core::backend::node::Node>
pub fn rustic_core::repository::Repository<P, S>::restore(&self, restore_infos: rustic_core::commands::restore::RestorePlan, opts: &rustic_core::commands::restore::RestoreOptions, node_streamer: impl core::iter::traits::iterator::Iterator<Item = rustic_core::error::RusticResult<(std::path::PathBuf, rustic_core::backend::node::Node)>>, dest: &rustic_core::backend::local::LocalDestination) -> rustic_core::error::RusticResult<()>
impl<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::Open> rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::check(&self, opts: rustic_core::commands::check::CheckOptions) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repository::Repository<P, S>::delete_snapshots(&self, ids: &[rustic_core::id::Id]) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repository::Repository<P, S>::get_all_snapshots(&self) -> rustic_core::error::RusticResult<alloc::vec::Vec<rustic_core::repofile::snapshotfile::SnapshotFile>>
pub fn rustic_core::repository::Repository<P, S>::get_forget_snapshots(&self, keep: &rustic_core::commands::forget::KeepOptions, group_by: rustic_core::repofile::snapshotfile::SnapshotGroupCriterion, filter: impl core::ops::function::FnMut(&rustic_core::repofile::snapshotfile::SnapshotFile) -> bool) -> rustic_core::error::RusticResult<rustic_core::commands::forget::ForgetGroups>
pub fn rustic_core::repository::Repository<P, S>::get_matching_snapshots(&self, filter: impl core::ops::function::FnMut(&rustic_core::repofile::snapshotfile::SnapshotFile) -> bool) -> rustic_core::error::RusticResult<alloc::vec::Vec<rustic_core::repofile::snapshotfile::SnapshotFile>>
pub fn rustic_core::repository::Repository<P, S>::get_snapshot_from_str(&self, id: &str, filter: impl core::ops::function::FnMut(&rustic_core::repofile::snapshotfile::SnapshotFile) -> bool + core::marker::Send + core::marker::Sync) -> rustic_core::error::RusticResult<rustic_core::repofile::snapshotfile::SnapshotFile>
pub fn rustic_core::repository::Repository<P, S>::get_snapshot_group(&self, ids: &[alloc::string::String], group_by: rustic_core::repofile::snapshotfile::SnapshotGroupCriterion, filter: impl core::ops::function::FnMut(&rustic_core::repofile::snapshotfile::SnapshotFile) -> bool) -> rustic_core::error::RusticResult<alloc::vec::Vec<(rustic_core::repofile::snapshotfile::SnapshotGroup, alloc::vec::Vec<rustic_core::repofile::snapshotfile::SnapshotFile>)>>
pub fn rustic_core::repository::Repository<P, S>::get_snapshots<T: core::convert::AsRef<str>>(&self, ids: &[T]) -> rustic_core::error::RusticResult<alloc::vec::Vec<rustic_core::repofile::snapshotfile::SnapshotFile>>
pub fn rustic_core::repository::Repository<P, S>::infos_index(&self) -> rustic_core::error::RusticResult<rustic_core::commands::repoinfo::IndexInfos>
pub fn rustic_core::repository::Repository<P, S>::prune_plan(&self, opts: &rustic_core::commands::prune::PruneOptions) -> rustic_core::error::RusticResult<rustic_core::commands::prune::PrunePlan>
pub fn rustic_core::repository::Repository<P, S>::relevant_copy_snapshots(&self, filter: impl core::ops::function::FnMut(&rustic_core::repofile::snapshotfile::SnapshotFile) -> bool, snaps: &[rustic_core::repofile::snapshotfile::SnapshotFile]) -> rustic_core::error::RusticResult<alloc::vec::Vec<rustic_core::commands::copy::CopySnapshot>>
pub fn rustic_core::repository::Repository<P, S>::repair_index(&self, opts: &rustic_core::commands::repair::index::RepairIndexOptions, dry_run: bool) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repository::Repository<P, S>::save_snapshots(&self, snaps: alloc::vec::Vec<rustic_core::repofile::snapshotfile::SnapshotFile>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repository::Repository<P, S>::stream_files<F: rustic_core::repofile::RepoFile>(&self) -> rustic_core::error::RusticResult<impl core::iter::traits::iterator::Iterator<Item = rustic_core::error::RusticResult<(rustic_core::id::Id, F)>>>
pub fn rustic_core::repository::Repository<P, S>::to_indexed(self) -> rustic_core::error::RusticResult<rustic_core::repository::Repository<P, rustic_core::repository::IndexedStatus<rustic_core::repository::FullIndex, S>>>
pub fn rustic_core::repository::Repository<P, S>::to_indexed_ids(self) -> rustic_core::error::RusticResult<rustic_core::repository::Repository<P, rustic_core::repository::IndexedStatus<rustic_core::repository::IdIndex, S>>>
impl<P: rustic_core::progress::ProgressBars, S> rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::infos_files(&self) -> rustic_core::error::RusticResult<rustic_core::commands::repoinfo::RepoFileInfos>
pub fn rustic_core::repository::Repository<P, S>::warm_up(&self, packs: impl core::iter::traits::exact_size::ExactSizeIterator<Item = rustic_core::id::Id>) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repository::Repository<P, S>::warm_up_wait(&self, packs: impl core::iter::traits::exact_size::ExactSizeIterator<Item = rustic_core::id::Id>) -> rustic_core::error::RusticResult<()>
impl<P> rustic_core::repository::Repository<P, ()>
pub fn rustic_core::repository::Repository<P, ()>::new_with_progress(opts: &rustic_core::repository::RepositoryOptions, pb: P) -> rustic_core::error::RusticResult<Self>
impl<P, S: rustic_core::repository::IndexedTree> rustic_core::repository::IndexedTree for rustic_core::repository::Repository<P, S>
pub type rustic_core::repository::Repository<P, S>::I = <S as rustic_core::repository::IndexedTree>::I
pub fn rustic_core::repository::Repository<P, S>::index(&self) -> &Self::I
impl<P, S: rustic_core::repository::Open> rustic_core::repository::Open for rustic_core::repository::Repository<P, S>
pub type rustic_core::repository::Repository<P, S>::DBE = <S as rustic_core::repository::Open>::DBE
pub fn rustic_core::repository::Repository<P, S>::cache(&self) -> core::option::Option<&rustic_core::backend::cache::Cache>
pub fn rustic_core::repository::Repository<P, S>::config(&self) -> &rustic_core::repofile::configfile::ConfigFile
pub fn rustic_core::repository::Repository<P, S>::dbe(&self) -> &Self::DBE
pub fn rustic_core::repository::Repository<P, S>::key(&self) -> &rustic_core::crypto::aespoly1305::Key
impl<P: core::clone::Clone, S: core::clone::Clone> core::clone::Clone for rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::clone(&self) -> rustic_core::repository::Repository<P, S>
impl<P: core::fmt::Debug, S: core::fmt::Debug> core::fmt::Debug for rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<P, S> core::marker::Send for rustic_core::repository::Repository<P, S> where P: core::marker::Send, S: core::marker::Send
impl<P, S> core::marker::Sync for rustic_core::repository::Repository<P, S> where P: core::marker::Sync, S: core::marker::Sync
impl<P, S> core::marker::Unpin for rustic_core::repository::Repository<P, S> where P: core::marker::Unpin, S: core::marker::Unpin
impl<P, S> !core::panic::unwind_safe::RefUnwindSafe for rustic_core::repository::Repository<P, S>
impl<P, S> !core::panic::unwind_safe::UnwindSafe for rustic_core::repository::Repository<P, S>
impl<T, U> core::convert::Into<U> for rustic_core::repository::Repository<P, S> where U: core::convert::From<T>
pub fn rustic_core::repository::Repository<P, S>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repository::Repository<P, S> where U: core::convert::Into<T>
pub type rustic_core::repository::Repository<P, S>::Error = core::convert::Infallible
pub fn rustic_core::repository::Repository<P, S>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repository::Repository<P, S> where U: core::convert::TryFrom<T>
pub type rustic_core::repository::Repository<P, S>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repository::Repository<P, S>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repository::Repository<P, S> where T: core::clone::Clone
pub type rustic_core::repository::Repository<P, S>::Owned = T
pub fn rustic_core::repository::Repository<P, S>::clone_into(&self, target: &mut T)
pub fn rustic_core::repository::Repository<P, S>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repository::Repository<P, S> where T: 'static + core::marker::Sized
pub fn rustic_core::repository::Repository<P, S>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repository::Repository<P, S> where T: core::marker::Sized
pub fn rustic_core::repository::Repository<P, S>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repository::Repository<P, S> where T: core::marker::Sized
pub fn rustic_core::repository::Repository<P, S>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repository::Repository<P, S>
pub fn rustic_core::repository::Repository<P, S>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repository::Repository<P, S>
pub type rustic_core::repository::Repository<P, S>::Init = T
pub const rustic_core::repository::Repository<P, S>::ALIGN: usize
pub unsafe fn rustic_core::repository::Repository<P, S>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repository::Repository<P, S>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repository::Repository<P, S>::drop(ptr: usize)
pub unsafe fn rustic_core::repository::Repository<P, S>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repository::Repository<P, S>
impl<T> tracing::instrument::WithSubscriber for rustic_core::repository::Repository<P, S>
impl<T> typenum::type_operators::Same<T> for rustic_core::repository::Repository<P, S>
pub type rustic_core::repository::Repository<P, S>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repository::Repository<P, S> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repository::Repository<P, S>::vzip(self) -> V
pub struct rustic_core::RepositoryOptions
pub rustic_core::RepositoryOptions::cache_dir: core::option::Option<std::path::PathBuf>
pub rustic_core::RepositoryOptions::no_cache: bool
pub rustic_core::RepositoryOptions::options: std::collections::hash::map::HashMap<alloc::string::String, alloc::string::String>
pub rustic_core::RepositoryOptions::password: core::option::Option<alloc::string::String>
pub rustic_core::RepositoryOptions::password_command: core::option::Option<alloc::string::String>
pub rustic_core::RepositoryOptions::password_file: core::option::Option<std::path::PathBuf>
pub rustic_core::RepositoryOptions::repo_hot: core::option::Option<alloc::string::String>
pub rustic_core::RepositoryOptions::repository: core::option::Option<alloc::string::String>
pub rustic_core::RepositoryOptions::warm_up: bool
pub rustic_core::RepositoryOptions::warm_up_command: core::option::Option<alloc::string::String>
pub rustic_core::RepositoryOptions::warm_up_wait: core::option::Option<humantime::wrapper::Duration>
impl rustic_core::repository::RepositoryOptions
pub fn rustic_core::repository::RepositoryOptions::cache_dir(self, value: impl core::convert::Into<std::path::PathBuf>) -> Self
pub fn rustic_core::repository::RepositoryOptions::no_cache(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::repository::RepositoryOptions::options(self, value: impl core::convert::Into<std::collections::hash::map::HashMap<alloc::string::String, alloc::string::String>>) -> Self
pub fn rustic_core::repository::RepositoryOptions::password(self, value: impl core::convert::Into<alloc::string::String>) -> Self
pub fn rustic_core::repository::RepositoryOptions::password_command(self, value: impl core::convert::Into<alloc::string::String>) -> Self
pub fn rustic_core::repository::RepositoryOptions::password_file(self, value: impl core::convert::Into<std::path::PathBuf>) -> Self
pub fn rustic_core::repository::RepositoryOptions::repo_hot(self, value: impl core::convert::Into<alloc::string::String>) -> Self
pub fn rustic_core::repository::RepositoryOptions::repository(self, value: impl core::convert::Into<alloc::string::String>) -> Self
pub fn rustic_core::repository::RepositoryOptions::warm_up(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::repository::RepositoryOptions::warm_up_command(self, value: impl core::convert::Into<alloc::string::String>) -> Self
pub fn rustic_core::repository::RepositoryOptions::warm_up_wait(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
impl rustic_core::repository::RepositoryOptions
pub fn rustic_core::repository::RepositoryOptions::to_repository(&self) -> rustic_core::error::RusticResult<rustic_core::repository::Repository<rustic_core::progress::NoProgressBars, ()>>
impl core::clone::Clone for rustic_core::repository::RepositoryOptions
pub fn rustic_core::repository::RepositoryOptions::clone(&self) -> rustic_core::repository::RepositoryOptions
impl core::default::Default for rustic_core::repository::RepositoryOptions
pub fn rustic_core::repository::RepositoryOptions::default() -> rustic_core::repository::RepositoryOptions
impl core::fmt::Debug for rustic_core::repository::RepositoryOptions
pub fn rustic_core::repository::RepositoryOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repository::RepositoryOptions
pub fn rustic_core::repository::RepositoryOptions::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repository::RepositoryOptions where rustic_core::repository::RepositoryOptions: core::default::Default
pub fn rustic_core::repository::RepositoryOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repository::RepositoryOptions
impl core::marker::Sync for rustic_core::repository::RepositoryOptions
impl core::marker::Unpin for rustic_core::repository::RepositoryOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repository::RepositoryOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repository::RepositoryOptions
impl<T, U> core::convert::Into<U> for rustic_core::repository::RepositoryOptions where U: core::convert::From<T>
pub fn rustic_core::repository::RepositoryOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repository::RepositoryOptions where U: core::convert::Into<T>
pub type rustic_core::repository::RepositoryOptions::Error = core::convert::Infallible
pub fn rustic_core::repository::RepositoryOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repository::RepositoryOptions where U: core::convert::TryFrom<T>
pub type rustic_core::repository::RepositoryOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repository::RepositoryOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repository::RepositoryOptions where T: core::clone::Clone
pub type rustic_core::repository::RepositoryOptions::Owned = T
pub fn rustic_core::repository::RepositoryOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::repository::RepositoryOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repository::RepositoryOptions where T: 'static + core::marker::Sized
pub fn rustic_core::repository::RepositoryOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repository::RepositoryOptions where T: core::marker::Sized
pub fn rustic_core::repository::RepositoryOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repository::RepositoryOptions where T: core::marker::Sized
pub fn rustic_core::repository::RepositoryOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repository::RepositoryOptions
pub fn rustic_core::repository::RepositoryOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repository::RepositoryOptions
pub type rustic_core::repository::RepositoryOptions::Init = T
pub const rustic_core::repository::RepositoryOptions::ALIGN: usize
pub unsafe fn rustic_core::repository::RepositoryOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repository::RepositoryOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repository::RepositoryOptions::drop(ptr: usize)
pub unsafe fn rustic_core::repository::RepositoryOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repository::RepositoryOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repository::RepositoryOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::repository::RepositoryOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::repository::RepositoryOptions
pub type rustic_core::repository::RepositoryOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repository::RepositoryOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repository::RepositoryOptions::vzip(self) -> V
pub struct rustic_core::RestoreOptions
pub rustic_core::RestoreOptions::delete: bool
pub rustic_core::RestoreOptions::no_ownership: bool
pub rustic_core::RestoreOptions::numeric_id: bool
pub rustic_core::RestoreOptions::verify_existing: bool
impl rustic_core::commands::restore::RestoreOptions
pub fn rustic_core::commands::restore::RestoreOptions::collect_and_prepare<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedFull>(self, repo: &rustic_core::repository::Repository<P, S>, node_streamer: impl core::iter::traits::iterator::Iterator<Item = rustic_core::error::RusticResult<(std::path::PathBuf, rustic_core::backend::node::Node)>>, dest: &rustic_core::backend::local::LocalDestination, dry_run: bool) -> rustic_core::error::RusticResult<rustic_core::commands::restore::RestorePlan>
pub fn rustic_core::commands::restore::RestoreOptions::restore<P: rustic_core::progress::ProgressBars, S: rustic_core::repository::IndexedTree>(self, file_infos: rustic_core::commands::restore::RestorePlan, repo: &rustic_core::repository::Repository<P, S>, node_streamer: impl core::iter::traits::iterator::Iterator<Item = rustic_core::error::RusticResult<(std::path::PathBuf, rustic_core::backend::node::Node)>>, dest: &rustic_core::backend::local::LocalDestination) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::restore::RestoreOptions::restore_metadata(self, node_streamer: impl core::iter::traits::iterator::Iterator<Item = rustic_core::error::RusticResult<(std::path::PathBuf, rustic_core::backend::node::Node)>>, dest: &rustic_core::backend::local::LocalDestination) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::commands::restore::RestoreOptions::set_metadata(self, dest: &rustic_core::backend::local::LocalDestination, path: &std::path::PathBuf, node: &rustic_core::backend::node::Node)
impl rustic_core::commands::restore::RestoreOptions
pub fn rustic_core::commands::restore::RestoreOptions::delete(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::restore::RestoreOptions::no_ownership(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::restore::RestoreOptions::numeric_id(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::commands::restore::RestoreOptions::verify_existing(self, value: impl core::convert::Into<bool>) -> Self
impl core::clone::Clone for rustic_core::commands::restore::RestoreOptions
pub fn rustic_core::commands::restore::RestoreOptions::clone(&self) -> rustic_core::commands::restore::RestoreOptions
impl core::default::Default for rustic_core::commands::restore::RestoreOptions
pub fn rustic_core::commands::restore::RestoreOptions::default() -> rustic_core::commands::restore::RestoreOptions
impl core::fmt::Debug for rustic_core::commands::restore::RestoreOptions
pub fn rustic_core::commands::restore::RestoreOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::restore::RestoreOptions
impl core::marker::Send for rustic_core::commands::restore::RestoreOptions
impl core::marker::Sync for rustic_core::commands::restore::RestoreOptions
impl core::marker::Unpin for rustic_core::commands::restore::RestoreOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::restore::RestoreOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::restore::RestoreOptions
impl<T, U> core::convert::Into<U> for rustic_core::commands::restore::RestoreOptions where U: core::convert::From<T>
pub fn rustic_core::commands::restore::RestoreOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::restore::RestoreOptions where U: core::convert::Into<T>
pub type rustic_core::commands::restore::RestoreOptions::Error = core::convert::Infallible
pub fn rustic_core::commands::restore::RestoreOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::restore::RestoreOptions where U: core::convert::TryFrom<T>
pub type rustic_core::commands::restore::RestoreOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::restore::RestoreOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::restore::RestoreOptions where T: core::clone::Clone
pub type rustic_core::commands::restore::RestoreOptions::Owned = T
pub fn rustic_core::commands::restore::RestoreOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::restore::RestoreOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::restore::RestoreOptions where T: 'static + core::marker::Sized
pub fn rustic_core::commands::restore::RestoreOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::restore::RestoreOptions where T: core::marker::Sized
pub fn rustic_core::commands::restore::RestoreOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::restore::RestoreOptions where T: core::marker::Sized
pub fn rustic_core::commands::restore::RestoreOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::restore::RestoreOptions
pub fn rustic_core::commands::restore::RestoreOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::restore::RestoreOptions
pub type rustic_core::commands::restore::RestoreOptions::Init = T
pub const rustic_core::commands::restore::RestoreOptions::ALIGN: usize
pub unsafe fn rustic_core::commands::restore::RestoreOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::restore::RestoreOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::restore::RestoreOptions::drop(ptr: usize)
pub unsafe fn rustic_core::commands::restore::RestoreOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::restore::RestoreOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::restore::RestoreOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::restore::RestoreOptions
pub type rustic_core::commands::restore::RestoreOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::restore::RestoreOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::restore::RestoreOptions::vzip(self) -> V
pub struct rustic_core::RestorePlan
pub rustic_core::RestorePlan::file_lengths: alloc::vec::Vec<u64>
pub rustic_core::RestorePlan::matched_size: u64
pub rustic_core::RestorePlan::names: alloc::vec::Vec<std::path::PathBuf>
pub rustic_core::RestorePlan::r: alloc::collections::btree::map::BTreeMap<(rustic_core::id::Id, rustic_core::commands::restore::BlobLocation), alloc::vec::Vec<rustic_core::commands::restore::FileLocation>>
pub rustic_core::RestorePlan::restore_size: u64
pub rustic_core::RestorePlan::stats: rustic_core::commands::restore::RestoreStats
impl rustic_core::commands::restore::RestorePlan
pub fn rustic_core::commands::restore::RestorePlan::add_file<P, S: rustic_core::repository::IndexedFull>(&mut self, dest: &rustic_core::backend::local::LocalDestination, file: &rustic_core::backend::node::Node, name: std::path::PathBuf, repo: &rustic_core::repository::Repository<P, S>, ignore_mtime: bool) -> rustic_core::error::RusticResult<rustic_core::commands::restore::AddFileResult>
pub fn rustic_core::commands::restore::RestorePlan::to_packs(&self) -> alloc::vec::Vec<rustic_core::id::Id>
impl core::default::Default for rustic_core::commands::restore::RestorePlan
pub fn rustic_core::commands::restore::RestorePlan::default() -> rustic_core::commands::restore::RestorePlan
impl core::fmt::Debug for rustic_core::commands::restore::RestorePlan
pub fn rustic_core::commands::restore::RestorePlan::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::commands::restore::RestorePlan
impl core::marker::Sync for rustic_core::commands::restore::RestorePlan
impl core::marker::Unpin for rustic_core::commands::restore::RestorePlan
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::restore::RestorePlan
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::restore::RestorePlan
impl<T, U> core::convert::Into<U> for rustic_core::commands::restore::RestorePlan where U: core::convert::From<T>
pub fn rustic_core::commands::restore::RestorePlan::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::restore::RestorePlan where U: core::convert::Into<T>
pub type rustic_core::commands::restore::RestorePlan::Error = core::convert::Infallible
pub fn rustic_core::commands::restore::RestorePlan::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::restore::RestorePlan where U: core::convert::TryFrom<T>
pub type rustic_core::commands::restore::RestorePlan::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::restore::RestorePlan::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::commands::restore::RestorePlan where T: 'static + core::marker::Sized
pub fn rustic_core::commands::restore::RestorePlan::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::restore::RestorePlan where T: core::marker::Sized
pub fn rustic_core::commands::restore::RestorePlan::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::restore::RestorePlan where T: core::marker::Sized
pub fn rustic_core::commands::restore::RestorePlan::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::restore::RestorePlan
pub fn rustic_core::commands::restore::RestorePlan::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::restore::RestorePlan
pub type rustic_core::commands::restore::RestorePlan::Init = T
pub const rustic_core::commands::restore::RestorePlan::ALIGN: usize
pub unsafe fn rustic_core::commands::restore::RestorePlan::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::restore::RestorePlan::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::restore::RestorePlan::drop(ptr: usize)
pub unsafe fn rustic_core::commands::restore::RestorePlan::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::restore::RestorePlan
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::restore::RestorePlan
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::restore::RestorePlan
pub type rustic_core::commands::restore::RestorePlan::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::restore::RestorePlan where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::restore::RestorePlan::vzip(self) -> V
pub struct rustic_core::RestoreStats
pub rustic_core::RestoreStats::dirs: rustic_core::commands::restore::FileDirStats
pub rustic_core::RestoreStats::files: rustic_core::commands::restore::FileDirStats
impl core::clone::Clone for rustic_core::commands::restore::RestoreStats
pub fn rustic_core::commands::restore::RestoreStats::clone(&self) -> rustic_core::commands::restore::RestoreStats
impl core::default::Default for rustic_core::commands::restore::RestoreStats
pub fn rustic_core::commands::restore::RestoreStats::default() -> rustic_core::commands::restore::RestoreStats
impl core::fmt::Debug for rustic_core::commands::restore::RestoreStats
pub fn rustic_core::commands::restore::RestoreStats::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::commands::restore::RestoreStats
impl core::marker::Send for rustic_core::commands::restore::RestoreStats
impl core::marker::Sync for rustic_core::commands::restore::RestoreStats
impl core::marker::Unpin for rustic_core::commands::restore::RestoreStats
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::commands::restore::RestoreStats
impl core::panic::unwind_safe::UnwindSafe for rustic_core::commands::restore::RestoreStats
impl<T, U> core::convert::Into<U> for rustic_core::commands::restore::RestoreStats where U: core::convert::From<T>
pub fn rustic_core::commands::restore::RestoreStats::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::commands::restore::RestoreStats where U: core::convert::Into<T>
pub type rustic_core::commands::restore::RestoreStats::Error = core::convert::Infallible
pub fn rustic_core::commands::restore::RestoreStats::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::commands::restore::RestoreStats where U: core::convert::TryFrom<T>
pub type rustic_core::commands::restore::RestoreStats::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::commands::restore::RestoreStats::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::commands::restore::RestoreStats where T: core::clone::Clone
pub type rustic_core::commands::restore::RestoreStats::Owned = T
pub fn rustic_core::commands::restore::RestoreStats::clone_into(&self, target: &mut T)
pub fn rustic_core::commands::restore::RestoreStats::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::commands::restore::RestoreStats where T: 'static + core::marker::Sized
pub fn rustic_core::commands::restore::RestoreStats::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::commands::restore::RestoreStats where T: core::marker::Sized
pub fn rustic_core::commands::restore::RestoreStats::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::commands::restore::RestoreStats where T: core::marker::Sized
pub fn rustic_core::commands::restore::RestoreStats::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::commands::restore::RestoreStats
pub fn rustic_core::commands::restore::RestoreStats::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::commands::restore::RestoreStats
pub type rustic_core::commands::restore::RestoreStats::Init = T
pub const rustic_core::commands::restore::RestoreStats::ALIGN: usize
pub unsafe fn rustic_core::commands::restore::RestoreStats::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::commands::restore::RestoreStats::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::commands::restore::RestoreStats::drop(ptr: usize)
pub unsafe fn rustic_core::commands::restore::RestoreStats::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::commands::restore::RestoreStats
impl<T> tracing::instrument::WithSubscriber for rustic_core::commands::restore::RestoreStats
impl<T> typenum::type_operators::Same<T> for rustic_core::commands::restore::RestoreStats
pub type rustic_core::commands::restore::RestoreStats::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::commands::restore::RestoreStats where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::commands::restore::RestoreStats::vzip(self) -> V
pub struct rustic_core::RusticError(pub rustic_core::error::RusticErrorKind)
impl rustic_core::error::RusticError
pub fn rustic_core::error::RusticError::into_inner(self) -> rustic_core::error::RusticErrorKind
impl core::convert::From<rustic_core::error::RusticErrorKind> for rustic_core::error::RusticError
pub fn rustic_core::error::RusticError::from(source: rustic_core::error::RusticErrorKind) -> Self
impl core::error::Error for rustic_core::error::RusticError
pub fn rustic_core::error::RusticError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::error::RusticError
pub fn rustic_core::error::RusticError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<E> core::convert::From<E> for rustic_core::error::RusticError where E: rustic_core::error::RusticErrorMarker, rustic_core::error::RusticErrorKind: core::convert::From<E>
pub fn rustic_core::error::RusticError::from(value: E) -> Self
impl core::fmt::Debug for rustic_core::error::RusticError
pub fn rustic_core::error::RusticError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::error::RusticError
impl core::marker::Sync for rustic_core::error::RusticError
impl core::marker::Unpin for rustic_core::error::RusticError
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::error::RusticError
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::error::RusticError
impl<T, U> core::convert::Into<U> for rustic_core::error::RusticError where U: core::convert::From<T>
pub fn rustic_core::error::RusticError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::error::RusticError where U: core::convert::Into<T>
pub type rustic_core::error::RusticError::Error = core::convert::Infallible
pub fn rustic_core::error::RusticError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::error::RusticError where U: core::convert::TryFrom<T>
pub type rustic_core::error::RusticError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::error::RusticError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::error::RusticError where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::error::RusticError::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::error::RusticError where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::error::RusticError::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::RusticError::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::error::RusticError::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::error::RusticError where T: 'static + core::marker::Sized
pub fn rustic_core::error::RusticError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::error::RusticError where T: core::marker::Sized
pub fn rustic_core::error::RusticError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::error::RusticError where T: core::marker::Sized
pub fn rustic_core::error::RusticError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::error::RusticError
pub fn rustic_core::error::RusticError::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::error::RusticError
pub type rustic_core::error::RusticError::Init = T
pub const rustic_core::error::RusticError::ALIGN: usize
pub unsafe fn rustic_core::error::RusticError::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::error::RusticError::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::error::RusticError::drop(ptr: usize)
pub unsafe fn rustic_core::error::RusticError::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::error::RusticError
impl<T> tracing::instrument::WithSubscriber for rustic_core::error::RusticError
impl<T> typenum::type_operators::Same<T> for rustic_core::error::RusticError
pub type rustic_core::error::RusticError::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::error::RusticError where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::error::RusticError::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::SnapshotGroup
pub rustic_core::SnapshotGroup::hostname: core::option::Option<alloc::string::String>
pub rustic_core::SnapshotGroup::label: core::option::Option<alloc::string::String>
pub rustic_core::SnapshotGroup::paths: core::option::Option<rustic_core::repofile::snapshotfile::StringList>
pub rustic_core::SnapshotGroup::tags: core::option::Option<rustic_core::repofile::snapshotfile::StringList>
impl rustic_core::repofile::snapshotfile::SnapshotGroup
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::from_snapshot(sn: &rustic_core::repofile::snapshotfile::SnapshotFile, crit: rustic_core::repofile::snapshotfile::SnapshotGroupCriterion) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::is_empty(&self) -> bool
impl core::fmt::Display for rustic_core::repofile::snapshotfile::SnapshotGroup
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::cmp::Eq for rustic_core::repofile::snapshotfile::SnapshotGroup
impl core::cmp::PartialEq<rustic_core::repofile::snapshotfile::SnapshotGroup> for rustic_core::repofile::snapshotfile::SnapshotGroup
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::eq(&self, other: &rustic_core::repofile::snapshotfile::SnapshotGroup) -> bool
impl core::default::Default for rustic_core::repofile::snapshotfile::SnapshotGroup
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::default() -> rustic_core::repofile::snapshotfile::SnapshotGroup
impl core::fmt::Debug for rustic_core::repofile::snapshotfile::SnapshotGroup
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::repofile::snapshotfile::SnapshotGroup
impl core::marker::StructuralPartialEq for rustic_core::repofile::snapshotfile::SnapshotGroup
impl serde::ser::Serialize for rustic_core::repofile::snapshotfile::SnapshotGroup
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl core::marker::Send for rustic_core::repofile::snapshotfile::SnapshotGroup
impl core::marker::Sync for rustic_core::repofile::snapshotfile::SnapshotGroup
impl core::marker::Unpin for rustic_core::repofile::snapshotfile::SnapshotGroup
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::snapshotfile::SnapshotGroup
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::snapshotfile::SnapshotGroup
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::snapshotfile::SnapshotGroup where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::snapshotfile::SnapshotGroup where U: core::convert::From<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::snapshotfile::SnapshotGroup where U: core::convert::Into<T>
pub type rustic_core::repofile::snapshotfile::SnapshotGroup::Error = core::convert::Infallible
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::snapshotfile::SnapshotGroup where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::snapshotfile::SnapshotGroup::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::repofile::snapshotfile::SnapshotGroup where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::repofile::snapshotfile::SnapshotGroup where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::repofile::snapshotfile::SnapshotGroup where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::snapshotfile::SnapshotGroup where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::snapshotfile::SnapshotGroup where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::snapshotfile::SnapshotGroup
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::snapshotfile::SnapshotGroup
pub type rustic_core::repofile::snapshotfile::SnapshotGroup::Init = T
pub const rustic_core::repofile::snapshotfile::SnapshotGroup::ALIGN: usize
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotGroup::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotGroup::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotGroup::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotGroup::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::snapshotfile::SnapshotGroup
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::snapshotfile::SnapshotGroup
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::snapshotfile::SnapshotGroup
pub type rustic_core::repofile::snapshotfile::SnapshotGroup::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::snapshotfile::SnapshotGroup where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotGroup::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::SnapshotGroupCriterion
pub rustic_core::SnapshotGroupCriterion::hostname: bool
pub rustic_core::SnapshotGroupCriterion::label: bool
pub rustic_core::SnapshotGroupCriterion::paths: bool
pub rustic_core::SnapshotGroupCriterion::tags: bool
impl rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::hostname(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::label(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::paths(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::tags(self, value: impl core::convert::Into<bool>) -> Self
impl core::default::Default for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::default() -> Self
impl core::fmt::Display for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::str::traits::FromStr for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub type rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::Err = rustic_core::error::RusticError
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::from_str(s: &str) -> rustic_core::error::RusticResult<Self>
impl core::clone::Clone for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::clone(&self) -> rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
impl core::fmt::Debug for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
impl core::marker::Send for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
impl core::marker::Sync for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
impl core::marker::Unpin for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
impl<T, U> core::convert::Into<U> for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where U: core::convert::From<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where U: core::convert::Into<T>
pub type rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::Error = core::convert::Infallible
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where T: core::clone::Clone
pub type rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::Owned = T
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub type rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::Init = T
pub const rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::ALIGN: usize
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion
pub type rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::snapshotfile::SnapshotGroupCriterion where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotGroupCriterion::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::SnapshotOptions
pub rustic_core::SnapshotOptions::command: core::option::Option<alloc::string::String>
pub rustic_core::SnapshotOptions::delete_after: core::option::Option<humantime::wrapper::Duration>
pub rustic_core::SnapshotOptions::delete_never: bool
pub rustic_core::SnapshotOptions::description: core::option::Option<alloc::string::String>
pub rustic_core::SnapshotOptions::description_from: core::option::Option<std::path::PathBuf>
pub rustic_core::SnapshotOptions::host: core::option::Option<alloc::string::String>
pub rustic_core::SnapshotOptions::label: core::option::Option<alloc::string::String>
pub rustic_core::SnapshotOptions::tag: alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>
pub rustic_core::SnapshotOptions::time: core::option::Option<chrono::datetime::DateTime<chrono::offset::local::Local>>
impl rustic_core::repofile::snapshotfile::SnapshotOptions
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::add_tags(self, tag: &str) -> rustic_core::error::RusticResult<Self>
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::to_snapshot(&self) -> rustic_core::error::RusticResult<rustic_core::repofile::snapshotfile::SnapshotFile>
impl rustic_core::repofile::snapshotfile::SnapshotOptions
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::command(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::delete_after(self, value: impl core::convert::Into<core::option::Option<humantime::wrapper::Duration>>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::delete_never(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::description(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::description_from(self, value: impl core::convert::Into<core::option::Option<std::path::PathBuf>>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::host(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::label(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::tag(self, value: impl core::convert::Into<alloc::vec::Vec<rustic_core::repofile::snapshotfile::StringList>>) -> Self
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::time(self, value: impl core::convert::Into<core::option::Option<chrono::datetime::DateTime<chrono::offset::local::Local>>>) -> Self
impl core::clone::Clone for rustic_core::repofile::snapshotfile::SnapshotOptions
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::clone(&self) -> rustic_core::repofile::snapshotfile::SnapshotOptions
impl core::default::Default for rustic_core::repofile::snapshotfile::SnapshotOptions
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::default() -> rustic_core::repofile::snapshotfile::SnapshotOptions
impl core::fmt::Debug for rustic_core::repofile::snapshotfile::SnapshotOptions
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::snapshotfile::SnapshotOptions
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::snapshotfile::SnapshotOptions where rustic_core::repofile::snapshotfile::SnapshotOptions: core::default::Default
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::snapshotfile::SnapshotOptions
impl core::marker::Sync for rustic_core::repofile::snapshotfile::SnapshotOptions
impl core::marker::Unpin for rustic_core::repofile::snapshotfile::SnapshotOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::snapshotfile::SnapshotOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::snapshotfile::SnapshotOptions
impl<T, U> core::convert::Into<U> for rustic_core::repofile::snapshotfile::SnapshotOptions where U: core::convert::From<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::snapshotfile::SnapshotOptions where U: core::convert::Into<T>
pub type rustic_core::repofile::snapshotfile::SnapshotOptions::Error = core::convert::Infallible
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::snapshotfile::SnapshotOptions where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::snapshotfile::SnapshotOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::snapshotfile::SnapshotOptions where T: core::clone::Clone
pub type rustic_core::repofile::snapshotfile::SnapshotOptions::Owned = T
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::snapshotfile::SnapshotOptions where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::snapshotfile::SnapshotOptions where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::snapshotfile::SnapshotOptions where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::snapshotfile::SnapshotOptions
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::snapshotfile::SnapshotOptions
pub type rustic_core::repofile::snapshotfile::SnapshotOptions::Init = T
pub const rustic_core::repofile::snapshotfile::SnapshotOptions::ALIGN: usize
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotOptions::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::snapshotfile::SnapshotOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::snapshotfile::SnapshotOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::snapshotfile::SnapshotOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::snapshotfile::SnapshotOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::snapshotfile::SnapshotOptions
pub type rustic_core::repofile::snapshotfile::SnapshotOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::snapshotfile::SnapshotOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::snapshotfile::SnapshotOptions::vzip(self) -> V
pub struct rustic_core::StringList(pub alloc::vec::Vec<alloc::string::String>)
impl rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::add(&mut self, s: alloc::string::String)
pub fn rustic_core::repofile::snapshotfile::StringList::add_all(&mut self, string_lists: alloc::vec::Vec<Self>)
pub fn rustic_core::repofile::snapshotfile::StringList::add_list(&mut self, sl: Self)
pub fn rustic_core::repofile::snapshotfile::StringList::contains(&self, s: &str) -> bool
pub fn rustic_core::repofile::snapshotfile::StringList::contains_all(&self, sl: &Self) -> bool
pub fn rustic_core::repofile::snapshotfile::StringList::formatln(&self) -> alloc::string::String
pub fn rustic_core::repofile::snapshotfile::StringList::iter(&self) -> core::slice::iter::Iter<'_, alloc::string::String>
pub fn rustic_core::repofile::snapshotfile::StringList::matches(&self, sls: &[Self]) -> bool
pub fn rustic_core::repofile::snapshotfile::StringList::remove_all(&mut self, string_lists: &[Self])
pub fn rustic_core::repofile::snapshotfile::StringList::set_paths<T: core::convert::AsRef<std::path::Path>>(&mut self, paths: &[T]) -> rustic_core::error::RusticResult<()>
pub fn rustic_core::repofile::snapshotfile::StringList::sort(&mut self)
impl core::fmt::Display for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::str::traits::FromStr for rustic_core::repofile::snapshotfile::StringList
pub type rustic_core::repofile::snapshotfile::StringList::Err = rustic_core::error::RusticError
pub fn rustic_core::repofile::snapshotfile::StringList::from_str(s: &str) -> rustic_core::error::RusticResult<Self>
impl core::clone::Clone for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::clone(&self) -> rustic_core::repofile::snapshotfile::StringList
impl core::cmp::Eq for rustic_core::repofile::snapshotfile::StringList
impl core::cmp::Ord for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::cmp(&self, other: &rustic_core::repofile::snapshotfile::StringList) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::repofile::snapshotfile::StringList> for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::eq(&self, other: &rustic_core::repofile::snapshotfile::StringList) -> bool
impl core::cmp::PartialOrd<rustic_core::repofile::snapshotfile::StringList> for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::partial_cmp(&self, other: &rustic_core::repofile::snapshotfile::StringList) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::default() -> rustic_core::repofile::snapshotfile::StringList
impl core::fmt::Debug for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::repofile::snapshotfile::StringList
impl core::marker::StructuralPartialEq for rustic_core::repofile::snapshotfile::StringList
impl serde::ser::Serialize for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::snapshotfile::StringList
impl core::marker::Sync for rustic_core::repofile::snapshotfile::StringList
impl core::marker::Unpin for rustic_core::repofile::snapshotfile::StringList
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::snapshotfile::StringList
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::snapshotfile::StringList
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::snapshotfile::StringList where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::StringList::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::snapshotfile::StringList where U: core::convert::From<T>
pub fn rustic_core::repofile::snapshotfile::StringList::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::snapshotfile::StringList where U: core::convert::Into<T>
pub type rustic_core::repofile::snapshotfile::StringList::Error = core::convert::Infallible
pub fn rustic_core::repofile::snapshotfile::StringList::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::snapshotfile::StringList where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::snapshotfile::StringList::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::snapshotfile::StringList::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::snapshotfile::StringList where T: core::clone::Clone
pub type rustic_core::repofile::snapshotfile::StringList::Owned = T
pub fn rustic_core::repofile::snapshotfile::StringList::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::snapshotfile::StringList::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::repofile::snapshotfile::StringList where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::StringList::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::repofile::snapshotfile::StringList where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::repofile::snapshotfile::StringList::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::StringList::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::repofile::snapshotfile::StringList::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::repofile::snapshotfile::StringList where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::StringList::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::snapshotfile::StringList where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::StringList::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::snapshotfile::StringList where T: core::marker::Sized
pub fn rustic_core::repofile::snapshotfile::StringList::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::snapshotfile::StringList
pub fn rustic_core::repofile::snapshotfile::StringList::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::snapshotfile::StringList
pub type rustic_core::repofile::snapshotfile::StringList::Init = T
pub const rustic_core::repofile::snapshotfile::StringList::ALIGN: usize
pub unsafe fn rustic_core::repofile::snapshotfile::StringList::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::snapshotfile::StringList::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::snapshotfile::StringList::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::snapshotfile::StringList::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::snapshotfile::StringList where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::snapshotfile::StringList
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::snapshotfile::StringList
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::snapshotfile::StringList
pub type rustic_core::repofile::snapshotfile::StringList::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::snapshotfile::StringList where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::snapshotfile::StringList::vzip(self) -> V
pub trait rustic_core::IndexedFull: rustic_core::repository::IndexedIds
impl<S: rustic_core::repository::Open> rustic_core::repository::IndexedFull for rustic_core::repository::IndexedStatus<rustic_core::repository::FullIndex, S>
pub trait rustic_core::Progress: core::marker::Send + core::marker::Sync + core::clone::Clone
pub fn rustic_core::Progress::finish(&self)
pub fn rustic_core::Progress::inc(&self, inc: u64)
pub fn rustic_core::Progress::is_hidden(&self) -> bool
pub fn rustic_core::Progress::set_length(&self, len: u64)
pub fn rustic_core::Progress::set_title(&self, title: &'static str)
impl rustic_core::progress::Progress for rustic_core::progress::NoProgress
pub fn rustic_core::progress::NoProgress::finish(&self)
pub fn rustic_core::progress::NoProgress::inc(&self, _inc: u64)
pub fn rustic_core::progress::NoProgress::is_hidden(&self) -> bool
pub fn rustic_core::progress::NoProgress::set_length(&self, _len: u64)
pub fn rustic_core::progress::NoProgress::set_title(&self, title: &'static str)
pub trait rustic_core::ProgressBars
pub type rustic_core::ProgressBars::P: rustic_core::progress::Progress
pub fn rustic_core::ProgressBars::progress_bytes(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::ProgressBars::progress_counter(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::ProgressBars::progress_hidden(&self) -> Self::P
pub fn rustic_core::ProgressBars::progress_spinner(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
impl rustic_core::progress::ProgressBars for rustic_core::progress::NoProgressBars
pub type rustic_core::progress::NoProgressBars::P = rustic_core::progress::NoProgress
pub fn rustic_core::progress::NoProgressBars::progress_bytes(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::progress::NoProgressBars::progress_counter(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::progress::NoProgressBars::progress_hidden(&self) -> Self::P
pub fn rustic_core::progress::NoProgressBars::progress_spinner(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::last_modified_node(n1: &rustic_core::backend::node::Node, n2: &rustic_core::backend::node::Node) -> core::cmp::Ordering
pub fn rustic_core::max_compression_level() -> i32
pub type rustic_core::RusticResult<T> = core::result::Result<T, rustic_core::error::RusticError>
